;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22-Nov-15 08:53:28 PM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x4FFC2000  	536891388
0x0004	0x1C210000  	7201
0x0008	0x1B250000  	6949
0x000C	0x1B250000  	6949
0x0010	0x1B250000  	6949
0x0014	0x1B250000  	6949
0x0018	0x1B250000  	6949
0x001C	0x1B250000  	6949
0x0020	0x1B250000  	6949
0x0024	0x1B250000  	6949
0x0028	0x1B250000  	6949
0x002C	0x1B250000  	6949
0x0030	0x1B250000  	6949
0x0034	0x1B250000  	6949
0x0038	0x1B250000  	6949
0x003C	0x1B250000  	6949
0x0040	0x1B250000  	6949
0x0044	0x1B250000  	6949
0x0048	0x1B250000  	6949
0x004C	0x1B250000  	6949
0x0050	0x1B250000  	6949
0x0054	0x1B250000  	6949
0x0058	0x1B250000  	6949
0x005C	0x1B250000  	6949
0x0060	0x1B250000  	6949
0x0064	0x1B250000  	6949
0x0068	0x1B250000  	6949
0x006C	0x1B250000  	6949
0x0070	0x1B250000  	6949
0x0074	0x1B250000  	6949
0x0078	0x1B250000  	6949
0x007C	0x1B250000  	6949
0x0080	0x1B250000  	6949
0x0084	0x1B250000  	6949
0x0088	0x1B250000  	6949
0x008C	0x1B250000  	6949
0x0090	0x1B250000  	6949
0x0094	0x1B250000  	6949
0x0098	0x1B250000  	6949
0x009C	0x1B250000  	6949
0x00A0	0x1B250000  	6949
0x00A4	0x1B250000  	6949
0x00A8	0x1B250000  	6949
0x00AC	0x1B250000  	6949
0x00B0	0x1B250000  	6949
0x00B4	0x1B250000  	6949
0x00B8	0x1B250000  	6949
0x00BC	0x1B250000  	6949
0x00C0	0x1B250000  	6949
0x00C4	0x1B250000  	6949
0x00C8	0x1B250000  	6949
0x00CC	0x1B250000  	6949
0x00D0	0x1B250000  	6949
0x00D4	0x1B250000  	6949
0x00D8	0x1B250000  	6949
0x00DC	0x1B250000  	6949
0x00E0	0x1B250000  	6949
0x00E4	0x1B250000  	6949
0x00E8	0x1B250000  	6949
0x00EC	0x1B250000  	6949
0x00F0	0x1B250000  	6949
0x00F4	0x1B250000  	6949
0x00F8	0x1B250000  	6949
0x00FC	0x1B250000  	6949
0x0100	0x1B250000  	6949
0x0104	0x1B250000  	6949
0x0108	0x1B250000  	6949
0x010C	0x1B250000  	6949
0x0110	0x1B250000  	6949
0x0114	0x1B250000  	6949
0x0118	0x1B250000  	6949
0x011C	0x1B250000  	6949
0x0120	0x1B250000  	6949
0x0124	0x1B250000  	6949
0x0128	0x1B250000  	6949
0x012C	0x1B250000  	6949
; end of ____SysVT
_main:
;ST7735s_demo.c, 4 :: 		void main()
0x1C20	0xB088    SUB	SP, SP, #32
0x1C22	0xF7FFFF83  BL	6956
0x1C26	0xF000FAE5  BL	8692
0x1C2A	0xF7FFFF71  BL	6928
0x1C2E	0xF000FAA1  BL	8564
;ST7735s_demo.c, 6 :: 		float f = -0.09;
0x1C32	0x48CB    LDR	R0, [PC, #812]
0x1C34	0x9000    STR	R0, [SP, #0]
0x1C36	0xF06F0008  MVN	R0, #8
0x1C3A	0xF8AD0004  STRH	R0, [SP, #4]
0x1C3E	0x207F    MOVS	R0, #127
0x1C40	0xF88D0006  STRB	R0, [SP, #6]
;ST7735s_demo.c, 7 :: 		signed int i = -9;
;ST7735s_demo.c, 8 :: 		signed char c = 127;
;ST7735s_demo.c, 10 :: 		ST7735_init();
0x1C44	0xF7FFFAE4  BL	_ST7735_init+0
;ST7735s_demo.c, 12 :: 		Set_Rotation(0x03);
0x1C48	0x2003    MOVS	R0, #3
0x1C4A	0xF7FFFC61  BL	_Set_Rotation+0
;ST7735s_demo.c, 14 :: 		TFT_fill(Swap_Colour(GREEN));
0x1C4E	0xF24070E0  MOVW	R0, #2016
0x1C52	0xF7FFFCCD  BL	_Swap_Colour+0
0x1C56	0xF7FFFDDB  BL	_TFT_fill+0
;ST7735s_demo.c, 15 :: 		Draw_Circle(79, 63, 40, YES, Swap_Colour(RED));
0x1C5A	0xF64F0000  MOVW	R0, #63488
0x1C5E	0xF7FFFCC7  BL	_Swap_Colour+0
0x1C62	0xB401    PUSH	(R0)
0x1C64	0x2301    MOVS	R3, #1
0x1C66	0x2228    MOVS	R2, #40
0x1C68	0xB212    SXTH	R2, R2
0x1C6A	0x213F    MOVS	R1, #63
0x1C6C	0xB209    SXTH	R1, R1
0x1C6E	0x204F    MOVS	R0, #79
0x1C70	0xB200    SXTH	R0, R0
0x1C72	0xF7FFFDFF  BL	_Draw_Circle+0
0x1C76	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 16 :: 		delay_ms(6000);
0x1C78	0xF24A17FF  MOVW	R7, #41471
0x1C7C	0xF2C0474A  MOVT	R7, #1098
L_main200:
0x1C80	0x1E7F    SUBS	R7, R7, #1
0x1C82	0xD1FD    BNE	L_main200
0x1C84	0xBF00    NOP
0x1C86	0xBF00    NOP
0x1C88	0xBF00    NOP
0x1C8A	0xBF00    NOP
0x1C8C	0xBF00    NOP
;ST7735s_demo.c, 18 :: 		TFT_fill(Swap_Colour(WHITE));
0x1C8E	0xF64F70FF  MOVW	R0, #65535
0x1C92	0xF7FFFCAD  BL	_Swap_Colour+0
0x1C96	0xF7FFFDBB  BL	_TFT_fill+0
;ST7735s_demo.c, 20 :: 		Draw_Circle(6, 6, 4, YES, Swap_Colour(RED));
0x1C9A	0xF64F0000  MOVW	R0, #63488
0x1C9E	0xF7FFFCA7  BL	_Swap_Colour+0
0x1CA2	0xB401    PUSH	(R0)
0x1CA4	0x2301    MOVS	R3, #1
0x1CA6	0x2204    MOVS	R2, #4
0x1CA8	0xB212    SXTH	R2, R2
0x1CAA	0x2106    MOVS	R1, #6
0x1CAC	0xB209    SXTH	R1, R1
0x1CAE	0x2006    MOVS	R0, #6
0x1CB0	0xB200    SXTH	R0, R0
0x1CB2	0xF7FFFDDF  BL	_Draw_Circle+0
0x1CB6	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 21 :: 		Draw_Circle(153, 6, 4, YES, Swap_Colour(RED));
0x1CB8	0xF64F0000  MOVW	R0, #63488
0x1CBC	0xF7FFFC98  BL	_Swap_Colour+0
0x1CC0	0xB401    PUSH	(R0)
0x1CC2	0x2301    MOVS	R3, #1
0x1CC4	0x2204    MOVS	R2, #4
0x1CC6	0xB212    SXTH	R2, R2
0x1CC8	0x2106    MOVS	R1, #6
0x1CCA	0xB209    SXTH	R1, R1
0x1CCC	0x2099    MOVS	R0, #153
0x1CCE	0xB200    SXTH	R0, R0
0x1CD0	0xF7FFFDD0  BL	_Draw_Circle+0
0x1CD4	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 22 :: 		Draw_Circle(6, 121, 4, YES, Swap_Colour(RED));
0x1CD6	0xF64F0000  MOVW	R0, #63488
0x1CDA	0xF7FFFC89  BL	_Swap_Colour+0
0x1CDE	0xB401    PUSH	(R0)
0x1CE0	0x2301    MOVS	R3, #1
0x1CE2	0x2204    MOVS	R2, #4
0x1CE4	0xB212    SXTH	R2, R2
0x1CE6	0x2179    MOVS	R1, #121
0x1CE8	0xB209    SXTH	R1, R1
0x1CEA	0x2006    MOVS	R0, #6
0x1CEC	0xB200    SXTH	R0, R0
0x1CEE	0xF7FFFDC1  BL	_Draw_Circle+0
0x1CF2	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 23 :: 		Draw_Circle(153, 121, 4, YES, Swap_Colour(RED));
0x1CF4	0xF64F0000  MOVW	R0, #63488
0x1CF8	0xF7FFFC7A  BL	_Swap_Colour+0
0x1CFC	0xB401    PUSH	(R0)
0x1CFE	0x2301    MOVS	R3, #1
0x1D00	0x2204    MOVS	R2, #4
0x1D02	0xB212    SXTH	R2, R2
0x1D04	0x2179    MOVS	R1, #121
0x1D06	0xB209    SXTH	R1, R1
0x1D08	0x2099    MOVS	R0, #153
0x1D0A	0xB200    SXTH	R0, R0
0x1D0C	0xF7FFFDB2  BL	_Draw_Circle+0
0x1D10	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 25 :: 		delay_ms(1000);
0x1D12	0xF64127FF  MOVW	R7, #6911
0x1D16	0xF2C007B7  MOVT	R7, #183
L_main202:
0x1D1A	0x1E7F    SUBS	R7, R7, #1
0x1D1C	0xD1FD    BNE	L_main202
0x1D1E	0xBF00    NOP
0x1D20	0xBF00    NOP
0x1D22	0xBF00    NOP
0x1D24	0xBF00    NOP
0x1D26	0xBF00    NOP
;ST7735s_demo.c, 27 :: 		Draw_Line(14, 0, 14, 127, Swap_Colour(CYAN));
0x1D28	0xF24070FF  MOVW	R0, #2047
0x1D2C	0xF7FFFC60  BL	_Swap_Colour+0
0x1D30	0xB401    PUSH	(R0)
0x1D32	0x237F    MOVS	R3, #127
0x1D34	0xB21B    SXTH	R3, R3
0x1D36	0x220E    MOVS	R2, #14
0x1D38	0xB212    SXTH	R2, R2
0x1D3A	0x2100    MOVS	R1, #0
0x1D3C	0xB209    SXTH	R1, R1
0x1D3E	0x200E    MOVS	R0, #14
0x1D40	0xB200    SXTH	R0, R0
0x1D42	0xF7FEFC83  BL	_Draw_Line+0
0x1D46	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 28 :: 		Draw_Line(145, 0, 145, 127, Swap_Colour(CYAN));
0x1D48	0xF24070FF  MOVW	R0, #2047
0x1D4C	0xF7FFFC50  BL	_Swap_Colour+0
0x1D50	0xB401    PUSH	(R0)
0x1D52	0x237F    MOVS	R3, #127
0x1D54	0xB21B    SXTH	R3, R3
0x1D56	0x2291    MOVS	R2, #145
0x1D58	0xB212    SXTH	R2, R2
0x1D5A	0x2100    MOVS	R1, #0
0x1D5C	0xB209    SXTH	R1, R1
0x1D5E	0x2091    MOVS	R0, #145
0x1D60	0xB200    SXTH	R0, R0
0x1D62	0xF7FEFC73  BL	_Draw_Line+0
0x1D66	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 29 :: 		Draw_Line(0, 14, 159, 14, Swap_Colour(CYAN));
0x1D68	0xF24070FF  MOVW	R0, #2047
0x1D6C	0xF7FFFC40  BL	_Swap_Colour+0
0x1D70	0xB401    PUSH	(R0)
0x1D72	0x230E    MOVS	R3, #14
0x1D74	0xB21B    SXTH	R3, R3
0x1D76	0x229F    MOVS	R2, #159
0x1D78	0xB212    SXTH	R2, R2
0x1D7A	0x210E    MOVS	R1, #14
0x1D7C	0xB209    SXTH	R1, R1
0x1D7E	0x2000    MOVS	R0, #0
0x1D80	0xB200    SXTH	R0, R0
0x1D82	0xF7FEFC63  BL	_Draw_Line+0
0x1D86	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 30 :: 		Draw_Line(0, 113, 159, 113, Swap_Colour(CYAN));
0x1D88	0xF24070FF  MOVW	R0, #2047
0x1D8C	0xF7FFFC30  BL	_Swap_Colour+0
0x1D90	0xB401    PUSH	(R0)
0x1D92	0x2371    MOVS	R3, #113
0x1D94	0xB21B    SXTH	R3, R3
0x1D96	0x229F    MOVS	R2, #159
0x1D98	0xB212    SXTH	R2, R2
0x1D9A	0x2171    MOVS	R1, #113
0x1D9C	0xB209    SXTH	R1, R1
0x1D9E	0x2000    MOVS	R0, #0
0x1DA0	0xB200    SXTH	R0, R0
0x1DA2	0xF7FEFC53  BL	_Draw_Line+0
0x1DA6	0xB001    ADD	SP, SP, #4
;ST7735s_demo.c, 32 :: 		delay_ms(1000);
0x1DA8	0xF64127FF  MOVW	R7, #6911
0x1DAC	0xF2C007B7  MOVT	R7, #183
L_main204:
0x1DB0	0x1E7F    SUBS	R7, R7, #1
0x1DB2	0xD1FD    BNE	L_main204
0x1DB4	0xBF00    NOP
0x1DB6	0xBF00    NOP
0x1DB8	0xBF00    NOP
0x1DBA	0xBF00    NOP
0x1DBC	0xBF00    NOP
;ST7735s_demo.c, 34 :: 		Draw_Rectangle(17, 17, 142, 110, YES, ROUND, Swap_Colour(BLUE), Swap_Colour(WHITE));
0x1DBE	0xF64F70FF  MOVW	R0, #65535
0x1DC2	0xF7FFFC15  BL	_Swap_Colour+0
0x1DC6	0xF8AD0014  STRH	R0, [SP, #20]
0x1DCA	0x201F    MOVS	R0, #31
0x1DCC	0xF7FFFC10  BL	_Swap_Colour+0
0x1DD0	0x2301    MOVS	R3, #1
0x1DD2	0x2201    MOVS	R2, #1
0x1DD4	0xF8BD1014  LDRH	R1, [SP, #20]
0x1DD8	0xB402    PUSH	(R1)
0x1DDA	0xB401    PUSH	(R0)
0x1DDC	0xB408    PUSH	(R3)
0x1DDE	0xB404    PUSH	(R2)
0x1DE0	0x236E    MOVS	R3, #110
0x1DE2	0xB21B    SXTH	R3, R3
0x1DE4	0x228E    MOVS	R2, #142
0x1DE6	0xB212    SXTH	R2, R2
0x1DE8	0x2111    MOVS	R1, #17
0x1DEA	0xB209    SXTH	R1, R1
0x1DEC	0x2011    MOVS	R0, #17
0x1DEE	0xB200    SXTH	R0, R0
0x1DF0	0xF7FFFC0C  BL	_Draw_Rectangle+0
0x1DF4	0xB004    ADD	SP, SP, #16
;ST7735s_demo.c, 35 :: 		delay_ms(1000);
0x1DF6	0xF64127FF  MOVW	R7, #6911
0x1DFA	0xF2C007B7  MOVT	R7, #183
0x1DFE	0xBF00    NOP
0x1E00	0xBF00    NOP
L_main206:
0x1E02	0x1E7F    SUBS	R7, R7, #1
0x1E04	0xD1FD    BNE	L_main206
0x1E06	0xBF00    NOP
0x1E08	0xBF00    NOP
0x1E0A	0xBF00    NOP
;ST7735s_demo.c, 37 :: 		print_str(22, 58, 2, Swap_Colour(MAGENTA), Swap_Colour(BLUE), "MicroArena");
0x1E0C	0x4855    LDR	R0, [PC, #340]
0x1E0E	0x9006    STR	R0, [SP, #24]
0x1E10	0x201F    MOVS	R0, #31
0x1E12	0xF7FFFBED  BL	_Swap_Colour+0
0x1E16	0xF8AD0014  STRH	R0, [SP, #20]
0x1E1A	0xF64F001F  MOVW	R0, #63519
0x1E1E	0xF7FFFBE7  BL	_Swap_Colour+0
0x1E22	0x9A06    LDR	R2, [SP, #24]
0x1E24	0xF8BD1014  LDRH	R1, [SP, #20]
0x1E28	0xB404    PUSH	(R2)
0x1E2A	0xB402    PUSH	(R1)
0x1E2C	0xB283    UXTH	R3, R0
0x1E2E	0x2202    MOVS	R2, #2
0x1E30	0x213A    MOVS	R1, #58
0x1E32	0x2016    MOVS	R0, #22
0x1E34	0xF7FFFCAE  BL	_print_str+0
0x1E38	0xB002    ADD	SP, SP, #8
;ST7735s_demo.c, 38 :: 		delay_ms(4000);
0x1E3A	0xF64637FF  MOVW	R7, #27647
0x1E3E	0xF2C027DC  MOVT	R7, #732
L_main208:
0x1E42	0x1E7F    SUBS	R7, R7, #1
0x1E44	0xD1FD    BNE	L_main208
0x1E46	0xBF00    NOP
0x1E48	0xBF00    NOP
0x1E4A	0xBF00    NOP
0x1E4C	0xBF00    NOP
0x1E4E	0xBF00    NOP
;ST7735s_demo.c, 40 :: 		TFT_fill(BLACK);
0x1E50	0x2000    MOVS	R0, #0
0x1E52	0xF7FFFCDD  BL	_TFT_fill+0
;ST7735s_demo.c, 41 :: 		print_str(20, 90, 1, Swap_Colour(CYAN), BLACK, "www.fb.com/MicroArena");
0x1E56	0x4844    LDR	R0, [PC, #272]
0x1E58	0x9006    STR	R0, [SP, #24]
0x1E5A	0x2000    MOVS	R0, #0
0x1E5C	0xF8AD0014  STRH	R0, [SP, #20]
0x1E60	0xF24070FF  MOVW	R0, #2047
0x1E64	0xF7FFFBC4  BL	_Swap_Colour+0
0x1E68	0x9A06    LDR	R2, [SP, #24]
0x1E6A	0xF8BD1014  LDRH	R1, [SP, #20]
0x1E6E	0xB404    PUSH	(R2)
0x1E70	0xB402    PUSH	(R1)
0x1E72	0xB283    UXTH	R3, R0
0x1E74	0x2201    MOVS	R2, #1
0x1E76	0x215A    MOVS	R1, #90
0x1E78	0x2014    MOVS	R0, #20
0x1E7A	0xF7FFFC8B  BL	_print_str+0
0x1E7E	0xB002    ADD	SP, SP, #8
;ST7735s_demo.c, 43 :: 		while(1)
L_main210:
;ST7735s_demo.c, 45 :: 		print_F(60, 20, 1, Swap_Colour(BLUE), BLACK, f, 2);
0x1E80	0x2002    MOVS	R0, #2
0x1E82	0xF88D001C  STRB	R0, [SP, #28]
0x1E86	0x9800    LDR	R0, [SP, #0]
0x1E88	0x9006    STR	R0, [SP, #24]
0x1E8A	0x2000    MOVS	R0, #0
0x1E8C	0xF8AD0014  STRH	R0, [SP, #20]
0x1E90	0x201F    MOVS	R0, #31
0x1E92	0xF7FFFBAD  BL	_Swap_Colour+0
0x1E96	0xF89D301C  LDRB	R3, [SP, #28]
0x1E9A	0x9A06    LDR	R2, [SP, #24]
0x1E9C	0xF8BD1014  LDRH	R1, [SP, #20]
0x1EA0	0xB408    PUSH	(R3)
0x1EA2	0xB404    PUSH	(R2)
0x1EA4	0xB402    PUSH	(R1)
0x1EA6	0xB283    UXTH	R3, R0
0x1EA8	0x2201    MOVS	R2, #1
0x1EAA	0x2114    MOVS	R1, #20
0x1EAC	0x203C    MOVS	R0, #60
0x1EAE	0xF7FFF83B  BL	_print_F+0
0x1EB2	0xB003    ADD	SP, SP, #12
;ST7735s_demo.c, 46 :: 		print_C(60, 40, 1, Swap_Colour(GREEN), BLACK, c);
0x1EB4	0xF99D0006  LDRSB	R0, [SP, #6]
0x1EB8	0xF8AD0018  STRH	R0, [SP, #24]
0x1EBC	0x2000    MOVS	R0, #0
0x1EBE	0xF8AD0014  STRH	R0, [SP, #20]
0x1EC2	0xF24070E0  MOVW	R0, #2016
0x1EC6	0xF7FFFB93  BL	_Swap_Colour+0
0x1ECA	0xF9BD2018  LDRSH	R2, [SP, #24]
0x1ECE	0xF8BD1014  LDRH	R1, [SP, #20]
0x1ED2	0xB404    PUSH	(R2)
0x1ED4	0xB402    PUSH	(R1)
0x1ED6	0xB283    UXTH	R3, R0
0x1ED8	0x2201    MOVS	R2, #1
0x1EDA	0x2128    MOVS	R1, #40
0x1EDC	0x203C    MOVS	R0, #60
0x1EDE	0xF7FEFF89  BL	_print_C+0
0x1EE2	0xB002    ADD	SP, SP, #8
;ST7735s_demo.c, 47 :: 		print_I(60, 60, 1, Swap_Colour(RED), BLACK, i);
0x1EE4	0xF9BD0004  LDRSH	R0, [SP, #4]
0x1EE8	0xF8AD0018  STRH	R0, [SP, #24]
0x1EEC	0x2000    MOVS	R0, #0
0x1EEE	0xF8AD0014  STRH	R0, [SP, #20]
0x1EF2	0xF64F0000  MOVW	R0, #63488
0x1EF6	0xF7FFFB7B  BL	_Swap_Colour+0
0x1EFA	0xF9BD2018  LDRSH	R2, [SP, #24]
0x1EFE	0xF8BD1014  LDRH	R1, [SP, #20]
0x1F02	0xB404    PUSH	(R2)
0x1F04	0xB402    PUSH	(R1)
0x1F06	0xB283    UXTH	R3, R0
0x1F08	0x2201    MOVS	R2, #1
0x1F0A	0x213C    MOVS	R1, #60
0x1F0C	0x203C    MOVS	R0, #60
0x1F0E	0xF7FEFA3D  BL	_print_I+0
0x1F12	0xB002    ADD	SP, SP, #8
;ST7735s_demo.c, 48 :: 		f += 0.01;
0x1F14	0x9A00    LDR	R2, [SP, #0]
0x1F16	0x4815    LDR	R0, [PC, #84]
0x1F18	0xF7FEFEEC  BL	__Add_FP+0
0x1F1C	0x9000    STR	R0, [SP, #0]
;ST7735s_demo.c, 49 :: 		c -= 1;
0x1F1E	0xF99D0006  LDRSB	R0, [SP, #6]
0x1F22	0x1E41    SUBS	R1, R0, #1
0x1F24	0xF88D1006  STRB	R1, [SP, #6]
;ST7735s_demo.c, 50 :: 		i += 1;
0x1F28	0xF9BD0004  LDRSH	R0, [SP, #4]
0x1F2C	0x1C40    ADDS	R0, R0, #1
0x1F2E	0xF8AD0004  STRH	R0, [SP, #4]
;ST7735s_demo.c, 51 :: 		if(c < -128)
0x1F32	0xB249    SXTB	R1, R1
0x1F34	0xF06F007F  MVN	R0, #127
0x1F38	0x4281    CMP	R1, R0
0x1F3A	0xDA03    BGE	L_main212
;ST7735s_demo.c, 53 :: 		c = 127;
0x1F3C	0x207F    MOVS	R0, #127
0x1F3E	0xB240    SXTB	R0, R0
0x1F40	0xF88D0006  STRB	R0, [SP, #6]
;ST7735s_demo.c, 54 :: 		}
L_main212:
;ST7735s_demo.c, 55 :: 		delay_ms(60);
0x1F44	0xF64F477F  MOVW	R7, #64639
0x1F48	0xF2C0070A  MOVT	R7, #10
0x1F4C	0xBF00    NOP
0x1F4E	0xBF00    NOP
L_main213:
0x1F50	0x1E7F    SUBS	R7, R7, #1
0x1F52	0xD1FD    BNE	L_main213
0x1F54	0xBF00    NOP
0x1F56	0xBF00    NOP
0x1F58	0xBF00    NOP
;ST7735s_demo.c, 56 :: 		};
0x1F5A	0xE791    B	L_main210
;ST7735s_demo.c, 57 :: 		}
L_end_main:
L__main_end_loop:
0x1F5C	0xE7FE    B	L__main_end_loop
0x1F5E	0xBF00    NOP
0x1F60	0x51ECBDB8  	#-1111993876
0x1F64	0x00012000  	?lstr1_ST7735s_demo+0
0x1F68	0x000C2000  	?lstr2_ST7735s_demo+0
0x1F6C	0xD70A3C23  	#1008981770
; end of _main
___CC2DW:
;__Lib_System_101_102_103.c, 27 :: 		
0x15A0	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 29 :: 		
L_loopDW:
;__Lib_System_101_102_103.c, 30 :: 		
0x15A2	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_101_102_103.c, 31 :: 		
0x15A6	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_101_102_103.c, 32 :: 		
0x15AA	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_101_102_103.c, 33 :: 		
0x15AE	0xD1F8    BNE	L_loopDW
;__Lib_System_101_102_103.c, 35 :: 		
L_end___CC2DW:
0x15B0	0xB001    ADD	SP, SP, #4
0x15B2	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_101_102_103.c, 69 :: 		
0x15B4	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 71 :: 		
0x15B6	0xF04F0900  MOV	R9, #0
;__Lib_System_101_102_103.c, 72 :: 		
0x15BA	0xF04F0C00  MOV	R12, #0
;__Lib_System_101_102_103.c, 73 :: 		
0x15BE	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_101_102_103.c, 74 :: 		
0x15C2	0xDC04    BGT	L_loopFZs
;__Lib_System_101_102_103.c, 75 :: 		
0x15C4	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_101_102_103.c, 76 :: 		
0x15C8	0xDB01    BLT	L_loopFZs
;__Lib_System_101_102_103.c, 77 :: 		
0x15CA	0x46D4    MOV	R12, R10
;__Lib_System_101_102_103.c, 78 :: 		
0x15CC	0x46EA    MOV	R10, SP
;__Lib_System_101_102_103.c, 79 :: 		
L_loopFZs:
;__Lib_System_101_102_103.c, 80 :: 		
0x15CE	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_101_102_103.c, 81 :: 		
0x15D2	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_101_102_103.c, 82 :: 		
0x15D6	0xD1FA    BNE	L_loopFZs
;__Lib_System_101_102_103.c, 83 :: 		
0x15D8	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_101_102_103.c, 84 :: 		
0x15DC	0xDD05    BLE	L_norep
;__Lib_System_101_102_103.c, 85 :: 		
0x15DE	0x46E2    MOV	R10, R12
;__Lib_System_101_102_103.c, 86 :: 		
0x15E0	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_101_102_103.c, 87 :: 		
0x15E4	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_101_102_103.c, 88 :: 		
0x15E8	0xE7F1    B	L_loopFZs
;__Lib_System_101_102_103.c, 89 :: 		
L_norep:
;__Lib_System_101_102_103.c, 91 :: 		
L_end___FillZeros:
0x15EA	0xB001    ADD	SP, SP, #4
0x15EC	0x4770    BX	LR
; end of ___FillZeros
_ST7735_init:
;st7735.c, 71 :: 		void ST7735_init()
0x1210	0xB081    SUB	SP, SP, #4
0x1212	0xF8CDE000  STR	LR, [SP, #0]
;st7735.c, 73 :: 		Configure_GPIOs();
0x1216	0xF7FFFBE7  BL	_Configure_GPIOs+0
;st7735.c, 75 :: 		ST7735_Reset();
0x121A	0xF7FFFBBD  BL	_ST7735_Reset+0
;st7735.c, 77 :: 		ST7735_Write(ST7735_SWRESET, CMD);
0x121E	0x2100    MOVS	R1, #0
0x1220	0x2001    MOVS	R0, #1
0x1222	0xF7FFFCF9  BL	_ST7735_Write+0
;st7735.c, 78 :: 		delay_us(150);
0x1226	0xF2407707  MOVW	R7, #1799
0x122A	0xF2C00700  MOVT	R7, #0
0x122E	0xBF00    NOP
0x1230	0xBF00    NOP
L_ST7735_init73:
0x1232	0x1E7F    SUBS	R7, R7, #1
0x1234	0xD1FD    BNE	L_ST7735_init73
0x1236	0xBF00    NOP
0x1238	0xBF00    NOP
0x123A	0xBF00    NOP
;st7735.c, 79 :: 		ST7735_Write(ST7735_SLPOUT, CMD);
0x123C	0x2100    MOVS	R1, #0
0x123E	0x2011    MOVS	R0, #17
0x1240	0xF7FFFCEA  BL	_ST7735_Write+0
;st7735.c, 80 :: 		delay_us(150);
0x1244	0xF2407707  MOVW	R7, #1799
0x1248	0xF2C00700  MOVT	R7, #0
0x124C	0xBF00    NOP
0x124E	0xBF00    NOP
L_ST7735_init75:
0x1250	0x1E7F    SUBS	R7, R7, #1
0x1252	0xD1FD    BNE	L_ST7735_init75
0x1254	0xBF00    NOP
0x1256	0xBF00    NOP
0x1258	0xBF00    NOP
;st7735.c, 82 :: 		ST7735_Write(ST7735_FRMCTR1, CMD);
0x125A	0x2100    MOVS	R1, #0
0x125C	0x20B1    MOVS	R0, #177
0x125E	0xF7FFFCDB  BL	_ST7735_Write+0
;st7735.c, 83 :: 		ST7735_Write(0x01, DAT);
0x1262	0x2101    MOVS	R1, #1
0x1264	0x2001    MOVS	R0, #1
0x1266	0xF7FFFCD7  BL	_ST7735_Write+0
;st7735.c, 84 :: 		ST7735_Write(0x2C, DAT);
0x126A	0x2101    MOVS	R1, #1
0x126C	0x202C    MOVS	R0, #44
0x126E	0xF7FFFCD3  BL	_ST7735_Write+0
;st7735.c, 85 :: 		ST7735_Write(0x2D, DAT);
0x1272	0x2101    MOVS	R1, #1
0x1274	0x202D    MOVS	R0, #45
0x1276	0xF7FFFCCF  BL	_ST7735_Write+0
;st7735.c, 87 :: 		ST7735_Write(ST7735_FRMCTR2, CMD);
0x127A	0x2100    MOVS	R1, #0
0x127C	0x20B2    MOVS	R0, #178
0x127E	0xF7FFFCCB  BL	_ST7735_Write+0
;st7735.c, 88 :: 		ST7735_Write(0x01, DAT);
0x1282	0x2101    MOVS	R1, #1
0x1284	0x2001    MOVS	R0, #1
0x1286	0xF7FFFCC7  BL	_ST7735_Write+0
;st7735.c, 89 :: 		ST7735_Write(0x2C, DAT);
0x128A	0x2101    MOVS	R1, #1
0x128C	0x202C    MOVS	R0, #44
0x128E	0xF7FFFCC3  BL	_ST7735_Write+0
;st7735.c, 90 :: 		ST7735_Write(0x2D, DAT);
0x1292	0x2101    MOVS	R1, #1
0x1294	0x202D    MOVS	R0, #45
0x1296	0xF7FFFCBF  BL	_ST7735_Write+0
;st7735.c, 92 :: 		ST7735_Write(ST7735_FRMCTR3, CMD);
0x129A	0x2100    MOVS	R1, #0
0x129C	0x20B3    MOVS	R0, #179
0x129E	0xF7FFFCBB  BL	_ST7735_Write+0
;st7735.c, 93 :: 		ST7735_Write(0x01, DAT);
0x12A2	0x2101    MOVS	R1, #1
0x12A4	0x2001    MOVS	R0, #1
0x12A6	0xF7FFFCB7  BL	_ST7735_Write+0
;st7735.c, 94 :: 		ST7735_Write(0x2C, DAT);
0x12AA	0x2101    MOVS	R1, #1
0x12AC	0x202C    MOVS	R0, #44
0x12AE	0xF7FFFCB3  BL	_ST7735_Write+0
;st7735.c, 95 :: 		ST7735_Write(0x2D, DAT);
0x12B2	0x2101    MOVS	R1, #1
0x12B4	0x202D    MOVS	R0, #45
0x12B6	0xF7FFFCAF  BL	_ST7735_Write+0
;st7735.c, 96 :: 		ST7735_Write(0x01, DAT);
0x12BA	0x2101    MOVS	R1, #1
0x12BC	0x2001    MOVS	R0, #1
0x12BE	0xF7FFFCAB  BL	_ST7735_Write+0
;st7735.c, 97 :: 		ST7735_Write(0x2C, DAT);
0x12C2	0x2101    MOVS	R1, #1
0x12C4	0x202C    MOVS	R0, #44
0x12C6	0xF7FFFCA7  BL	_ST7735_Write+0
;st7735.c, 98 :: 		ST7735_Write(0x2D, DAT);
0x12CA	0x2101    MOVS	R1, #1
0x12CC	0x202D    MOVS	R0, #45
0x12CE	0xF7FFFCA3  BL	_ST7735_Write+0
;st7735.c, 100 :: 		ST7735_Write(ST7735_INVCTR, CMD);
0x12D2	0x2100    MOVS	R1, #0
0x12D4	0x20B4    MOVS	R0, #180
0x12D6	0xF7FFFC9F  BL	_ST7735_Write+0
;st7735.c, 101 :: 		ST7735_Write(0x07, DAT);
0x12DA	0x2101    MOVS	R1, #1
0x12DC	0x2007    MOVS	R0, #7
0x12DE	0xF7FFFC9B  BL	_ST7735_Write+0
;st7735.c, 103 :: 		ST7735_Write(ST7735_PWCTR1, CMD);
0x12E2	0x2100    MOVS	R1, #0
0x12E4	0x20C0    MOVS	R0, #192
0x12E6	0xF7FFFC97  BL	_ST7735_Write+0
;st7735.c, 104 :: 		ST7735_Write(0xA2, DAT);
0x12EA	0x2101    MOVS	R1, #1
0x12EC	0x20A2    MOVS	R0, #162
0x12EE	0xF7FFFC93  BL	_ST7735_Write+0
;st7735.c, 105 :: 		ST7735_Write(0x02, DAT);
0x12F2	0x2101    MOVS	R1, #1
0x12F4	0x2002    MOVS	R0, #2
0x12F6	0xF7FFFC8F  BL	_ST7735_Write+0
;st7735.c, 106 :: 		ST7735_Write(0x84, DAT);
0x12FA	0x2101    MOVS	R1, #1
0x12FC	0x2084    MOVS	R0, #132
0x12FE	0xF7FFFC8B  BL	_ST7735_Write+0
;st7735.c, 108 :: 		ST7735_Write(ST7735_PWCTR1, CMD);
0x1302	0x2100    MOVS	R1, #0
0x1304	0x20C0    MOVS	R0, #192
0x1306	0xF7FFFC87  BL	_ST7735_Write+0
;st7735.c, 109 :: 		ST7735_Write(0xC5, DAT);
0x130A	0x2101    MOVS	R1, #1
0x130C	0x20C5    MOVS	R0, #197
0x130E	0xF7FFFC83  BL	_ST7735_Write+0
;st7735.c, 111 :: 		ST7735_Write(ST7735_PWCTR2, CMD);
0x1312	0x2100    MOVS	R1, #0
0x1314	0x20C1    MOVS	R0, #193
0x1316	0xF7FFFC7F  BL	_ST7735_Write+0
;st7735.c, 112 :: 		ST7735_Write(0x0A, DAT);
0x131A	0x2101    MOVS	R1, #1
0x131C	0x200A    MOVS	R0, #10
0x131E	0xF7FFFC7B  BL	_ST7735_Write+0
;st7735.c, 113 :: 		ST7735_Write(0x00, DAT);
0x1322	0x2101    MOVS	R1, #1
0x1324	0x2000    MOVS	R0, #0
0x1326	0xF7FFFC77  BL	_ST7735_Write+0
;st7735.c, 115 :: 		ST7735_Write(ST7735_PWCTR3, CMD);
0x132A	0x2100    MOVS	R1, #0
0x132C	0x20C2    MOVS	R0, #194
0x132E	0xF7FFFC73  BL	_ST7735_Write+0
;st7735.c, 116 :: 		ST7735_Write(0x8A, DAT);
0x1332	0x2101    MOVS	R1, #1
0x1334	0x208A    MOVS	R0, #138
0x1336	0xF7FFFC6F  BL	_ST7735_Write+0
;st7735.c, 117 :: 		ST7735_Write(0x2A, DAT);
0x133A	0x2101    MOVS	R1, #1
0x133C	0x202A    MOVS	R0, #42
0x133E	0xF7FFFC6B  BL	_ST7735_Write+0
;st7735.c, 119 :: 		ST7735_Write(ST7735_PWCTR4, CMD);
0x1342	0x2100    MOVS	R1, #0
0x1344	0x20C3    MOVS	R0, #195
0x1346	0xF7FFFC67  BL	_ST7735_Write+0
;st7735.c, 120 :: 		ST7735_Write(0x8A, DAT);
0x134A	0x2101    MOVS	R1, #1
0x134C	0x208A    MOVS	R0, #138
0x134E	0xF7FFFC63  BL	_ST7735_Write+0
;st7735.c, 121 :: 		ST7735_Write(0xEE, DAT);
0x1352	0x2101    MOVS	R1, #1
0x1354	0x20EE    MOVS	R0, #238
0x1356	0xF7FFFC5F  BL	_ST7735_Write+0
;st7735.c, 123 :: 		ST7735_Write(ST7735_PWCTR5, CMD);
0x135A	0x2100    MOVS	R1, #0
0x135C	0x20C4    MOVS	R0, #196
0x135E	0xF7FFFC5B  BL	_ST7735_Write+0
;st7735.c, 124 :: 		ST7735_Write(0x0E, DAT);
0x1362	0x2101    MOVS	R1, #1
0x1364	0x200E    MOVS	R0, #14
0x1366	0xF7FFFC57  BL	_ST7735_Write+0
;st7735.c, 126 :: 		ST7735_Write(ST7735_VMCTR1, CMD);
0x136A	0x2100    MOVS	R1, #0
0x136C	0x20C5    MOVS	R0, #197
0x136E	0xF7FFFC53  BL	_ST7735_Write+0
;st7735.c, 127 :: 		ST7735_Write(0x00, DAT);
0x1372	0x2101    MOVS	R1, #1
0x1374	0x2000    MOVS	R0, #0
0x1376	0xF7FFFC4F  BL	_ST7735_Write+0
;st7735.c, 129 :: 		ST7735_Write(ST7735_COLMOD, CMD);
0x137A	0x2100    MOVS	R1, #0
0x137C	0x203A    MOVS	R0, #58
0x137E	0xF7FFFC4B  BL	_ST7735_Write+0
;st7735.c, 130 :: 		ST7735_Write(0x05, DAT);
0x1382	0x2101    MOVS	R1, #1
0x1384	0x2005    MOVS	R0, #5
0x1386	0xF7FFFC47  BL	_ST7735_Write+0
;st7735.c, 132 :: 		ST7735_Write(ST7735_MADCTL, CMD);
0x138A	0x2100    MOVS	R1, #0
0x138C	0x2036    MOVS	R0, #54
0x138E	0xF7FFFC43  BL	_ST7735_Write+0
;st7735.c, 133 :: 		ST7735_Write(0xC8, DAT);
0x1392	0x2101    MOVS	R1, #1
0x1394	0x20C8    MOVS	R0, #200
0x1396	0xF7FFFC3F  BL	_ST7735_Write+0
;st7735.c, 135 :: 		RAM_Address_Set();
0x139A	0xF7FFFC2F  BL	_RAM_Address_Set+0
;st7735.c, 137 :: 		ST7735_Write(ST7735_GMCTRP1, CMD);
0x139E	0x2100    MOVS	R1, #0
0x13A0	0x20E0    MOVS	R0, #224
0x13A2	0xF7FFFC39  BL	_ST7735_Write+0
;st7735.c, 138 :: 		ST7735_Write(0x02, DAT);
0x13A6	0x2101    MOVS	R1, #1
0x13A8	0x2002    MOVS	R0, #2
0x13AA	0xF7FFFC35  BL	_ST7735_Write+0
;st7735.c, 139 :: 		ST7735_Write(0x1C, DAT);
0x13AE	0x2101    MOVS	R1, #1
0x13B0	0x201C    MOVS	R0, #28
0x13B2	0xF7FFFC31  BL	_ST7735_Write+0
;st7735.c, 140 :: 		ST7735_Write(0x07, DAT);
0x13B6	0x2101    MOVS	R1, #1
0x13B8	0x2007    MOVS	R0, #7
0x13BA	0xF7FFFC2D  BL	_ST7735_Write+0
;st7735.c, 141 :: 		ST7735_Write(0x12, DAT);
0x13BE	0x2101    MOVS	R1, #1
0x13C0	0x2012    MOVS	R0, #18
0x13C2	0xF7FFFC29  BL	_ST7735_Write+0
;st7735.c, 142 :: 		ST7735_Write(0x37, DAT);
0x13C6	0x2101    MOVS	R1, #1
0x13C8	0x2037    MOVS	R0, #55
0x13CA	0xF7FFFC25  BL	_ST7735_Write+0
;st7735.c, 143 :: 		ST7735_Write(0x32, DAT);
0x13CE	0x2101    MOVS	R1, #1
0x13D0	0x2032    MOVS	R0, #50
0x13D2	0xF7FFFC21  BL	_ST7735_Write+0
;st7735.c, 144 :: 		ST7735_Write(0x29, DAT);
0x13D6	0x2101    MOVS	R1, #1
0x13D8	0x2029    MOVS	R0, #41
0x13DA	0xF7FFFC1D  BL	_ST7735_Write+0
;st7735.c, 145 :: 		ST7735_Write(0x2D, DAT);
0x13DE	0x2101    MOVS	R1, #1
0x13E0	0x202D    MOVS	R0, #45
0x13E2	0xF7FFFC19  BL	_ST7735_Write+0
;st7735.c, 146 :: 		ST7735_Write(0x29, DAT);
0x13E6	0x2101    MOVS	R1, #1
0x13E8	0x2029    MOVS	R0, #41
0x13EA	0xF7FFFC15  BL	_ST7735_Write+0
;st7735.c, 147 :: 		ST7735_Write(0x25, DAT);
0x13EE	0x2101    MOVS	R1, #1
0x13F0	0x2025    MOVS	R0, #37
0x13F2	0xF7FFFC11  BL	_ST7735_Write+0
;st7735.c, 148 :: 		ST7735_Write(0x2B, DAT);
0x13F6	0x2101    MOVS	R1, #1
0x13F8	0x202B    MOVS	R0, #43
0x13FA	0xF7FFFC0D  BL	_ST7735_Write+0
;st7735.c, 149 :: 		ST7735_Write(0x39, DAT);
0x13FE	0x2101    MOVS	R1, #1
0x1400	0x2039    MOVS	R0, #57
0x1402	0xF7FFFC09  BL	_ST7735_Write+0
;st7735.c, 150 :: 		ST7735_Write(0x00, DAT);
0x1406	0x2101    MOVS	R1, #1
0x1408	0x2000    MOVS	R0, #0
0x140A	0xF7FFFC05  BL	_ST7735_Write+0
;st7735.c, 151 :: 		ST7735_Write(0x01, DAT);
0x140E	0x2101    MOVS	R1, #1
0x1410	0x2001    MOVS	R0, #1
0x1412	0xF7FFFC01  BL	_ST7735_Write+0
;st7735.c, 152 :: 		ST7735_Write(0x03, DAT);
0x1416	0x2101    MOVS	R1, #1
0x1418	0x2003    MOVS	R0, #3
0x141A	0xF7FFFBFD  BL	_ST7735_Write+0
;st7735.c, 153 :: 		ST7735_Write(0x10, DAT);
0x141E	0x2101    MOVS	R1, #1
0x1420	0x2010    MOVS	R0, #16
0x1422	0xF7FFFBF9  BL	_ST7735_Write+0
;st7735.c, 155 :: 		ST7735_Write(ST7735_GMCTRN1, CMD);
0x1426	0x2100    MOVS	R1, #0
0x1428	0x20E1    MOVS	R0, #225
0x142A	0xF7FFFBF5  BL	_ST7735_Write+0
;st7735.c, 156 :: 		ST7735_Write(0x03, DAT);
0x142E	0x2101    MOVS	R1, #1
0x1430	0x2003    MOVS	R0, #3
0x1432	0xF7FFFBF1  BL	_ST7735_Write+0
;st7735.c, 157 :: 		ST7735_Write(0x1D, DAT);
0x1436	0x2101    MOVS	R1, #1
0x1438	0x201D    MOVS	R0, #29
0x143A	0xF7FFFBED  BL	_ST7735_Write+0
;st7735.c, 158 :: 		ST7735_Write(0x07, DAT);
0x143E	0x2101    MOVS	R1, #1
0x1440	0x2007    MOVS	R0, #7
0x1442	0xF7FFFBE9  BL	_ST7735_Write+0
;st7735.c, 159 :: 		ST7735_Write(0x06, DAT);
0x1446	0x2101    MOVS	R1, #1
0x1448	0x2006    MOVS	R0, #6
0x144A	0xF7FFFBE5  BL	_ST7735_Write+0
;st7735.c, 160 :: 		ST7735_Write(0x2E, DAT);
0x144E	0x2101    MOVS	R1, #1
0x1450	0x202E    MOVS	R0, #46
0x1452	0xF7FFFBE1  BL	_ST7735_Write+0
;st7735.c, 161 :: 		ST7735_Write(0x2C, DAT);
0x1456	0x2101    MOVS	R1, #1
0x1458	0x202C    MOVS	R0, #44
0x145A	0xF7FFFBDD  BL	_ST7735_Write+0
;st7735.c, 162 :: 		ST7735_Write(0x29, DAT);
0x145E	0x2101    MOVS	R1, #1
0x1460	0x2029    MOVS	R0, #41
0x1462	0xF7FFFBD9  BL	_ST7735_Write+0
;st7735.c, 163 :: 		ST7735_Write(0x2D, DAT);
0x1466	0x2101    MOVS	R1, #1
0x1468	0x202D    MOVS	R0, #45
0x146A	0xF7FFFBD5  BL	_ST7735_Write+0
;st7735.c, 164 :: 		ST7735_Write(0x2E, DAT);
0x146E	0x2101    MOVS	R1, #1
0x1470	0x202E    MOVS	R0, #46
0x1472	0xF7FFFBD1  BL	_ST7735_Write+0
;st7735.c, 165 :: 		ST7735_Write(0x2E, DAT);
0x1476	0x2101    MOVS	R1, #1
0x1478	0x202E    MOVS	R0, #46
0x147A	0xF7FFFBCD  BL	_ST7735_Write+0
;st7735.c, 166 :: 		ST7735_Write(0x37, DAT);
0x147E	0x2101    MOVS	R1, #1
0x1480	0x2037    MOVS	R0, #55
0x1482	0xF7FFFBC9  BL	_ST7735_Write+0
;st7735.c, 167 :: 		ST7735_Write(0x3F, DAT);
0x1486	0x2101    MOVS	R1, #1
0x1488	0x203F    MOVS	R0, #63
0x148A	0xF7FFFBC5  BL	_ST7735_Write+0
;st7735.c, 168 :: 		ST7735_Write(0x00, DAT);
0x148E	0x2101    MOVS	R1, #1
0x1490	0x2000    MOVS	R0, #0
0x1492	0xF7FFFBC1  BL	_ST7735_Write+0
;st7735.c, 169 :: 		ST7735_Write(0x00, DAT);
0x1496	0x2101    MOVS	R1, #1
0x1498	0x2000    MOVS	R0, #0
0x149A	0xF7FFFBBD  BL	_ST7735_Write+0
;st7735.c, 170 :: 		ST7735_Write(0x02, DAT);
0x149E	0x2101    MOVS	R1, #1
0x14A0	0x2002    MOVS	R0, #2
0x14A2	0xF7FFFBB9  BL	_ST7735_Write+0
;st7735.c, 171 :: 		ST7735_Write(0x10, DAT);
0x14A6	0x2101    MOVS	R1, #1
0x14A8	0x2010    MOVS	R0, #16
0x14AA	0xF7FFFBB5  BL	_ST7735_Write+0
;st7735.c, 173 :: 		ST7735_Write(ST7735_NORON, CMD);
0x14AE	0x2100    MOVS	R1, #0
0x14B0	0x2013    MOVS	R0, #19
0x14B2	0xF7FFFBB1  BL	_ST7735_Write+0
;st7735.c, 174 :: 		delay_ms(10);
0x14B6	0xF24D47BF  MOVW	R7, #54463
0x14BA	0xF2C00701  MOVT	R7, #1
0x14BE	0xBF00    NOP
0x14C0	0xBF00    NOP
L_ST7735_init77:
0x14C2	0x1E7F    SUBS	R7, R7, #1
0x14C4	0xD1FD    BNE	L_ST7735_init77
0x14C6	0xBF00    NOP
0x14C8	0xBF00    NOP
0x14CA	0xBF00    NOP
;st7735.c, 176 :: 		ST7735_Write(ST7735_DISPON, CMD);
0x14CC	0x2100    MOVS	R1, #0
0x14CE	0x2029    MOVS	R0, #41
0x14D0	0xF7FFFBA2  BL	_ST7735_Write+0
;st7735.c, 177 :: 		delay_ms(100);
0x14D4	0xF644777F  MOVW	R7, #20351
0x14D8	0xF2C00712  MOVT	R7, #18
0x14DC	0xBF00    NOP
0x14DE	0xBF00    NOP
L_ST7735_init79:
0x14E0	0x1E7F    SUBS	R7, R7, #1
0x14E2	0xD1FD    BNE	L_ST7735_init79
0x14E4	0xBF00    NOP
0x14E6	0xBF00    NOP
0x14E8	0xBF00    NOP
;st7735.c, 179 :: 		ST7735_Write(ST7735_RAMWR, CMD);
0x14EA	0x2100    MOVS	R1, #0
0x14EC	0x202C    MOVS	R0, #44
0x14EE	0xF7FFFB93  BL	_ST7735_Write+0
;st7735.c, 180 :: 		delay_ms(100);
0x14F2	0xF644777F  MOVW	R7, #20351
0x14F6	0xF2C00712  MOVT	R7, #18
L_ST7735_init81:
0x14FA	0x1E7F    SUBS	R7, R7, #1
0x14FC	0xD1FD    BNE	L_ST7735_init81
0x14FE	0xBF00    NOP
0x1500	0xBF00    NOP
0x1502	0xBF00    NOP
0x1504	0xBF00    NOP
0x1506	0xBF00    NOP
;st7735.c, 181 :: 		}
L_end_ST7735_init:
0x1508	0xF8DDE000  LDR	LR, [SP, #0]
0x150C	0xB001    ADD	SP, SP, #4
0x150E	0x4770    BX	LR
; end of _ST7735_init
_Configure_GPIOs:
;st7735.c, 4 :: 		void Configure_GPIOs()
;st7735.c, 6 :: 		enable_GPIOB(true);
0x09E8	0x2101    MOVS	R1, #1
0x09EA	0x4836    LDR	R0, [PC, #216]
0x09EC	0x6001    STR	R1, [R0, #0]
;st7735.c, 8 :: 		setup_GPIOB(CS_pin, (output_mode_high_speed | GPIO_PP_output));
0x09EE	0x4836    LDR	R0, [PC, #216]
0x09F0	0x6801    LDR	R1, [R0, #0]
0x09F2	0xF06F000F  MVN	R0, #15
0x09F6	0x4001    ANDS	R1, R0
0x09F8	0x4833    LDR	R0, [PC, #204]
0x09FA	0x6001    STR	R1, [R0, #0]
0x09FC	0x4832    LDR	R0, [PC, #200]
0x09FE	0x6800    LDR	R0, [R0, #0]
0x0A00	0xF0400103  ORR	R1, R0, #3
0x0A04	0x4830    LDR	R0, [PC, #192]
0x0A06	0x6001    STR	R1, [R0, #0]
L_Configure_GPIOs9:
;st7735.c, 9 :: 		setup_GPIOB(RST_pin, (output_mode_high_speed | GPIO_PP_output));
0x0A08	0x482F    LDR	R0, [PC, #188]
0x0A0A	0x6800    LDR	R0, [R0, #0]
0x0A0C	0xF000010F  AND	R1, R0, #15
0x0A10	0x482D    LDR	R0, [PC, #180]
0x0A12	0x6001    STR	R1, [R0, #0]
0x0A14	0x482C    LDR	R0, [PC, #176]
0x0A16	0x6800    LDR	R0, [R0, #0]
0x0A18	0xF0400130  ORR	R1, R0, #48
0x0A1C	0x482A    LDR	R0, [PC, #168]
0x0A1E	0x6001    STR	R1, [R0, #0]
L_Configure_GPIOs22:
;st7735.c, 10 :: 		setup_GPIOB(RS_pin, (output_mode_high_speed | GPIO_PP_output));
0x0A20	0x4829    LDR	R0, [PC, #164]
0x0A22	0x6801    LDR	R1, [R0, #0]
0x0A24	0xF46F6070  MVN	R0, #3840
0x0A28	0x4001    ANDS	R1, R0
0x0A2A	0x4827    LDR	R0, [PC, #156]
0x0A2C	0x6001    STR	R1, [R0, #0]
0x0A2E	0x4826    LDR	R0, [PC, #152]
0x0A30	0x6800    LDR	R0, [R0, #0]
0x0A32	0xF4407140  ORR	R1, R0, #768
0x0A36	0x4824    LDR	R0, [PC, #144]
0x0A38	0x6001    STR	R1, [R0, #0]
L_Configure_GPIOs35:
;st7735.c, 11 :: 		setup_GPIOB(SDA_pin, (output_mode_high_speed | GPIO_PP_output));
L_Configure_GPIOs42:
0x0A3A	0x4824    LDR	R0, [PC, #144]
0x0A3C	0x6801    LDR	R1, [R0, #0]
0x0A3E	0xF46F6070  MVN	R0, #3840
0x0A42	0x4001    ANDS	R1, R0
0x0A44	0x4821    LDR	R0, [PC, #132]
0x0A46	0x6001    STR	R1, [R0, #0]
0x0A48	0x4820    LDR	R0, [PC, #128]
0x0A4A	0x6800    LDR	R0, [R0, #0]
0x0A4C	0xF4407140  ORR	R1, R0, #768
0x0A50	0x481E    LDR	R0, [PC, #120]
0x0A52	0x6001    STR	R1, [R0, #0]
;st7735.c, 12 :: 		setup_GPIOB(SCK_pin, (output_mode_high_speed | GPIO_PP_output));
L_Configure_GPIOs53:
0x0A54	0x481D    LDR	R0, [PC, #116]
0x0A56	0x6801    LDR	R1, [R0, #0]
0x0A58	0xF46F2070  MVN	R0, #983040
0x0A5C	0x4001    ANDS	R1, R0
0x0A5E	0x481B    LDR	R0, [PC, #108]
0x0A60	0x6001    STR	R1, [R0, #0]
0x0A62	0x481A    LDR	R0, [PC, #104]
0x0A64	0x6800    LDR	R0, [R0, #0]
0x0A66	0xF4403140  ORR	R1, R0, #196608
0x0A6A	0x4818    LDR	R0, [PC, #96]
0x0A6C	0x6001    STR	R1, [R0, #0]
;st7735.c, 14 :: 		GPIOB_pin_low(CS_pin);
0x0A6E	0x4818    LDR	R0, [PC, #96]
0x0A70	0x6800    LDR	R0, [R0, #0]
0x0A72	0xF0400101  ORR	R1, R0, #1
0x0A76	0x4816    LDR	R0, [PC, #88]
0x0A78	0x6001    STR	R1, [R0, #0]
;st7735.c, 15 :: 		GPIOB_pin_low(RST_pin);
0x0A7A	0x4815    LDR	R0, [PC, #84]
0x0A7C	0x6800    LDR	R0, [R0, #0]
0x0A7E	0xF0400102  ORR	R1, R0, #2
0x0A82	0x4813    LDR	R0, [PC, #76]
0x0A84	0x6001    STR	R1, [R0, #0]
;st7735.c, 16 :: 		GPIOB_pin_low(RS_pin);
0x0A86	0x4812    LDR	R0, [PC, #72]
0x0A88	0x6800    LDR	R0, [R0, #0]
0x0A8A	0xF0400104  ORR	R1, R0, #4
0x0A8E	0x4810    LDR	R0, [PC, #64]
0x0A90	0x6001    STR	R1, [R0, #0]
;st7735.c, 17 :: 		GPIOB_pin_low(SDA_pin);
0x0A92	0x480F    LDR	R0, [PC, #60]
0x0A94	0x6800    LDR	R0, [R0, #0]
0x0A96	0xF4406180  ORR	R1, R0, #1024
0x0A9A	0x480D    LDR	R0, [PC, #52]
0x0A9C	0x6001    STR	R1, [R0, #0]
;st7735.c, 18 :: 		GPIOB_pin_low(SCK_pin);
0x0A9E	0x480C    LDR	R0, [PC, #48]
0x0AA0	0x6800    LDR	R0, [R0, #0]
0x0AA2	0xF4405180  ORR	R1, R0, #4096
0x0AA6	0x480A    LDR	R0, [PC, #40]
0x0AA8	0x6001    STR	R1, [R0, #0]
;st7735.c, 20 :: 		delay_ms(100);
0x0AAA	0xF644777F  MOVW	R7, #20351
0x0AAE	0xF2C00712  MOVT	R7, #18
L_Configure_GPIOs61:
0x0AB2	0x1E7F    SUBS	R7, R7, #1
0x0AB4	0xD1FD    BNE	L_Configure_GPIOs61
0x0AB6	0xBF00    NOP
0x0AB8	0xBF00    NOP
0x0ABA	0xBF00    NOP
0x0ABC	0xBF00    NOP
0x0ABE	0xBF00    NOP
;st7735.c, 21 :: 		}
L_end_Configure_GPIOs:
0x0AC0	0x4770    BX	LR
0x0AC2	0xBF00    NOP
0x0AC4	0x030C4242  	RCC_APB2ENRbits+0
0x0AC8	0x0C004001  	GPIOB_CRL+0
0x0ACC	0x0C044001  	GPIOB_CRH+0
0x0AD0	0x0C144001  	GPIOB_BRR+0
; end of _Configure_GPIOs
_ST7735_Reset:
;st7735.c, 62 :: 		void ST7735_Reset()
;st7735.c, 64 :: 		GPIOB_pin_low(RST_pin);
0x0998	0x4811    LDR	R0, [PC, #68]
0x099A	0x6800    LDR	R0, [R0, #0]
0x099C	0xF0400102  ORR	R1, R0, #2
0x09A0	0x480F    LDR	R0, [PC, #60]
0x09A2	0x6001    STR	R1, [R0, #0]
;st7735.c, 65 :: 		delay_ms(2);
0x09A4	0xF64557BF  MOVW	R7, #23999
0x09A8	0xF2C00700  MOVT	R7, #0
0x09AC	0xBF00    NOP
0x09AE	0xBF00    NOP
L_ST7735_Reset69:
0x09B0	0x1E7F    SUBS	R7, R7, #1
0x09B2	0xD1FD    BNE	L_ST7735_Reset69
0x09B4	0xBF00    NOP
0x09B6	0xBF00    NOP
0x09B8	0xBF00    NOP
;st7735.c, 66 :: 		GPIOB_pin_high(RST_pin);
0x09BA	0x480A    LDR	R0, [PC, #40]
0x09BC	0x6800    LDR	R0, [R0, #0]
0x09BE	0xF0400102  ORR	R1, R0, #2
0x09C2	0x4808    LDR	R0, [PC, #32]
0x09C4	0x6001    STR	R1, [R0, #0]
;st7735.c, 67 :: 		delay_ms(2);
0x09C6	0xF64557BF  MOVW	R7, #23999
0x09CA	0xF2C00700  MOVT	R7, #0
0x09CE	0xBF00    NOP
0x09D0	0xBF00    NOP
L_ST7735_Reset71:
0x09D2	0x1E7F    SUBS	R7, R7, #1
0x09D4	0xD1FD    BNE	L_ST7735_Reset71
0x09D6	0xBF00    NOP
0x09D8	0xBF00    NOP
0x09DA	0xBF00    NOP
;st7735.c, 68 :: 		}
L_end_ST7735_Reset:
0x09DC	0x4770    BX	LR
0x09DE	0xBF00    NOP
0x09E0	0x0C144001  	GPIOB_BRR+0
0x09E4	0x0C104001  	GPIOB_BSRR+0
; end of _ST7735_Reset
_ST7735_Write:
;st7735.c, 24 :: 		void ST7735_Write(unsigned char value, unsigned char mode)
; mode start address is: 4 (R1)
; value start address is: 0 (R0)
; mode end address is: 4 (R1)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
; mode start address is: 4 (R1)
;st7735.c, 26 :: 		unsigned char i = 0x08;
; i start address is: 16 (R4)
0x0C18	0x2408    MOVS	R4, #8
;st7735.c, 28 :: 		GPIOB_pin_low(CS_pin);
0x0C1A	0x4A20    LDR	R2, [PC, #128]
0x0C1C	0x6812    LDR	R2, [R2, #0]
0x0C1E	0xF0420301  ORR	R3, R2, #1
0x0C22	0x4A1E    LDR	R2, [PC, #120]
0x0C24	0x6013    STR	R3, [R2, #0]
;st7735.c, 30 :: 		if(mode)
0x0C26	0xB131    CBZ	R1, L_ST7735_Write63
; mode end address is: 4 (R1)
;st7735.c, 32 :: 		GPIOB_pin_high(RS_pin);
0x0C28	0x4A1D    LDR	R2, [PC, #116]
0x0C2A	0x6812    LDR	R2, [R2, #0]
0x0C2C	0xF0420304  ORR	R3, R2, #4
0x0C30	0x4A1B    LDR	R2, [PC, #108]
0x0C32	0x6013    STR	R3, [R2, #0]
;st7735.c, 33 :: 		}
0x0C34	0xE005    B	L_ST7735_Write64
L_ST7735_Write63:
;st7735.c, 36 :: 		GPIOB_pin_low(RS_pin);
0x0C36	0x4A19    LDR	R2, [PC, #100]
0x0C38	0x6812    LDR	R2, [R2, #0]
0x0C3A	0xF0420304  ORR	R3, R2, #4
0x0C3E	0x4A17    LDR	R2, [PC, #92]
0x0C40	0x6013    STR	R3, [R2, #0]
;st7735.c, 37 :: 		}
L_ST7735_Write64:
;st7735.c, 39 :: 		while(i > 0)
0x0C42	0xB2C1    UXTB	R1, R0
; i end address is: 16 (R4)
0x0C44	0xB2E0    UXTB	R0, R4
L_ST7735_Write65:
; value end address is: 0 (R0)
; i start address is: 0 (R0)
; value start address is: 4 (R1)
0x0C46	0x2800    CMP	R0, #0
0x0C48	0xD921    BLS	L_ST7735_Write66
;st7735.c, 41 :: 		GPIOB_pin_low(SCK_pin);
0x0C4A	0x4A14    LDR	R2, [PC, #80]
0x0C4C	0x6812    LDR	R2, [R2, #0]
0x0C4E	0xF4425380  ORR	R3, R2, #4096
0x0C52	0x4A12    LDR	R2, [PC, #72]
0x0C54	0x6013    STR	R3, [R2, #0]
;st7735.c, 43 :: 		if((value & 0x80) != 0)
0x0C56	0xF0010280  AND	R2, R1, #128
0x0C5A	0xB2D2    UXTB	R2, R2
0x0C5C	0xB132    CBZ	R2, L_ST7735_Write67
;st7735.c, 45 :: 		GPIOB_pin_high(SDA_pin);
0x0C5E	0x4A10    LDR	R2, [PC, #64]
0x0C60	0x6812    LDR	R2, [R2, #0]
0x0C62	0xF4426380  ORR	R3, R2, #1024
0x0C66	0x4A0E    LDR	R2, [PC, #56]
0x0C68	0x6013    STR	R3, [R2, #0]
;st7735.c, 46 :: 		}
0x0C6A	0xE005    B	L_ST7735_Write68
L_ST7735_Write67:
;st7735.c, 49 :: 		GPIOB_pin_low(SDA_pin);
0x0C6C	0x4A0B    LDR	R2, [PC, #44]
0x0C6E	0x6812    LDR	R2, [R2, #0]
0x0C70	0xF4426380  ORR	R3, R2, #1024
0x0C74	0x4A09    LDR	R2, [PC, #36]
0x0C76	0x6013    STR	R3, [R2, #0]
;st7735.c, 50 :: 		}
L_ST7735_Write68:
;st7735.c, 52 :: 		GPIOB_pin_high(SCK_pin);
0x0C78	0x4A09    LDR	R2, [PC, #36]
0x0C7A	0x6812    LDR	R2, [R2, #0]
0x0C7C	0xF4425380  ORR	R3, R2, #4096
0x0C80	0x4A07    LDR	R2, [PC, #28]
0x0C82	0x6013    STR	R3, [R2, #0]
;st7735.c, 54 :: 		value <<= 1;
0x0C84	0x004A    LSLS	R2, R1, #1
0x0C86	0xB2D1    UXTB	R1, R2
;st7735.c, 55 :: 		i--;
0x0C88	0x1E40    SUBS	R0, R0, #1
0x0C8A	0xB2C0    UXTB	R0, R0
;st7735.c, 56 :: 		};
; value end address is: 4 (R1)
; i end address is: 0 (R0)
0x0C8C	0xE7DB    B	L_ST7735_Write65
L_ST7735_Write66:
;st7735.c, 58 :: 		GPIOB_pin_high(CS_pin);
0x0C8E	0x4A04    LDR	R2, [PC, #16]
0x0C90	0x6812    LDR	R2, [R2, #0]
0x0C92	0xF0420301  ORR	R3, R2, #1
0x0C96	0x4A02    LDR	R2, [PC, #8]
0x0C98	0x6013    STR	R3, [R2, #0]
;st7735.c, 59 :: 		}
L_end_ST7735_Write:
0x0C9A	0x4770    BX	LR
0x0C9C	0x0C144001  	GPIOB_BRR+0
0x0CA0	0x0C104001  	GPIOB_BSRR+0
; end of _ST7735_Write
_RAM_Address_Set:
;st7735.c, 224 :: 		void RAM_Address_Set()
0x0BFC	0xB081    SUB	SP, SP, #4
0x0BFE	0xF8CDE000  STR	LR, [SP, #0]
;st7735.c, 226 :: 		Set_Addr_Window(0x00, 0x00, 0x7F, 0x9F);
0x0C02	0x239F    MOVS	R3, #159
0x0C04	0x227F    MOVS	R2, #127
0x0C06	0x2100    MOVS	R1, #0
0x0C08	0x2000    MOVS	R0, #0
0x0C0A	0xF7FFFAA5  BL	_Set_Addr_Window+0
;st7735.c, 227 :: 		}
L_end_RAM_Address_Set:
0x0C0E	0xF8DDE000  LDR	LR, [SP, #0]
0x0C12	0xB001    ADD	SP, SP, #4
0x0C14	0x4770    BX	LR
; end of _RAM_Address_Set
_Set_Addr_Window:
;st7735.c, 206 :: 		void Set_Addr_Window(unsigned char xs, unsigned char ys, unsigned char xe, unsigned char ye)
; ye start address is: 12 (R3)
; xe start address is: 8 (R2)
; ys start address is: 4 (R1)
; xs start address is: 0 (R0)
0x0158	0xB081    SUB	SP, SP, #4
0x015A	0xF8CDE000  STR	LR, [SP, #0]
0x015E	0xB2C5    UXTB	R5, R0
0x0160	0xB2CE    UXTB	R6, R1
0x0162	0xB2D7    UXTB	R7, R2
0x0164	0xFA5FF883  UXTB	R8, R3
; ye end address is: 12 (R3)
; xe end address is: 8 (R2)
; ys end address is: 4 (R1)
; xs end address is: 0 (R0)
; xs start address is: 20 (R5)
; ys start address is: 24 (R6)
; xe start address is: 28 (R7)
; ye start address is: 32 (R8)
;st7735.c, 208 :: 		ST7735_Write(ST7735_CASET, CMD);
0x0168	0x2100    MOVS	R1, #0
0x016A	0x202A    MOVS	R0, #42
0x016C	0xF000FD54  BL	_ST7735_Write+0
;st7735.c, 209 :: 		ST7735_Write(0x00, DAT);
0x0170	0x2101    MOVS	R1, #1
0x0172	0x2000    MOVS	R0, #0
0x0174	0xF000FD50  BL	_ST7735_Write+0
;st7735.c, 210 :: 		ST7735_Write(xs, DAT);
0x0178	0x2101    MOVS	R1, #1
0x017A	0xB2E8    UXTB	R0, R5
; xs end address is: 20 (R5)
0x017C	0xF000FD4C  BL	_ST7735_Write+0
;st7735.c, 211 :: 		ST7735_Write(0x00, DAT);
0x0180	0x2101    MOVS	R1, #1
0x0182	0x2000    MOVS	R0, #0
0x0184	0xF000FD48  BL	_ST7735_Write+0
;st7735.c, 212 :: 		ST7735_Write(xe, DAT);
0x0188	0x2101    MOVS	R1, #1
0x018A	0xB2F8    UXTB	R0, R7
; xe end address is: 28 (R7)
0x018C	0xF000FD44  BL	_ST7735_Write+0
;st7735.c, 214 :: 		ST7735_Write(ST7735_RASET, CMD);
0x0190	0x2100    MOVS	R1, #0
0x0192	0x202B    MOVS	R0, #43
0x0194	0xF000FD40  BL	_ST7735_Write+0
;st7735.c, 215 :: 		ST7735_Write(0x00, DAT);
0x0198	0x2101    MOVS	R1, #1
0x019A	0x2000    MOVS	R0, #0
0x019C	0xF000FD3C  BL	_ST7735_Write+0
;st7735.c, 216 :: 		ST7735_Write(ys, DAT);
0x01A0	0x2101    MOVS	R1, #1
0x01A2	0xB2F0    UXTB	R0, R6
; ys end address is: 24 (R6)
0x01A4	0xF000FD38  BL	_ST7735_Write+0
;st7735.c, 217 :: 		ST7735_Write(0x00, DAT);
0x01A8	0x2101    MOVS	R1, #1
0x01AA	0x2000    MOVS	R0, #0
0x01AC	0xF000FD34  BL	_ST7735_Write+0
;st7735.c, 218 :: 		ST7735_Write(ye, DAT);
0x01B0	0x2101    MOVS	R1, #1
0x01B2	0xFA5FF088  UXTB	R0, R8
; ye end address is: 32 (R8)
0x01B6	0xF000FD2F  BL	_ST7735_Write+0
;st7735.c, 220 :: 		ST7735_Write(ST7735_RAMWR, CMD);
0x01BA	0x2100    MOVS	R1, #0
0x01BC	0x202C    MOVS	R0, #44
0x01BE	0xF000FD2B  BL	_ST7735_Write+0
;st7735.c, 221 :: 		}
L_end_Set_Addr_Window:
0x01C2	0xF8DDE000  LDR	LR, [SP, #0]
0x01C6	0xB001    ADD	SP, SP, #4
0x01C8	0x4770    BX	LR
; end of _Set_Addr_Window
_Set_Rotation:
;st7735.c, 255 :: 		void Set_Rotation(unsigned char m)
; m start address is: 0 (R0)
0x1510	0xB081    SUB	SP, SP, #4
0x1512	0xF8CDE000  STR	LR, [SP, #0]
0x1516	0xB2C5    UXTB	R5, R0
; m end address is: 0 (R0)
; m start address is: 20 (R5)
;st7735.c, 257 :: 		unsigned char rotation = 0x00;
;st7735.c, 259 :: 		ST7735_Write(ST7735_MADCTL, CMD);
0x1518	0x2100    MOVS	R1, #0
0x151A	0x2036    MOVS	R0, #54
0x151C	0xF7FFFB7C  BL	_ST7735_Write+0
;st7735.c, 260 :: 		rotation = (m % 4);
0x1520	0xF0050103  AND	R1, R5, #3
; m end address is: 20 (R5)
; rotation start address is: 0 (R0)
0x1524	0xB2C8    UXTB	R0, R1
;st7735.c, 262 :: 		switch(rotation)
0x1526	0xE02B    B	L_Set_Rotation85
; rotation end address is: 0 (R0)
;st7735.c, 264 :: 		case 0:
L_Set_Rotation87:
;st7735.c, 266 :: 		ST7735_Write((MADCTL_MX | MADCTL_MY | MADCTL_RGB), DAT);
0x1528	0x2101    MOVS	R1, #1
0x152A	0x20C8    MOVS	R0, #200
0x152C	0xF7FFFB74  BL	_ST7735_Write+0
;st7735.c, 267 :: 		w = ST7735_TFTWIDTH;
0x1530	0x2280    MOVS	R2, #128
0x1532	0x4919    LDR	R1, [PC, #100]
0x1534	0x700A    STRB	R2, [R1, #0]
;st7735.c, 268 :: 		l = ST7735_TFTLENGTH;
0x1536	0x22A0    MOVS	R2, #160
0x1538	0x4918    LDR	R1, [PC, #96]
0x153A	0x700A    STRB	R2, [R1, #0]
;st7735.c, 269 :: 		break;
0x153C	0xE028    B	L_Set_Rotation86
;st7735.c, 271 :: 		case 1:
L_Set_Rotation88:
;st7735.c, 273 :: 		ST7735_Write((MADCTL_MY | MADCTL_MV | MADCTL_RGB), DAT);
0x153E	0x2101    MOVS	R1, #1
0x1540	0x20A8    MOVS	R0, #168
0x1542	0xF7FFFB69  BL	_ST7735_Write+0
;st7735.c, 274 :: 		w = ST7735_TFTLENGTH;
0x1546	0x22A0    MOVS	R2, #160
0x1548	0x4913    LDR	R1, [PC, #76]
0x154A	0x700A    STRB	R2, [R1, #0]
;st7735.c, 275 :: 		l = ST7735_TFTWIDTH;
0x154C	0x2280    MOVS	R2, #128
0x154E	0x4913    LDR	R1, [PC, #76]
0x1550	0x700A    STRB	R2, [R1, #0]
;st7735.c, 276 :: 		break;
0x1552	0xE01D    B	L_Set_Rotation86
;st7735.c, 278 :: 		case 2:
L_Set_Rotation89:
;st7735.c, 280 :: 		ST7735_Write((MADCTL_RGB), DAT);
0x1554	0x2101    MOVS	R1, #1
0x1556	0x2008    MOVS	R0, #8
0x1558	0xF7FFFB5E  BL	_ST7735_Write+0
;st7735.c, 281 :: 		w = ST7735_TFTWIDTH;
0x155C	0x2280    MOVS	R2, #128
0x155E	0x490E    LDR	R1, [PC, #56]
0x1560	0x700A    STRB	R2, [R1, #0]
;st7735.c, 282 :: 		l = ST7735_TFTLENGTH;
0x1562	0x22A0    MOVS	R2, #160
0x1564	0x490D    LDR	R1, [PC, #52]
0x1566	0x700A    STRB	R2, [R1, #0]
;st7735.c, 283 :: 		break;
0x1568	0xE012    B	L_Set_Rotation86
;st7735.c, 285 :: 		case 3:
L_Set_Rotation90:
;st7735.c, 287 :: 		ST7735_Write((MADCTL_MX | MADCTL_MV | MADCTL_RGB), DAT);
0x156A	0x2101    MOVS	R1, #1
0x156C	0x2068    MOVS	R0, #104
0x156E	0xF7FFFB53  BL	_ST7735_Write+0
;st7735.c, 288 :: 		w = ST7735_TFTLENGTH;
0x1572	0x22A0    MOVS	R2, #160
0x1574	0x4908    LDR	R1, [PC, #32]
0x1576	0x700A    STRB	R2, [R1, #0]
;st7735.c, 289 :: 		l = ST7735_TFTWIDTH;
0x1578	0x2280    MOVS	R2, #128
0x157A	0x4908    LDR	R1, [PC, #32]
0x157C	0x700A    STRB	R2, [R1, #0]
;st7735.c, 290 :: 		break;
0x157E	0xE007    B	L_Set_Rotation86
;st7735.c, 292 :: 		}
L_Set_Rotation85:
; rotation start address is: 0 (R0)
0x1580	0x2800    CMP	R0, #0
0x1582	0xD0D1    BEQ	L_Set_Rotation87
0x1584	0x2801    CMP	R0, #1
0x1586	0xD0DA    BEQ	L_Set_Rotation88
0x1588	0x2802    CMP	R0, #2
0x158A	0xD0E3    BEQ	L_Set_Rotation89
0x158C	0x2803    CMP	R0, #3
0x158E	0xD0EC    BEQ	L_Set_Rotation90
; rotation end address is: 0 (R0)
L_Set_Rotation86:
;st7735.c, 293 :: 		}
L_end_Set_Rotation:
0x1590	0xF8DDE000  LDR	LR, [SP, #0]
0x1594	0xB001    ADD	SP, SP, #4
0x1596	0x4770    BX	LR
0x1598	0x00002000  	_w+0
0x159C	0x00222000  	_l+0
; end of _Set_Rotation
_Swap_Colour:
;st7735.c, 243 :: 		unsigned int Swap_Colour(unsigned int colour)
; colour start address is: 0 (R0)
; colour end address is: 0 (R0)
; colour start address is: 0 (R0)
;st7735.c, 245 :: 		return ((colour << 0x000B) | (colour & 0x07E0) | (colour >> 0x000B));
0x15F0	0x02C2    LSLS	R2, R0, #11
0x15F2	0xB292    UXTH	R2, R2
0x15F4	0xF40061FC  AND	R1, R0, #2016
0x15F8	0xB289    UXTH	R1, R1
0x15FA	0x430A    ORRS	R2, R1
0x15FC	0xB292    UXTH	R2, R2
0x15FE	0x0AC1    LSRS	R1, R0, #11
0x1600	0xB289    UXTH	R1, R1
; colour end address is: 0 (R0)
0x1602	0xEA420101  ORR	R1, R2, R1, LSL #0
0x1606	0xB288    UXTH	R0, R1
;st7735.c, 246 :: 		}
L_end_Swap_Colour:
0x1608	0x4770    BX	LR
; end of _Swap_Colour
_TFT_fill:
;st7735.c, 296 :: 		void TFT_fill(unsigned int colour)
; colour start address is: 0 (R0)
0x1810	0xB081    SUB	SP, SP, #4
0x1812	0xF8CDE000  STR	LR, [SP, #0]
0x1816	0xFA1FF980  UXTH	R9, R0
; colour end address is: 0 (R0)
; colour start address is: 36 (R9)
;st7735.c, 298 :: 		unsigned char i = 0x00;
;st7735.c, 299 :: 		unsigned char j = 0x00;
;st7735.c, 301 :: 		Set_Addr_Window(0, 0, (w - 1), (l - 1));
0x181A	0x4914    LDR	R1, [PC, #80]
0x181C	0x7809    LDRB	R1, [R1, #0]
0x181E	0x1E4A    SUBS	R2, R1, #1
0x1820	0x4913    LDR	R1, [PC, #76]
0x1822	0x7809    LDRB	R1, [R1, #0]
0x1824	0x1E49    SUBS	R1, R1, #1
0x1826	0xB2D3    UXTB	R3, R2
0x1828	0xB2CA    UXTB	R2, R1
0x182A	0x2100    MOVS	R1, #0
0x182C	0x2000    MOVS	R0, #0
0x182E	0xF7FEFC93  BL	_Set_Addr_Window+0
;st7735.c, 303 :: 		for(j = l; j > 0; j--)
0x1832	0x490E    LDR	R1, [PC, #56]
; j start address is: 28 (R7)
0x1834	0x780F    LDRB	R7, [R1, #0]
; colour end address is: 36 (R9)
; j end address is: 28 (R7)
0x1836	0xFA1FF689  UXTH	R6, R9
L_TFT_fill91:
; j start address is: 28 (R7)
; colour start address is: 24 (R6)
0x183A	0x2F00    CMP	R7, #0
0x183C	0xD911    BLS	L_TFT_fill92
;st7735.c, 305 :: 		for(i = w; i > 0; i--)
0x183E	0x490C    LDR	R1, [PC, #48]
; i start address is: 0 (R0)
0x1840	0x7808    LDRB	R0, [R1, #0]
; i end address is: 0 (R0)
; colour end address is: 24 (R6)
; j end address is: 28 (R7)
0x1842	0xFA5FF880  UXTB	R8, R0
L_TFT_fill94:
; i start address is: 32 (R8)
; colour start address is: 24 (R6)
; j start address is: 28 (R7)
0x1846	0xF1B80F00  CMP	R8, #0
0x184A	0xD907    BLS	L_TFT_fill95
;st7735.c, 307 :: 		ST7735_Word_Write(colour);
0x184C	0xB2B0    UXTH	R0, R6
0x184E	0xF7FEFD05  BL	_ST7735_Word_Write+0
;st7735.c, 305 :: 		for(i = w; i > 0; i--)
0x1852	0xF1A80801  SUB	R8, R8, #1
0x1856	0xFA5FF888  UXTB	R8, R8
;st7735.c, 308 :: 		}
; i end address is: 32 (R8)
0x185A	0xE7F4    B	L_TFT_fill94
L_TFT_fill95:
;st7735.c, 303 :: 		for(j = l; j > 0; j--)
0x185C	0x1E7F    SUBS	R7, R7, #1
0x185E	0xB2FF    UXTB	R7, R7
;st7735.c, 309 :: 		}
; colour end address is: 24 (R6)
; j end address is: 28 (R7)
0x1860	0xE7EB    B	L_TFT_fill91
L_TFT_fill92:
;st7735.c, 310 :: 		}
L_end_TFT_fill:
0x1862	0xF8DDE000  LDR	LR, [SP, #0]
0x1866	0xB001    ADD	SP, SP, #4
0x1868	0x4770    BX	LR
0x186A	0xBF00    NOP
0x186C	0x00222000  	_l+0
0x1870	0x00002000  	_w+0
; end of _TFT_fill
_ST7735_Word_Write:
;st7735.c, 184 :: 		void ST7735_Word_Write(unsigned int value)
; value start address is: 0 (R0)
0x025C	0xB081    SUB	SP, SP, #4
0x025E	0xF8CDE000  STR	LR, [SP, #0]
0x0262	0xB285    UXTH	R5, R0
; value end address is: 0 (R0)
; value start address is: 20 (R5)
;st7735.c, 186 :: 		ST7735_Write(((value & 0xFF00) >> 0x08), DAT);
0x0264	0xF405417F  AND	R1, R5, #65280
0x0268	0xB289    UXTH	R1, R1
0x026A	0x0A09    LSRS	R1, R1, #8
0x026C	0xB2C8    UXTB	R0, R1
0x026E	0x2101    MOVS	R1, #1
0x0270	0xF000FCD2  BL	_ST7735_Write+0
;st7735.c, 187 :: 		ST7735_Write((value & 0x00FF), DAT);
0x0274	0xF00501FF  AND	R1, R5, #255
; value end address is: 20 (R5)
0x0278	0xB2C8    UXTB	R0, R1
0x027A	0x2101    MOVS	R1, #1
0x027C	0xF000FCCC  BL	_ST7735_Write+0
;st7735.c, 188 :: 		}
L_end_ST7735_Word_Write:
0x0280	0xF8DDE000  LDR	LR, [SP, #0]
0x0284	0xB001    ADD	SP, SP, #4
0x0286	0x4770    BX	LR
; end of _ST7735_Word_Write
_Draw_Circle:
;st7735.c, 450 :: 		void Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned int colour)
; radius start address is: 8 (R2)
0x1874	0xB086    SUB	SP, SP, #24
0x1876	0xF8CDE000  STR	LR, [SP, #0]
0x187A	0xF8AD000C  STRH	R0, [SP, #12]
0x187E	0xB210    SXTH	R0, R2
0x1880	0xF8AD1010  STRH	R1, [SP, #16]
0x1884	0xF88D3014  STRB	R3, [SP, #20]
; radius end address is: 8 (R2)
; radius start address is: 0 (R0)
0x1888	0xF8BD4018  LDRH	R4, [SP, #24]
0x188C	0xF8AD4018  STRH	R4, [SP, #24]
;st7735.c, 452 :: 		signed int a = 0x0000;
; a start address is: 40 (R10)
0x1890	0xF2400A00  MOVW	R10, #0
0x1894	0xFA0FFA8A  SXTH	R10, R10
;st7735.c, 453 :: 		signed int b = 0x0000;
;st7735.c, 454 :: 		signed int p = 0x0000;
;st7735.c, 456 :: 		b = radius;
0x1898	0xF8AD0008  STRH	R0, [SP, #8]
;st7735.c, 457 :: 		p = (1 - b);
0x189C	0xF1C00401  RSB	R4, R0, #1
; radius end address is: 0 (R0)
0x18A0	0xF8AD400A  STRH	R4, [SP, #10]
; a end address is: 40 (R10)
0x18A4	0xFA0FF08A  SXTH	R0, R10
;st7735.c, 459 :: 		do
0x18A8	0xE001    B	L_Draw_Circle122
L__Draw_Circle217:
;st7735.c, 488 :: 		}while(a <= b);
0x18AA	0xFA0FF08A  SXTH	R0, R10
;st7735.c, 459 :: 		do
L_Draw_Circle122:
;st7735.c, 461 :: 		if(fill != NO)
; a start address is: 0 (R0)
0x18AE	0xF89D4014  LDRB	R4, [SP, #20]
0x18B2	0x2C00    CMP	R4, #0
0x18B4	0xD06A    BEQ	L_Draw_Circle125
;st7735.c, 463 :: 		Draw_Line((xc - a), (yc + b), (xc + a), (yc + b), colour);
0x18B6	0xF8BD7018  LDRH	R7, [SP, #24]
0x18BA	0xF9BD5008  LDRSH	R5, [SP, #8]
0x18BE	0xF9BD4010  LDRSH	R4, [SP, #16]
0x18C2	0x1966    ADDS	R6, R4, R5
0x18C4	0xF9BD400C  LDRSH	R4, [SP, #12]
0x18C8	0x1825    ADDS	R5, R4, R0
0x18CA	0xF9BD400C  LDRSH	R4, [SP, #12]
0x18CE	0x1A24    SUB	R4, R4, R0
0x18D0	0xF8AD0004  STRH	R0, [SP, #4]
0x18D4	0xB233    SXTH	R3, R6
0x18D6	0xB22A    SXTH	R2, R5
0x18D8	0xB231    SXTH	R1, R6
0x18DA	0xB220    SXTH	R0, R4
0x18DC	0xB480    PUSH	(R7)
0x18DE	0xF7FEFEB5  BL	_Draw_Line+0
0x18E2	0xB001    ADD	SP, SP, #4
0x18E4	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 464 :: 		Draw_Line((xc - a), (yc - b), (xc + a), (yc - b), colour);
0x18E8	0xF8BD7018  LDRH	R7, [SP, #24]
0x18EC	0xF9BD5008  LDRSH	R5, [SP, #8]
0x18F0	0xF9BD4010  LDRSH	R4, [SP, #16]
0x18F4	0x1B66    SUB	R6, R4, R5
0x18F6	0xF9BD400C  LDRSH	R4, [SP, #12]
0x18FA	0x1825    ADDS	R5, R4, R0
0x18FC	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1900	0x1A24    SUB	R4, R4, R0
0x1902	0xF8AD0004  STRH	R0, [SP, #4]
0x1906	0xB233    SXTH	R3, R6
0x1908	0xB22A    SXTH	R2, R5
0x190A	0xB231    SXTH	R1, R6
0x190C	0xB220    SXTH	R0, R4
0x190E	0xB480    PUSH	(R7)
0x1910	0xF7FEFE9C  BL	_Draw_Line+0
0x1914	0xB001    ADD	SP, SP, #4
0x1916	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 465 :: 		Draw_Line((xc - b), (yc + a), (xc + b), (yc + a), colour);
0x191A	0xF8BD8018  LDRH	R8, [SP, #24]
0x191E	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1922	0x1827    ADDS	R7, R4, R0
0x1924	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1928	0xF9BD400C  LDRSH	R4, [SP, #12]
0x192C	0x1966    ADDS	R6, R4, R5
0x192E	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1932	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1936	0x1B64    SUB	R4, R4, R5
0x1938	0xF8AD0004  STRH	R0, [SP, #4]
0x193C	0xB23B    SXTH	R3, R7
0x193E	0xB232    SXTH	R2, R6
0x1940	0xB239    SXTH	R1, R7
0x1942	0xB220    SXTH	R0, R4
0x1944	0xF84D8D04  PUSH	(R8)
0x1948	0xF7FEFE80  BL	_Draw_Line+0
0x194C	0xB001    ADD	SP, SP, #4
0x194E	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 466 :: 		Draw_Line((xc - b), (yc - a), (xc + b), (yc - a), colour);
0x1952	0xF8BD8018  LDRH	R8, [SP, #24]
0x1956	0xF9BD4010  LDRSH	R4, [SP, #16]
0x195A	0x1A27    SUB	R7, R4, R0
0x195C	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1960	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1964	0x1966    ADDS	R6, R4, R5
0x1966	0xF9BD5008  LDRSH	R5, [SP, #8]
0x196A	0xF9BD400C  LDRSH	R4, [SP, #12]
0x196E	0x1B64    SUB	R4, R4, R5
0x1970	0xF8AD0004  STRH	R0, [SP, #4]
0x1974	0xB23B    SXTH	R3, R7
0x1976	0xB232    SXTH	R2, R6
0x1978	0xB239    SXTH	R1, R7
0x197A	0xB220    SXTH	R0, R4
0x197C	0xF84D8D04  PUSH	(R8)
0x1980	0xF7FEFE64  BL	_Draw_Line+0
0x1984	0xB001    ADD	SP, SP, #4
0x1986	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 467 :: 		}
0x198A	0xE08F    B	L_Draw_Circle126
L_Draw_Circle125:
;st7735.c, 470 :: 		Draw_Pixel((xc + a), (yc + b), colour);
0x198C	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1990	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1994	0x1965    ADDS	R5, R4, R5
0x1996	0xF9BD400C  LDRSH	R4, [SP, #12]
0x199A	0x1824    ADDS	R4, R4, R0
0x199C	0xF8AD0004  STRH	R0, [SP, #4]
0x19A0	0xF8BD2018  LDRH	R2, [SP, #24]
0x19A4	0xB2E9    UXTB	R1, R5
0x19A6	0xB2E0    UXTB	R0, R4
0x19A8	0xF7FEFBC2  BL	_Draw_Pixel+0
0x19AC	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 471 :: 		Draw_Pixel((xc + b), (yc + a), colour);
0x19B0	0xF9BD4010  LDRSH	R4, [SP, #16]
0x19B4	0x1826    ADDS	R6, R4, R0
0x19B6	0xF9BD5008  LDRSH	R5, [SP, #8]
0x19BA	0xF9BD400C  LDRSH	R4, [SP, #12]
0x19BE	0x1964    ADDS	R4, R4, R5
0x19C0	0xF8AD0004  STRH	R0, [SP, #4]
0x19C4	0xF8BD2018  LDRH	R2, [SP, #24]
0x19C8	0xB2F1    UXTB	R1, R6
0x19CA	0xB2E0    UXTB	R0, R4
0x19CC	0xF7FEFBB0  BL	_Draw_Pixel+0
0x19D0	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 472 :: 		Draw_Pixel((xc - a), (yc + b), colour);
0x19D4	0xF9BD5008  LDRSH	R5, [SP, #8]
0x19D8	0xF9BD4010  LDRSH	R4, [SP, #16]
0x19DC	0x1965    ADDS	R5, R4, R5
0x19DE	0xF9BD400C  LDRSH	R4, [SP, #12]
0x19E2	0x1A24    SUB	R4, R4, R0
0x19E4	0xF8AD0004  STRH	R0, [SP, #4]
0x19E8	0xF8BD2018  LDRH	R2, [SP, #24]
0x19EC	0xB2E9    UXTB	R1, R5
0x19EE	0xB2E0    UXTB	R0, R4
0x19F0	0xF7FEFB9E  BL	_Draw_Pixel+0
0x19F4	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 473 :: 		Draw_Pixel((xc - b), (yc + a), colour);
0x19F8	0xF9BD4010  LDRSH	R4, [SP, #16]
0x19FC	0x1826    ADDS	R6, R4, R0
0x19FE	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1A02	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1A06	0x1B64    SUB	R4, R4, R5
0x1A08	0xF8AD0004  STRH	R0, [SP, #4]
0x1A0C	0xF8BD2018  LDRH	R2, [SP, #24]
0x1A10	0xB2F1    UXTB	R1, R6
0x1A12	0xB2E0    UXTB	R0, R4
0x1A14	0xF7FEFB8C  BL	_Draw_Pixel+0
0x1A18	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 474 :: 		Draw_Pixel((xc + b), (yc - a), colour);
0x1A1C	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1A20	0x1A26    SUB	R6, R4, R0
0x1A22	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1A26	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1A2A	0x1964    ADDS	R4, R4, R5
0x1A2C	0xF8AD0004  STRH	R0, [SP, #4]
0x1A30	0xF8BD2018  LDRH	R2, [SP, #24]
0x1A34	0xB2F1    UXTB	R1, R6
0x1A36	0xB2E0    UXTB	R0, R4
0x1A38	0xF7FEFB7A  BL	_Draw_Pixel+0
0x1A3C	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 475 :: 		Draw_Pixel((xc + a), (yc - b), colour);
0x1A40	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1A44	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1A48	0x1B65    SUB	R5, R4, R5
0x1A4A	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1A4E	0x1824    ADDS	R4, R4, R0
0x1A50	0xF8AD0004  STRH	R0, [SP, #4]
0x1A54	0xF8BD2018  LDRH	R2, [SP, #24]
0x1A58	0xB2E9    UXTB	R1, R5
0x1A5A	0xB2E0    UXTB	R0, R4
0x1A5C	0xF7FEFB68  BL	_Draw_Pixel+0
0x1A60	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 476 :: 		Draw_Pixel((xc - a), (yc - b), colour);
0x1A64	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1A68	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1A6C	0x1B65    SUB	R5, R4, R5
0x1A6E	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1A72	0x1A24    SUB	R4, R4, R0
0x1A74	0xF8AD0004  STRH	R0, [SP, #4]
0x1A78	0xF8BD2018  LDRH	R2, [SP, #24]
0x1A7C	0xB2E9    UXTB	R1, R5
0x1A7E	0xB2E0    UXTB	R0, R4
0x1A80	0xF7FEFB56  BL	_Draw_Pixel+0
0x1A84	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 477 :: 		Draw_Pixel((xc - b), (yc - a), colour);
0x1A88	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1A8C	0x1A26    SUB	R6, R4, R0
0x1A8E	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1A92	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1A96	0x1B64    SUB	R4, R4, R5
0x1A98	0xF8AD0004  STRH	R0, [SP, #4]
0x1A9C	0xF8BD2018  LDRH	R2, [SP, #24]
0x1AA0	0xB2F1    UXTB	R1, R6
0x1AA2	0xB2E0    UXTB	R0, R4
0x1AA4	0xF7FEFB44  BL	_Draw_Pixel+0
0x1AA8	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 478 :: 		}
L_Draw_Circle126:
;st7735.c, 480 :: 		if(p < 0)
0x1AAC	0xF9BD400A  LDRSH	R4, [SP, #10]
0x1AB0	0x2C00    CMP	R4, #0
0x1AB2	0xDA0D    BGE	L_Draw_Circle127
;st7735.c, 482 :: 		p += (0x03 + (0x02 * a++));
0x1AB4	0x0044    LSLS	R4, R0, #1
0x1AB6	0xB224    SXTH	R4, R4
0x1AB8	0x1CE5    ADDS	R5, R4, #3
0x1ABA	0xB22D    SXTH	R5, R5
0x1ABC	0xF9BD400A  LDRSH	R4, [SP, #10]
0x1AC0	0x1964    ADDS	R4, R4, R5
0x1AC2	0xF8AD400A  STRH	R4, [SP, #10]
0x1AC6	0xF1000A01  ADD	R10, R0, #1
0x1ACA	0xFA0FFA8A  SXTH	R10, R10
; a end address is: 0 (R0)
; a start address is: 40 (R10)
;st7735.c, 483 :: 		}
; a end address is: 40 (R10)
0x1ACE	0xE015    B	L_Draw_Circle128
L_Draw_Circle127:
;st7735.c, 486 :: 		p += (0x05 + (0x02 * ((a++) - (b--))));
; a start address is: 0 (R0)
0x1AD0	0xF9BD4008  LDRSH	R4, [SP, #8]
0x1AD4	0x1B04    SUB	R4, R0, R4
0x1AD6	0xB224    SXTH	R4, R4
0x1AD8	0x0064    LSLS	R4, R4, #1
0x1ADA	0xB224    SXTH	R4, R4
0x1ADC	0x1D65    ADDS	R5, R4, #5
0x1ADE	0xB22D    SXTH	R5, R5
0x1AE0	0xF9BD400A  LDRSH	R4, [SP, #10]
0x1AE4	0x1964    ADDS	R4, R4, R5
0x1AE6	0xF8AD400A  STRH	R4, [SP, #10]
0x1AEA	0xF1000A01  ADD	R10, R0, #1
0x1AEE	0xFA0FFA8A  SXTH	R10, R10
; a end address is: 0 (R0)
; a start address is: 40 (R10)
0x1AF2	0xF9BD4008  LDRSH	R4, [SP, #8]
0x1AF6	0x1E64    SUBS	R4, R4, #1
0x1AF8	0xF8AD4008  STRH	R4, [SP, #8]
; a end address is: 40 (R10)
;st7735.c, 487 :: 		}
L_Draw_Circle128:
;st7735.c, 488 :: 		}while(a <= b);
; a start address is: 40 (R10)
0x1AFC	0xF9BD4008  LDRSH	R4, [SP, #8]
0x1B00	0x45A2    CMP	R10, R4
0x1B02	0xF77FAED2  BLE	L__Draw_Circle217
; a end address is: 40 (R10)
;st7735.c, 489 :: 		}
L_end_Draw_Circle:
0x1B06	0xF8DDE000  LDR	LR, [SP, #0]
0x1B0A	0xB006    ADD	SP, SP, #24
0x1B0C	0x4770    BX	LR
; end of _Draw_Circle
_Draw_Line:
;st7735.c, 320 :: 		void Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned int colour)
; y1 start address is: 4 (R1)
; x1 start address is: 0 (R0)
0x064C	0xB086    SUB	SP, SP, #24
0x064E	0xF8CDE000  STR	LR, [SP, #0]
0x0652	0xFA0FFA80  SXTH	R10, R0
0x0656	0xFA0FFB81  SXTH	R11, R1
0x065A	0xF8AD2010  STRH	R2, [SP, #16]
0x065E	0xF8AD3014  STRH	R3, [SP, #20]
; y1 end address is: 4 (R1)
; x1 end address is: 0 (R0)
; x1 start address is: 40 (R10)
; y1 start address is: 44 (R11)
; colour start address is: 48 (R12)
0x0662	0xF8BDC018  LDRH	R12, [SP, #24]
;st7735.c, 322 :: 		signed int dx = 0x0000;
;st7735.c, 323 :: 		signed int dy = 0x0000;
;st7735.c, 324 :: 		signed int stepx = 0x0000;
;st7735.c, 325 :: 		signed int stepy = 0x0000;
;st7735.c, 326 :: 		signed int fraction = 0x0000;
;st7735.c, 328 :: 		dy = (y2 - y1);
0x0666	0xF9BD4014  LDRSH	R4, [SP, #20]
0x066A	0xEBA4050B  SUB	R5, R4, R11, LSL #0
0x066E	0xB22D    SXTH	R5, R5
; dy start address is: 8 (R2)
0x0670	0xB22A    SXTH	R2, R5
;st7735.c, 329 :: 		dx = (x2 - x1);
0x0672	0xF9BD4010  LDRSH	R4, [SP, #16]
0x0676	0xEBA4000A  SUB	R0, R4, R10, LSL #0
0x067A	0xB200    SXTH	R0, R0
; dx start address is: 0 (R0)
;st7735.c, 331 :: 		if (dy < 0)
0x067C	0x2D00    CMP	R5, #0
0x067E	0xDA08    BGE	L_Draw_Line97
;st7735.c, 333 :: 		dy = -dy;
0x0680	0x4254    RSBS	R4, R2, #0
; dy end address is: 8 (R2)
; dy start address is: 20 (R5)
0x0682	0xB225    SXTH	R5, R4
;st7735.c, 334 :: 		stepy = -1;
0x0684	0xF64F74FF  MOVW	R4, #65535
0x0688	0xB224    SXTH	R4, R4
0x068A	0xF8AD400A  STRH	R4, [SP, #10]
;st7735.c, 335 :: 		}
0x068E	0xB22A    SXTH	R2, R5
; dy end address is: 20 (R5)
0x0690	0xE003    B	L_Draw_Line98
L_Draw_Line97:
;st7735.c, 338 :: 		stepy = 1;
; dy start address is: 8 (R2)
0x0692	0x2401    MOVS	R4, #1
0x0694	0xB224    SXTH	R4, R4
0x0696	0xF8AD400A  STRH	R4, [SP, #10]
; dy end address is: 8 (R2)
;st7735.c, 339 :: 		}
L_Draw_Line98:
;st7735.c, 341 :: 		if (dx < 0)
; dy start address is: 8 (R2)
0x069A	0x2800    CMP	R0, #0
0x069C	0xDA08    BGE	L_Draw_Line99
;st7735.c, 343 :: 		dx = -dx;
0x069E	0x4244    RSBS	R4, R0, #0
; dx end address is: 0 (R0)
; dx start address is: 12 (R3)
0x06A0	0xB223    SXTH	R3, R4
;st7735.c, 344 :: 		stepx = -1;
0x06A2	0xF64F74FF  MOVW	R4, #65535
0x06A6	0xB224    SXTH	R4, R4
0x06A8	0xF8AD4008  STRH	R4, [SP, #8]
;st7735.c, 345 :: 		}
0x06AC	0xB218    SXTH	R0, R3
; dx end address is: 12 (R3)
0x06AE	0xE003    B	L_Draw_Line100
L_Draw_Line99:
;st7735.c, 348 :: 		stepx = 1;
; dx start address is: 0 (R0)
0x06B0	0x2401    MOVS	R4, #1
0x06B2	0xB224    SXTH	R4, R4
0x06B4	0xF8AD4008  STRH	R4, [SP, #8]
; dx end address is: 0 (R0)
;st7735.c, 349 :: 		}
L_Draw_Line100:
;st7735.c, 351 :: 		dx <<= 0x01;
; dx start address is: 0 (R0)
0x06B8	0x0041    LSLS	R1, R0, #1
0x06BA	0xB209    SXTH	R1, R1
; dx end address is: 0 (R0)
; dx start address is: 4 (R1)
;st7735.c, 352 :: 		dy <<= 0x01;
0x06BC	0x0050    LSLS	R0, R2, #1
0x06BE	0xB200    SXTH	R0, R0
; dy end address is: 8 (R2)
; dy start address is: 0 (R0)
;st7735.c, 354 :: 		Draw_Pixel(x1, y1, colour);
0x06C0	0xF8AD0004  STRH	R0, [SP, #4]
0x06C4	0xF8AD1006  STRH	R1, [SP, #6]
0x06C8	0xFA1FF28C  UXTH	R2, R12
0x06CC	0xFA5FF18B  UXTB	R1, R11
0x06D0	0xFA5FF08A  UXTB	R0, R10
0x06D4	0xF7FFFD2C  BL	_Draw_Pixel+0
0x06D8	0xF9BD1006  LDRSH	R1, [SP, #6]
0x06DC	0xF9BD0004  LDRSH	R0, [SP, #4]
;st7735.c, 356 :: 		if (dx > dy)
0x06E0	0x4281    CMP	R1, R0
0x06E2	0xDD3D    BLE	L_Draw_Line101
;st7735.c, 358 :: 		fraction = (dy - (dx >> 1));
0x06E4	0x104C    ASRS	R4, R1, #1
0x06E6	0xB224    SXTH	R4, R4
0x06E8	0x1B04    SUB	R4, R0, R4
0x06EA	0xF8AD400C  STRH	R4, [SP, #12]
; x1 end address is: 40 (R10)
; y1 end address is: 44 (R11)
0x06EE	0xFA0FF38A  SXTH	R3, R10
0x06F2	0xFA0FF28B  SXTH	R2, R11
;st7735.c, 359 :: 		while (x1 != x2)
L_Draw_Line102:
; dy start address is: 0 (R0)
; dy end address is: 0 (R0)
; dx start address is: 4 (R1)
; dx end address is: 4 (R1)
; colour start address is: 48 (R12)
; colour end address is: 48 (R12)
; y1 start address is: 8 (R2)
; x1 start address is: 12 (R3)
0x06F6	0xF9BD4010  LDRSH	R4, [SP, #16]
0x06FA	0x42A3    CMP	R3, R4
0x06FC	0xD02F    BEQ	L_Draw_Line103
; dy end address is: 0 (R0)
; dx end address is: 4 (R1)
; colour end address is: 48 (R12)
;st7735.c, 361 :: 		if (fraction >= 0)
; colour start address is: 48 (R12)
; dx start address is: 4 (R1)
; dy start address is: 0 (R0)
0x06FE	0xF9BD400C  LDRSH	R4, [SP, #12]
0x0702	0x2C00    CMP	R4, #0
0x0704	0xDB0B    BLT	L__Draw_Line215
;st7735.c, 363 :: 		y1 += stepy;
0x0706	0xF9BD400A  LDRSH	R4, [SP, #10]
0x070A	0xEB020B04  ADD	R11, R2, R4, LSL #0
0x070E	0xFA0FFB8B  SXTH	R11, R11
; y1 end address is: 8 (R2)
; y1 start address is: 44 (R11)
;st7735.c, 364 :: 		fraction -= dx;
0x0712	0xF9BD400C  LDRSH	R4, [SP, #12]
0x0716	0x1A64    SUB	R4, R4, R1
0x0718	0xF8AD400C  STRH	R4, [SP, #12]
; y1 end address is: 44 (R11)
;st7735.c, 365 :: 		}
0x071C	0xE001    B	L_Draw_Line104
L__Draw_Line215:
;st7735.c, 361 :: 		if (fraction >= 0)
0x071E	0xFA0FFB82  SXTH	R11, R2
;st7735.c, 365 :: 		}
L_Draw_Line104:
;st7735.c, 366 :: 		x1 += stepx;
; y1 start address is: 44 (R11)
0x0722	0xF9BD4008  LDRSH	R4, [SP, #8]
0x0726	0x191D    ADDS	R5, R3, R4
; x1 end address is: 12 (R3)
; x1 start address is: 40 (R10)
0x0728	0xFA0FFA85  SXTH	R10, R5
;st7735.c, 367 :: 		fraction += dy;
0x072C	0xF9BD400C  LDRSH	R4, [SP, #12]
0x0730	0x1824    ADDS	R4, R4, R0
0x0732	0xF8AD400C  STRH	R4, [SP, #12]
;st7735.c, 369 :: 		Draw_Pixel(x1, y1, colour);
0x0736	0xF8AD1004  STRH	R1, [SP, #4]
0x073A	0xF8AD0006  STRH	R0, [SP, #6]
0x073E	0xFA1FF28C  UXTH	R2, R12
0x0742	0xFA5FF18B  UXTB	R1, R11
0x0746	0xB2E8    UXTB	R0, R5
0x0748	0xF7FFFCF2  BL	_Draw_Pixel+0
0x074C	0xF9BD0006  LDRSH	R0, [SP, #6]
0x0750	0xF9BD1004  LDRSH	R1, [SP, #4]
;st7735.c, 370 :: 		}
0x0754	0xFA0FF38A  SXTH	R3, R10
; dy end address is: 0 (R0)
; dx end address is: 4 (R1)
; colour end address is: 48 (R12)
; x1 end address is: 40 (R10)
; y1 end address is: 44 (R11)
0x0758	0xFA0FF28B  SXTH	R2, R11
0x075C	0xE7CB    B	L_Draw_Line102
L_Draw_Line103:
;st7735.c, 371 :: 		}
0x075E	0xE03C    B	L_Draw_Line105
L_Draw_Line101:
;st7735.c, 374 :: 		fraction = (dx - (dy >> 1));
; y1 start address is: 44 (R11)
; x1 start address is: 40 (R10)
; colour start address is: 48 (R12)
; dx start address is: 4 (R1)
; dy start address is: 0 (R0)
0x0760	0x1044    ASRS	R4, R0, #1
0x0762	0xB224    SXTH	R4, R4
0x0764	0x1B0C    SUB	R4, R1, R4
0x0766	0xF8AD400C  STRH	R4, [SP, #12]
; x1 end address is: 40 (R10)
; y1 end address is: 44 (R11)
0x076A	0xFA0FF38A  SXTH	R3, R10
0x076E	0xFA0FF28B  SXTH	R2, R11
;st7735.c, 376 :: 		while (y1 != y2)
L_Draw_Line106:
; dy start address is: 0 (R0)
; dy end address is: 0 (R0)
; dx start address is: 4 (R1)
; dx end address is: 4 (R1)
; colour start address is: 48 (R12)
; colour end address is: 48 (R12)
; y1 start address is: 8 (R2)
; x1 start address is: 12 (R3)
0x0772	0xF9BD4014  LDRSH	R4, [SP, #20]
0x0776	0x42A2    CMP	R2, R4
0x0778	0xD02F    BEQ	L_Draw_Line107
; dy end address is: 0 (R0)
; dx end address is: 4 (R1)
; colour end address is: 48 (R12)
;st7735.c, 378 :: 		if (fraction >= 0)
; colour start address is: 48 (R12)
; dx start address is: 4 (R1)
; dy start address is: 0 (R0)
0x077A	0xF9BD400C  LDRSH	R4, [SP, #12]
0x077E	0x2C00    CMP	R4, #0
0x0780	0xDB0B    BLT	L__Draw_Line216
;st7735.c, 380 :: 		x1 += stepx;
0x0782	0xF9BD4008  LDRSH	R4, [SP, #8]
0x0786	0x191C    ADDS	R4, R3, R4
; x1 end address is: 12 (R3)
; x1 start address is: 24 (R6)
0x0788	0xB226    SXTH	R6, R4
;st7735.c, 381 :: 		fraction -= dy;
0x078A	0xF9BD400C  LDRSH	R4, [SP, #12]
0x078E	0x1A24    SUB	R4, R4, R0
0x0790	0xF8AD400C  STRH	R4, [SP, #12]
; x1 end address is: 24 (R6)
0x0794	0xFA0FFA86  SXTH	R10, R6
;st7735.c, 382 :: 		}
0x0798	0xE001    B	L_Draw_Line108
L__Draw_Line216:
;st7735.c, 378 :: 		if (fraction >= 0)
0x079A	0xFA0FFA83  SXTH	R10, R3
;st7735.c, 382 :: 		}
L_Draw_Line108:
;st7735.c, 383 :: 		y1 += stepy;
; x1 start address is: 40 (R10)
0x079E	0xF9BD400A  LDRSH	R4, [SP, #10]
0x07A2	0x1915    ADDS	R5, R2, R4
; y1 end address is: 8 (R2)
; y1 start address is: 44 (R11)
0x07A4	0xFA0FFB85  SXTH	R11, R5
;st7735.c, 384 :: 		fraction += dx;
0x07A8	0xF9BD400C  LDRSH	R4, [SP, #12]
0x07AC	0x1864    ADDS	R4, R4, R1
0x07AE	0xF8AD400C  STRH	R4, [SP, #12]
;st7735.c, 385 :: 		Draw_Pixel(x1, y1, colour);
0x07B2	0xF8AD1004  STRH	R1, [SP, #4]
0x07B6	0xF8AD0006  STRH	R0, [SP, #6]
0x07BA	0xFA1FF28C  UXTH	R2, R12
0x07BE	0xB2E9    UXTB	R1, R5
0x07C0	0xFA5FF08A  UXTB	R0, R10
0x07C4	0xF7FFFCB4  BL	_Draw_Pixel+0
0x07C8	0xF9BD0006  LDRSH	R0, [SP, #6]
0x07CC	0xF9BD1004  LDRSH	R1, [SP, #4]
;st7735.c, 386 :: 		}
0x07D0	0xFA0FF38A  SXTH	R3, R10
; dy end address is: 0 (R0)
; dx end address is: 4 (R1)
; colour end address is: 48 (R12)
; x1 end address is: 40 (R10)
; y1 end address is: 44 (R11)
0x07D4	0xFA0FF28B  SXTH	R2, R11
0x07D8	0xE7CB    B	L_Draw_Line106
L_Draw_Line107:
;st7735.c, 387 :: 		}
L_Draw_Line105:
;st7735.c, 388 :: 		}
L_end_Draw_Line:
0x07DA	0xF8DDE000  LDR	LR, [SP, #0]
0x07DE	0xB006    ADD	SP, SP, #24
0x07E0	0x4770    BX	LR
; end of _Draw_Line
_Draw_Pixel:
;st7735.c, 313 :: 		void Draw_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned int colour)
; colour start address is: 8 (R2)
; y_pos start address is: 4 (R1)
; x_pos start address is: 0 (R0)
0x0130	0xB081    SUB	SP, SP, #4
0x0132	0xF8CDE000  STR	LR, [SP, #0]
0x0136	0xFA1FF982  UXTH	R9, R2
; colour end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
; x_pos start address is: 0 (R0)
; y_pos start address is: 4 (R1)
; colour start address is: 36 (R9)
;st7735.c, 315 :: 		Set_Addr_Window(x_pos, y_pos, (1 + x_pos), (1 + y_pos));
0x013A	0x1C4C    ADDS	R4, R1, #1
0x013C	0x1C43    ADDS	R3, R0, #1
0x013E	0xB2DA    UXTB	R2, R3
0x0140	0xB2E3    UXTB	R3, R4
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
0x0142	0xF000F809  BL	_Set_Addr_Window+0
;st7735.c, 316 :: 		ST7735_Word_Write(colour);
0x0146	0xFA1FF089  UXTH	R0, R9
; colour end address is: 36 (R9)
0x014A	0xF000F887  BL	_ST7735_Word_Write+0
;st7735.c, 317 :: 		}
L_end_Draw_Pixel:
0x014E	0xF8DDE000  LDR	LR, [SP, #0]
0x0152	0xB001    ADD	SP, SP, #4
0x0154	0x4770    BX	LR
; end of _Draw_Pixel
_Draw_Rectangle:
;st7735.c, 391 :: 		void Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char type, unsigned int colour, unsigned int back_colour)
0x160C	0xB086    SUB	SP, SP, #24
0x160E	0xF8CDE000  STR	LR, [SP, #0]
0x1612	0xF8AD0008  STRH	R0, [SP, #8]
0x1616	0xF8AD100C  STRH	R1, [SP, #12]
0x161A	0xF8AD2010  STRH	R2, [SP, #16]
0x161E	0xF8AD3014  STRH	R3, [SP, #20]
; fill start address is: 0 (R0)
0x1622	0xF89D0018  LDRB	R0, [SP, #24]
0x1626	0xF89D401C  LDRB	R4, [SP, #28]
0x162A	0xF88D401C  STRB	R4, [SP, #28]
0x162E	0xF8BD4020  LDRH	R4, [SP, #32]
0x1632	0xF8AD4020  STRH	R4, [SP, #32]
0x1636	0xF8BD4024  LDRH	R4, [SP, #36]
0x163A	0xF8AD4024  STRH	R4, [SP, #36]
;st7735.c, 393 :: 		unsigned char i = 0x00;
;st7735.c, 394 :: 		unsigned char xmin = 0x00;
;st7735.c, 395 :: 		unsigned char xmax = 0x00;
;st7735.c, 396 :: 		unsigned char ymin = 0x00;
;st7735.c, 397 :: 		unsigned char ymax = 0x00;
;st7735.c, 399 :: 		if(fill != NO)
0x163E	0x2800    CMP	R0, #0
0x1640	0xD049    BEQ	L_Draw_Rectangle109
; fill end address is: 0 (R0)
;st7735.c, 401 :: 		if(x1 < x2)
0x1642	0xF9BD5010  LDRSH	R5, [SP, #16]
0x1646	0xF9BD4008  LDRSH	R4, [SP, #8]
0x164A	0x42AC    CMP	R4, R5
0x164C	0xDA06    BGE	L_Draw_Rectangle110
;st7735.c, 403 :: 		xmin = x1;
; xmin start address is: 36 (R9)
0x164E	0xF9BD9008  LDRSH	R9, [SP, #8]
;st7735.c, 404 :: 		xmax = x2;
0x1652	0xF9BD4010  LDRSH	R4, [SP, #16]
0x1656	0xF88D4004  STRB	R4, [SP, #4]
;st7735.c, 405 :: 		}
; xmin end address is: 36 (R9)
0x165A	0xE005    B	L_Draw_Rectangle111
L_Draw_Rectangle110:
;st7735.c, 408 :: 		xmin = x2;
; xmin start address is: 36 (R9)
0x165C	0xF9BD9010  LDRSH	R9, [SP, #16]
;st7735.c, 409 :: 		xmax = x1;
0x1660	0xF9BD4008  LDRSH	R4, [SP, #8]
0x1664	0xF88D4004  STRB	R4, [SP, #4]
; xmin end address is: 36 (R9)
;st7735.c, 410 :: 		}
L_Draw_Rectangle111:
;st7735.c, 412 :: 		if(y1 < y2)
; xmin start address is: 36 (R9)
0x1668	0xF9BD5014  LDRSH	R5, [SP, #20]
0x166C	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1670	0x42AC    CMP	R4, R5
0x1672	0xDA08    BGE	L_Draw_Rectangle112
;st7735.c, 414 :: 		ymin = y1;
0x1674	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1678	0xF88D4005  STRB	R4, [SP, #5]
;st7735.c, 415 :: 		ymax = y2;
0x167C	0xF9BD4014  LDRSH	R4, [SP, #20]
0x1680	0xF88D4006  STRB	R4, [SP, #6]
;st7735.c, 416 :: 		}
0x1684	0xE007    B	L_Draw_Rectangle113
L_Draw_Rectangle112:
;st7735.c, 419 :: 		ymin = y2;
0x1686	0xF9BD4014  LDRSH	R4, [SP, #20]
0x168A	0xF88D4005  STRB	R4, [SP, #5]
;st7735.c, 420 :: 		ymax = y1;
0x168E	0xF9BD400C  LDRSH	R4, [SP, #12]
0x1692	0xF88D4006  STRB	R4, [SP, #6]
;st7735.c, 421 :: 		}
L_Draw_Rectangle113:
;st7735.c, 423 :: 		for(; xmin <= xmax; ++xmin)
; xmin end address is: 36 (R9)
L_Draw_Rectangle114:
; xmin start address is: 36 (R9)
0x1696	0xF89D4004  LDRB	R4, [SP, #4]
0x169A	0x45A1    CMP	R9, R4
0x169C	0xD81A    BHI	L_Draw_Rectangle115
;st7735.c, 425 :: 		for(i = ymin; i <= ymax; ++i)
; i start address is: 40 (R10)
0x169E	0xF89DA005  LDRB	R10, [SP, #5]
; i end address is: 40 (R10)
; xmin end address is: 36 (R9)
0x16A2	0xFA5FFB89  UXTB	R11, R9
L_Draw_Rectangle117:
; i start address is: 40 (R10)
; xmin start address is: 44 (R11)
0x16A6	0xF89D4006  LDRB	R4, [SP, #6]
0x16AA	0x45A2    CMP	R10, R4
0x16AC	0xD80D    BHI	L_Draw_Rectangle118
;st7735.c, 427 :: 		Draw_Pixel(xmin, i, colour);
0x16AE	0xF8BD2020  LDRH	R2, [SP, #32]
0x16B2	0xFA5FF18A  UXTB	R1, R10
0x16B6	0xFA5FF08B  UXTB	R0, R11
0x16BA	0xF7FEFD39  BL	_Draw_Pixel+0
;st7735.c, 425 :: 		for(i = ymin; i <= ymax; ++i)
0x16BE	0xF10A0401  ADD	R4, R10, #1
; i end address is: 40 (R10)
; i start address is: 0 (R0)
0x16C2	0xB2E0    UXTB	R0, R4
;st7735.c, 428 :: 		}
; i end address is: 0 (R0)
0x16C4	0xFA5FFA80  UXTB	R10, R0
0x16C8	0xE7ED    B	L_Draw_Rectangle117
L_Draw_Rectangle118:
;st7735.c, 423 :: 		for(; xmin <= xmax; ++xmin)
0x16CA	0xF10B0401  ADD	R4, R11, #1
; xmin end address is: 44 (R11)
; xmin start address is: 36 (R9)
0x16CE	0xFA5FF984  UXTB	R9, R4
;st7735.c, 429 :: 		}
; xmin end address is: 36 (R9)
0x16D2	0xE7E0    B	L_Draw_Rectangle114
L_Draw_Rectangle115:
;st7735.c, 430 :: 		}
0x16D4	0xE037    B	L_Draw_Rectangle120
L_Draw_Rectangle109:
;st7735.c, 434 :: 		Draw_Line(x1, y1, x2, y1, colour);
0x16D6	0xF8BD4020  LDRH	R4, [SP, #32]
0x16DA	0xF9BD300C  LDRSH	R3, [SP, #12]
0x16DE	0xF9BD2010  LDRSH	R2, [SP, #16]
0x16E2	0xF9BD100C  LDRSH	R1, [SP, #12]
0x16E6	0xF9BD0008  LDRSH	R0, [SP, #8]
0x16EA	0xB410    PUSH	(R4)
0x16EC	0xF7FEFFAE  BL	_Draw_Line+0
0x16F0	0xB001    ADD	SP, SP, #4
;st7735.c, 435 :: 		Draw_Line(x1, y2, x2, y2, colour);
0x16F2	0xF8BD4020  LDRH	R4, [SP, #32]
0x16F6	0xF9BD3014  LDRSH	R3, [SP, #20]
0x16FA	0xF9BD2010  LDRSH	R2, [SP, #16]
0x16FE	0xF9BD1014  LDRSH	R1, [SP, #20]
0x1702	0xF9BD0008  LDRSH	R0, [SP, #8]
0x1706	0xB410    PUSH	(R4)
0x1708	0xF7FEFFA0  BL	_Draw_Line+0
0x170C	0xB001    ADD	SP, SP, #4
;st7735.c, 436 :: 		Draw_Line(x1, y1, x1, y2, colour);
0x170E	0xF8BD4020  LDRH	R4, [SP, #32]
0x1712	0xF9BD3014  LDRSH	R3, [SP, #20]
0x1716	0xF9BD2008  LDRSH	R2, [SP, #8]
0x171A	0xF9BD100C  LDRSH	R1, [SP, #12]
0x171E	0xF9BD0008  LDRSH	R0, [SP, #8]
0x1722	0xB410    PUSH	(R4)
0x1724	0xF7FEFF92  BL	_Draw_Line+0
0x1728	0xB001    ADD	SP, SP, #4
;st7735.c, 437 :: 		Draw_Line(x2, y1, x2, y2, colour);
0x172A	0xF8BD4020  LDRH	R4, [SP, #32]
0x172E	0xF9BD3014  LDRSH	R3, [SP, #20]
0x1732	0xF9BD2010  LDRSH	R2, [SP, #16]
0x1736	0xF9BD100C  LDRSH	R1, [SP, #12]
0x173A	0xF9BD0010  LDRSH	R0, [SP, #16]
0x173E	0xB410    PUSH	(R4)
0x1740	0xF7FEFF84  BL	_Draw_Line+0
0x1744	0xB001    ADD	SP, SP, #4
;st7735.c, 438 :: 		}
L_Draw_Rectangle120:
;st7735.c, 440 :: 		if(type != SQUARE)
0x1746	0xF89D401C  LDRB	R4, [SP, #28]
0x174A	0xB1FC    CBZ	R4, L_Draw_Rectangle121
;st7735.c, 442 :: 		Draw_Pixel(x1, y1, back_colour);
0x174C	0xF8BD2024  LDRH	R2, [SP, #36]
0x1750	0xF9BD100C  LDRSH	R1, [SP, #12]
0x1754	0xF9BD0008  LDRSH	R0, [SP, #8]
0x1758	0xF7FEFCEA  BL	_Draw_Pixel+0
;st7735.c, 443 :: 		Draw_Pixel(x1, y2, back_colour);
0x175C	0xF8BD2024  LDRH	R2, [SP, #36]
0x1760	0xF9BD1014  LDRSH	R1, [SP, #20]
0x1764	0xF9BD0008  LDRSH	R0, [SP, #8]
0x1768	0xF7FEFCE2  BL	_Draw_Pixel+0
;st7735.c, 444 :: 		Draw_Pixel(x2, y1, back_colour);
0x176C	0xF8BD2024  LDRH	R2, [SP, #36]
0x1770	0xF9BD100C  LDRSH	R1, [SP, #12]
0x1774	0xF9BD0010  LDRSH	R0, [SP, #16]
0x1778	0xF7FEFCDA  BL	_Draw_Pixel+0
;st7735.c, 445 :: 		Draw_Pixel(x2, y2, back_colour);
0x177C	0xF8BD2024  LDRH	R2, [SP, #36]
0x1780	0xF9BD1014  LDRSH	R1, [SP, #20]
0x1784	0xF9BD0010  LDRSH	R0, [SP, #16]
0x1788	0xF7FEFCD2  BL	_Draw_Pixel+0
;st7735.c, 446 :: 		}
L_Draw_Rectangle121:
;st7735.c, 447 :: 		}
L_end_Draw_Rectangle:
0x178C	0xF8DDE000  LDR	LR, [SP, #0]
0x1790	0xB006    ADD	SP, SP, #24
0x1792	0x4770    BX	LR
; end of _Draw_Rectangle
_print_str:
;st7735.c, 554 :: 		void print_str(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char *ch)
; font_size start address is: 8 (R2)
0x1794	0xB086    SUB	SP, SP, #24
0x1796	0xF8CDE000  STR	LR, [SP, #0]
0x179A	0xF88D000C  STRB	R0, [SP, #12]
0x179E	0xF88D1010  STRB	R1, [SP, #16]
0x17A2	0xF8AD3014  STRH	R3, [SP, #20]
; font_size end address is: 8 (R2)
; font_size start address is: 8 (R2)
0x17A6	0xF8BD4018  LDRH	R4, [SP, #24]
0x17AA	0xF8AD4018  STRH	R4, [SP, #24]
; ch start address is: 4 (R1)
0x17AE	0x9907    LDR	R1, [SP, #28]
0x17B0	0xB2D0    UXTB	R0, R2
; font_size end address is: 8 (R2)
; ch end address is: 4 (R1)
;st7735.c, 556 :: 		do
L_print_str143:
;st7735.c, 558 :: 		print_char(x_pos, y_pos, font_size, colour, back_colour, *ch++);
; ch start address is: 28 (R7)
; ch start address is: 4 (R1)
; font_size start address is: 0 (R0)
0x17B2	0x780C    LDRB	R4, [R1, #0]
0x17B4	0xB2E5    UXTB	R5, R4
0x17B6	0xF8BD4018  LDRH	R4, [SP, #24]
0x17BA	0xF88D0004  STRB	R0, [SP, #4]
0x17BE	0x9102    STR	R1, [SP, #8]
0x17C0	0xF8BD3014  LDRH	R3, [SP, #20]
0x17C4	0xB2C2    UXTB	R2, R0
0x17C6	0xF89D1010  LDRB	R1, [SP, #16]
0x17CA	0xF89D000C  LDRB	R0, [SP, #12]
0x17CE	0xB420    PUSH	(R5)
0x17D0	0xB410    PUSH	(R4)
0x17D2	0xF7FFF807  BL	_print_char+0
0x17D6	0xB002    ADD	SP, SP, #8
0x17D8	0x9902    LDR	R1, [SP, #8]
0x17DA	0xF89D0004  LDRB	R0, [SP, #4]
0x17DE	0x1C4E    ADDS	R6, R1, #1
; ch end address is: 4 (R1)
; ch start address is: 28 (R7)
0x17E0	0x4637    MOV	R7, R6
; ch end address is: 28 (R7)
;st7735.c, 559 :: 		x_pos += (font_size * 0x06);
0x17E2	0x2406    MOVS	R4, #6
0x17E4	0xB224    SXTH	R4, R4
0x17E6	0xFB00F504  MUL	R5, R0, R4
0x17EA	0xB22D    SXTH	R5, R5
0x17EC	0xF89D400C  LDRB	R4, [SP, #12]
0x17F0	0x1964    ADDS	R4, R4, R5
0x17F2	0xF88D400C  STRB	R4, [SP, #12]
;st7735.c, 560 :: 		}while((*ch >= 0x20) && (*ch <= 0x7F));
0x17F6	0x7834    LDRB	R4, [R6, #0]
0x17F8	0x2C20    CMP	R4, #32
0x17FA	0xD304    BCC	L__print_str221
; ch end address is: 28 (R7)
; ch start address is: 28 (R7)
0x17FC	0x783C    LDRB	R4, [R7, #0]
0x17FE	0x2C7F    CMP	R4, #127
0x1800	0xD801    BHI	L__print_str220
; font_size end address is: 0 (R0)
; ch end address is: 28 (R7)
0x1802	0x4639    MOV	R1, R7
0x1804	0xE7D5    B	L_print_str143
L__print_str221:
L__print_str220:
;st7735.c, 561 :: 		}
L_end_print_str:
0x1806	0xF8DDE000  LDR	LR, [SP, #0]
0x180A	0xB006    ADD	SP, SP, #24
0x180C	0x4770    BX	LR
; end of _print_str
_print_char:
;st7735.c, 505 :: 		void print_char(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char ch)
; colour start address is: 12 (R3)
; font_size start address is: 8 (R2)
0x07E4	0xB084    SUB	SP, SP, #16
0x07E6	0xF8CDE000  STR	LR, [SP, #0]
0x07EA	0xF88D0008  STRB	R0, [SP, #8]
0x07EE	0xF88D100C  STRB	R1, [SP, #12]
0x07F2	0xFA5FFB82  UXTB	R11, R2
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; font_size start address is: 44 (R11)
; colour start address is: 12 (R3)
0x07F6	0xF8BD4010  LDRH	R4, [SP, #16]
0x07FA	0xF8AD4010  STRH	R4, [SP, #16]
0x07FE	0xF89D4014  LDRB	R4, [SP, #20]
0x0802	0xF88D4014  STRB	R4, [SP, #20]
;st7735.c, 507 :: 		unsigned char i = 0x00;
;st7735.c, 508 :: 		unsigned char j = 0x00;
;st7735.c, 510 :: 		unsigned char value = 0x00;
;st7735.c, 512 :: 		if(font_size < 0)
0x0806	0xF1BB0F00  CMP	R11, #0
0x080A	0xD202    BCS	L__print_char218
;st7735.c, 514 :: 		font_size = 1;
0x080C	0xF2400B01  MOVW	R11, #1
; font_size end address is: 44 (R11)
;st7735.c, 515 :: 		}
0x0810	0xE7FF    B	L_print_char132
L__print_char218:
;st7735.c, 512 :: 		if(font_size < 0)
;st7735.c, 515 :: 		}
L_print_char132:
;st7735.c, 517 :: 		if(x_pos < font_size)
; font_size start address is: 44 (R11)
0x0812	0xF89D4008  LDRB	R4, [SP, #8]
0x0816	0x455C    CMP	R4, R11
0x0818	0xD201    BCS	L_print_char133
;st7735.c, 519 :: 		x_pos = font_size;
0x081A	0xF88DB008  STRB	R11, [SP, #8]
;st7735.c, 520 :: 		}
L_print_char133:
;st7735.c, 522 :: 		for (i = 0x00; i < 0x05; i++)
0x081E	0x2400    MOVS	R4, #0
0x0820	0xF88D4004  STRB	R4, [SP, #4]
; colour end address is: 12 (R3)
; font_size end address is: 44 (R11)
0x0824	0xB299    UXTH	R1, R3
0x0826	0xFA5FF08B  UXTB	R0, R11
L_print_char134:
; font_size start address is: 0 (R0)
; colour start address is: 4 (R1)
0x082A	0xF89D4004  LDRB	R4, [SP, #4]
0x082E	0x2C05    CMP	R4, #5
0x0830	0xD259    BCS	L_print_char135
;st7735.c, 524 :: 		for (j = 0x00; j < 0x08; j++)
0x0832	0x2400    MOVS	R4, #0
0x0834	0xF88D4005  STRB	R4, [SP, #5]
; font_size end address is: 0 (R0)
; colour end address is: 4 (R1)
0x0838	0xFA5FFB80  UXTB	R11, R0
0x083C	0xFA1FFC81  UXTH	R12, R1
L_print_char137:
; colour start address is: 48 (R12)
; font_size start address is: 44 (R11)
0x0840	0xF89D4005  LDRB	R4, [SP, #5]
0x0844	0x2C08    CMP	R4, #8
0x0846	0xD236    BCS	L_print_char138
;st7735.c, 527 :: 		value = ((font[((unsigned char)ch) - 0x20][i]));
0x0848	0xF89D4014  LDRB	R4, [SP, #20]
0x084C	0xF2A40520  SUBW	R5, R4, #32
0x0850	0xB22D    SXTH	R5, R5
0x0852	0x2405    MOVS	R4, #5
0x0854	0x4365    MULS	R5, R4, R5
0x0856	0x4C2A    LDR	R4, [PC, #168]
0x0858	0x1965    ADDS	R5, R4, R5
0x085A	0xF89D4004  LDRB	R4, [SP, #4]
0x085E	0x192C    ADDS	R4, R5, R4
0x0860	0x7825    LDRB	R5, [R4, #0]
;st7735.c, 529 :: 		if((value >> j)  & 0x01)
0x0862	0xF89D4005  LDRB	R4, [SP, #5]
0x0866	0xFA25F404  LSR	R4, R5, R4
0x086A	0xB2E4    UXTB	R4, R4
0x086C	0xF0040401  AND	R4, R4, #1
0x0870	0xB2E4    UXTB	R4, R4
0x0872	0xB154    CBZ	R4, L_print_char140
;st7735.c, 531 :: 		Draw_Font_Pixel(x_pos, y_pos, colour, font_size);
0x0874	0xFA5FF38B  UXTB	R3, R11
0x0878	0xFA1FF28C  UXTH	R2, R12
0x087C	0xF89D100C  LDRB	R1, [SP, #12]
0x0880	0xF89D0008  LDRB	R0, [SP, #8]
0x0884	0xF7FFFCA2  BL	_Draw_Font_Pixel+0
;st7735.c, 532 :: 		}
0x0888	0xE009    B	L_print_char141
L_print_char140:
;st7735.c, 535 :: 		Draw_Font_Pixel(x_pos, y_pos, back_colour, font_size);
0x088A	0xFA5FF38B  UXTB	R3, R11
0x088E	0xF8BD2010  LDRH	R2, [SP, #16]
0x0892	0xF89D100C  LDRB	R1, [SP, #12]
0x0896	0xF89D0008  LDRB	R0, [SP, #8]
0x089A	0xF7FFFC97  BL	_Draw_Font_Pixel+0
;st7735.c, 536 :: 		}
L_print_char141:
;st7735.c, 538 :: 		y_pos = y_pos + font_size;
0x089E	0xF89D400C  LDRB	R4, [SP, #12]
0x08A2	0xEB04040B  ADD	R4, R4, R11, LSL #0
0x08A6	0xF88D400C  STRB	R4, [SP, #12]
;st7735.c, 524 :: 		for (j = 0x00; j < 0x08; j++)
0x08AA	0xF89D4005  LDRB	R4, [SP, #5]
0x08AE	0x1C64    ADDS	R4, R4, #1
0x08B0	0xF88D4005  STRB	R4, [SP, #5]
;st7735.c, 539 :: 		}
0x08B4	0xE7C4    B	L_print_char137
L_print_char138:
;st7735.c, 540 :: 		y_pos -= (font_size << 0x03);
0x08B6	0xEA4F05CB  LSL	R5, R11, #3
0x08BA	0xB2AD    UXTH	R5, R5
0x08BC	0xF89D400C  LDRB	R4, [SP, #12]
0x08C0	0x1B64    SUB	R4, R4, R5
0x08C2	0xF88D400C  STRB	R4, [SP, #12]
;st7735.c, 541 :: 		x_pos += font_size;
0x08C6	0xF89D4008  LDRB	R4, [SP, #8]
0x08CA	0xEB04040B  ADD	R4, R4, R11, LSL #0
0x08CE	0xF88D4008  STRB	R4, [SP, #8]
;st7735.c, 522 :: 		for (i = 0x00; i < 0x05; i++)
0x08D2	0xF89D4004  LDRB	R4, [SP, #4]
0x08D6	0x1C64    ADDS	R4, R4, #1
0x08D8	0xF88D4004  STRB	R4, [SP, #4]
;st7735.c, 543 :: 		}
0x08DC	0xFA1FF18C  UXTH	R1, R12
; colour end address is: 48 (R12)
; font_size end address is: 44 (R11)
0x08E0	0xFA5FF08B  UXTB	R0, R11
0x08E4	0xE7A1    B	L_print_char134
L_print_char135:
;st7735.c, 544 :: 		x_pos += font_size;
; font_size start address is: 0 (R0)
0x08E6	0xF89D4008  LDRB	R4, [SP, #8]
0x08EA	0x1826    ADDS	R6, R4, R0
; font_size end address is: 0 (R0)
;st7735.c, 546 :: 		if(x_pos > w)
0x08EC	0x4C05    LDR	R4, [PC, #20]
0x08EE	0x7825    LDRB	R5, [R4, #0]
0x08F0	0xB2F4    UXTB	R4, R6
0x08F2	0x42AC    CMP	R4, R5
0x08F4	0xD9FF    BLS	L_print_char142
;st7735.c, 550 :: 		}
L_print_char142:
;st7735.c, 551 :: 		}
L_end_print_char:
0x08F6	0xF8DDE000  LDR	LR, [SP, #0]
0x08FA	0xB004    ADD	SP, SP, #16
0x08FC	0x4770    BX	LR
0x08FE	0xBF00    NOP
0x0900	0x1F700000  	ST7735s_demo_font+0
0x0904	0x00002000  	_w+0
; end of _print_char
_Draw_Font_Pixel:
;st7735.c, 492 :: 		void Draw_Font_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned int colour, unsigned char pixel_size)
; pixel_size start address is: 12 (R3)
; colour start address is: 8 (R2)
; y_pos start address is: 4 (R1)
; x_pos start address is: 0 (R0)
0x01CC	0xB081    SUB	SP, SP, #4
0x01CE	0xF8CDE000  STR	LR, [SP, #0]
0x01D2	0xFA1FFA82  UXTH	R10, R2
0x01D6	0xFA5FF983  UXTB	R9, R3
; pixel_size end address is: 12 (R3)
; colour end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
; x_pos start address is: 0 (R0)
; y_pos start address is: 4 (R1)
; colour start address is: 40 (R10)
; pixel_size start address is: 36 (R9)
;st7735.c, 494 :: 		unsigned char i = 0x00;
;st7735.c, 496 :: 		Set_Addr_Window(x_pos, y_pos, (x_pos + pixel_size - 1), (y_pos + pixel_size - 1));
0x01DA	0xEB010409  ADD	R4, R1, R9, LSL #0
0x01DE	0xB224    SXTH	R4, R4
0x01E0	0x1E65    SUBS	R5, R4, #1
0x01E2	0xEB000409  ADD	R4, R0, R9, LSL #0
0x01E6	0xB224    SXTH	R4, R4
0x01E8	0x1E64    SUBS	R4, R4, #1
0x01EA	0xB2EB    UXTB	R3, R5
0x01EC	0xB2E2    UXTB	R2, R4
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
0x01EE	0xF7FFFFB3  BL	_Set_Addr_Window+0
;st7735.c, 498 :: 		for(i = 0x00; i < (pixel_size * pixel_size); i++)
; i start address is: 24 (R6)
0x01F2	0x2600    MOVS	R6, #0
; colour end address is: 40 (R10)
; pixel_size end address is: 36 (R9)
; i end address is: 24 (R6)
0x01F4	0xFA1FF88A  UXTH	R8, R10
0x01F8	0xFA5FF789  UXTB	R7, R9
L_Draw_Font_Pixel129:
; i start address is: 24 (R6)
; colour start address is: 32 (R8)
; pixel_size start address is: 28 (R7)
; colour start address is: 32 (R8)
; colour end address is: 32 (R8)
0x01FC	0xFB07F407  MUL	R4, R7, R7
0x0200	0xB224    SXTH	R4, R4
0x0202	0x42A6    CMP	R6, R4
0x0204	0xDA06    BGE	L_Draw_Font_Pixel130
; colour end address is: 32 (R8)
;st7735.c, 500 :: 		ST7735_Word_Write(colour);
; colour start address is: 32 (R8)
0x0206	0xFA1FF088  UXTH	R0, R8
0x020A	0xF000F827  BL	_ST7735_Word_Write+0
;st7735.c, 498 :: 		for(i = 0x00; i < (pixel_size * pixel_size); i++)
0x020E	0x1C76    ADDS	R6, R6, #1
0x0210	0xB2F6    UXTB	R6, R6
;st7735.c, 501 :: 		}
; pixel_size end address is: 28 (R7)
; colour end address is: 32 (R8)
; i end address is: 24 (R6)
0x0212	0xE7F3    B	L_Draw_Font_Pixel129
L_Draw_Font_Pixel130:
;st7735.c, 502 :: 		}
L_end_Draw_Font_Pixel:
0x0214	0xF8DDE000  LDR	LR, [SP, #0]
0x0218	0xB001    ADD	SP, SP, #4
0x021A	0x4770    BX	LR
; end of _Draw_Font_Pixel
_print_F:
;st7735.c, 687 :: 		void print_F(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, float value, unsigned char points)
; colour start address is: 12 (R3)
; font_size start address is: 8 (R2)
; y_pos start address is: 4 (R1)
0x0F28	0xB089    SUB	SP, SP, #36
0x0F2A	0xF8CDE000  STR	LR, [SP, #0]
0x0F2E	0xF88D001C  STRB	R0, [SP, #28]
0x0F32	0xFA1FF983  UXTH	R9, R3
0x0F36	0xB2D3    UXTB	R3, R2
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; y_pos start address is: 4 (R1)
; font_size start address is: 12 (R3)
; colour start address is: 36 (R9)
; back_colour start address is: 40 (R10)
0x0F38	0xF8BDA024  LDRH	R10, [SP, #36]
; value start address is: 44 (R11)
0x0F3C	0xF8DDB028  LDR	R11, [SP, #40]
0x0F40	0xF89D402C  LDRB	R4, [SP, #44]
0x0F44	0xF88D402C  STRB	R4, [SP, #44]
;st7735.c, 689 :: 		signed long tmp = 0x0000;
;st7735.c, 691 :: 		tmp = value;
0x0F48	0xF88D1004  STRB	R1, [SP, #4]
0x0F4C	0x4658    MOV	R0, R11
0x0F4E	0xF7FFFB5B  BL	__FloatToSignedIntegral+0
0x0F52	0xF89D1004  LDRB	R1, [SP, #4]
0x0F56	0x9006    STR	R0, [SP, #24]
;st7735.c, 692 :: 		print_I(x_pos, y_pos, font_size, colour, back_colour, tmp);
0x0F58	0xB205    SXTH	R5, R0
0x0F5A	0xFA1FF48A  UXTH	R4, R10
0x0F5E	0xF8CDB004  STR	R11, [SP, #4]
0x0F62	0xF8ADA008  STRH	R10, [SP, #8]
0x0F66	0xF8AD900C  STRH	R9, [SP, #12]
0x0F6A	0xF88D3010  STRB	R3, [SP, #16]
0x0F6E	0xF88D1014  STRB	R1, [SP, #20]
0x0F72	0xB2DA    UXTB	R2, R3
0x0F74	0xFA1FF389  UXTH	R3, R9
0x0F78	0xF89D001C  LDRB	R0, [SP, #28]
0x0F7C	0xB420    PUSH	(R5)
0x0F7E	0xB410    PUSH	(R4)
0x0F80	0xF7FFFA04  BL	_print_I+0
0x0F84	0xB002    ADD	SP, SP, #8
0x0F86	0xF89D1014  LDRB	R1, [SP, #20]
0x0F8A	0xF89D3010  LDRB	R3, [SP, #16]
0x0F8E	0xF8BD900C  LDRH	R9, [SP, #12]
0x0F92	0xF8BDA008  LDRH	R10, [SP, #8]
0x0F96	0xF8DDB004  LDR	R11, [SP, #4]
;st7735.c, 693 :: 		tmp = ((value - tmp) * 10000);
0x0F9A	0xF88D1004  STRB	R1, [SP, #4]
0x0F9E	0x9806    LDR	R0, [SP, #24]
0x0FA0	0xF7FFF93C  BL	__SignedIntegralToFloat+0
0x0FA4	0xF89D1004  LDRB	R1, [SP, #4]
0x0FA8	0x9008    STR	R0, [SP, #32]
0x0FAA	0x9008    STR	R0, [SP, #32]
0x0FAC	0x9A08    LDR	R2, [SP, #32]
0x0FAE	0xF88D3004  STRB	R3, [SP, #4]
0x0FB2	0xF88D1008  STRB	R1, [SP, #8]
0x0FB6	0x4658    MOV	R0, R11
0x0FB8	0xF7FFF966  BL	__Sub_FP+0
0x0FBC	0x4A8E    LDR	R2, [PC, #568]
0x0FBE	0xF7FFFCA3  BL	__Mul_FP+0
0x0FC2	0xF89D1008  LDRB	R1, [SP, #8]
0x0FC6	0xF89D3004  LDRB	R3, [SP, #4]
0x0FCA	0xF88D1004  STRB	R1, [SP, #4]
0x0FCE	0xF7FFFB1B  BL	__FloatToSignedIntegral+0
0x0FD2	0xF89D1004  LDRB	R1, [SP, #4]
0x0FD6	0x9006    STR	R0, [SP, #24]
;st7735.c, 695 :: 		if(tmp < 0)
0x0FD8	0x2800    CMP	R0, #0
0x0FDA	0xDA02    BGE	L_print_F180
;st7735.c, 697 :: 		tmp = -tmp;
0x0FDC	0x9C06    LDR	R4, [SP, #24]
0x0FDE	0x4264    RSBS	R4, R4, #0
0x0FE0	0x9406    STR	R4, [SP, #24]
;st7735.c, 698 :: 		}
L_print_F180:
;st7735.c, 700 :: 		if((value >= 9999) && (value < 99999))
0x0FE2	0x4886    LDR	R0, [PC, #536]
0x0FE4	0x465A    MOV	R2, R11
0x0FE6	0xF7FFFDD5  BL	__Compare_FP+0
0x0FEA	0xF2400000  MOVW	R0, #0
0x0FEE	0xDC00    BGT	L__print_F277
0x0FF0	0x2001    MOVS	R0, #1
L__print_F277:
0x0FF2	0xB308    CBZ	R0, L__print_F245
0x0FF4	0x4882    LDR	R0, [PC, #520]
0x0FF6	0x465A    MOV	R2, R11
0x0FF8	0xF7FFFDCC  BL	__Compare_FP+0
0x0FFC	0xF2400000  MOVW	R0, #0
0x1000	0xDD00    BLE	L__print_F278
0x1002	0x2001    MOVS	R0, #1
L__print_F278:
0x1004	0xB1C0    CBZ	R0, L__print_F244
; value end address is: 44 (R11)
L__print_F243:
;st7735.c, 702 :: 		print_D((x_pos + (0x24 * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
0x1006	0xF89D802C  LDRB	R8, [SP, #44]
0x100A	0x9F06    LDR	R7, [SP, #24]
0x100C	0xFA1FF68A  UXTH	R6, R10
; back_colour end address is: 40 (R10)
0x1010	0x2424    MOVS	R4, #36
0x1012	0xB224    SXTH	R4, R4
0x1014	0xFB04F503  MUL	R5, R4, R3
0x1018	0xB22D    SXTH	R5, R5
0x101A	0xF89D401C  LDRB	R4, [SP, #28]
0x101E	0x1964    ADDS	R4, R4, R5
0x1020	0xB2DA    UXTB	R2, R3
; colour end address is: 36 (R9)
0x1022	0xFA1FF389  UXTH	R3, R9
; font_size end address is: 12 (R3)
; y_pos end address is: 4 (R1)
0x1026	0xB2E0    UXTB	R0, R4
0x1028	0xF84D8D04  PUSH	(R8)
0x102C	0xB480    PUSH	(R7)
0x102E	0xB440    PUSH	(R6)
0x1030	0xF7FFFD50  BL	_print_D+0
0x1034	0xB003    ADD	SP, SP, #12
;st7735.c, 703 :: 		}
0x1036	0xE0DB    B	L_print_F184
;st7735.c, 700 :: 		if((value >= 9999) && (value < 99999))
L__print_F245:
; value start address is: 44 (R11)
; back_colour start address is: 40 (R10)
; colour start address is: 36 (R9)
; font_size start address is: 12 (R3)
; y_pos start address is: 4 (R1)
L__print_F244:
;st7735.c, 704 :: 		else if((value >= 999) && (value < 9999))
0x1038	0x4872    LDR	R0, [PC, #456]
0x103A	0x465A    MOV	R2, R11
0x103C	0xF7FFFDAA  BL	__Compare_FP+0
0x1040	0xF2400000  MOVW	R0, #0
0x1044	0xDC00    BGT	L__print_F279
0x1046	0x2001    MOVS	R0, #1
L__print_F279:
0x1048	0xB308    CBZ	R0, L__print_F247
0x104A	0x486C    LDR	R0, [PC, #432]
0x104C	0x465A    MOV	R2, R11
0x104E	0xF7FFFDA1  BL	__Compare_FP+0
0x1052	0xF2400000  MOVW	R0, #0
0x1056	0xDD00    BLE	L__print_F280
0x1058	0x2001    MOVS	R0, #1
L__print_F280:
0x105A	0xB1C0    CBZ	R0, L__print_F246
; value end address is: 44 (R11)
L__print_F242:
;st7735.c, 706 :: 		print_D((x_pos + (0x1E * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
0x105C	0xF89D802C  LDRB	R8, [SP, #44]
0x1060	0x9F06    LDR	R7, [SP, #24]
0x1062	0xFA1FF68A  UXTH	R6, R10
; back_colour end address is: 40 (R10)
0x1066	0x241E    MOVS	R4, #30
0x1068	0xB224    SXTH	R4, R4
0x106A	0xFB04F503  MUL	R5, R4, R3
0x106E	0xB22D    SXTH	R5, R5
0x1070	0xF89D401C  LDRB	R4, [SP, #28]
0x1074	0x1964    ADDS	R4, R4, R5
0x1076	0xB2DA    UXTB	R2, R3
; colour end address is: 36 (R9)
0x1078	0xFA1FF389  UXTH	R3, R9
; font_size end address is: 12 (R3)
; y_pos end address is: 4 (R1)
0x107C	0xB2E0    UXTB	R0, R4
0x107E	0xF84D8D04  PUSH	(R8)
0x1082	0xB480    PUSH	(R7)
0x1084	0xB440    PUSH	(R6)
0x1086	0xF7FFFD25  BL	_print_D+0
0x108A	0xB003    ADD	SP, SP, #12
;st7735.c, 707 :: 		}
0x108C	0xE0B0    B	L_print_F188
;st7735.c, 704 :: 		else if((value >= 999) && (value < 9999))
L__print_F247:
; value start address is: 44 (R11)
; back_colour start address is: 40 (R10)
; colour start address is: 36 (R9)
; font_size start address is: 12 (R3)
; y_pos start address is: 4 (R1)
L__print_F246:
;st7735.c, 708 :: 		else if((value >= 99) && (value < 999))
0x108E	0x485E    LDR	R0, [PC, #376]
0x1090	0x465A    MOV	R2, R11
0x1092	0xF7FFFD7F  BL	__Compare_FP+0
0x1096	0xF2400000  MOVW	R0, #0
0x109A	0xDC00    BGT	L__print_F281
0x109C	0x2001    MOVS	R0, #1
L__print_F281:
0x109E	0xB308    CBZ	R0, L__print_F249
0x10A0	0x4858    LDR	R0, [PC, #352]
0x10A2	0x465A    MOV	R2, R11
0x10A4	0xF7FFFD76  BL	__Compare_FP+0
0x10A8	0xF2400000  MOVW	R0, #0
0x10AC	0xDD00    BLE	L__print_F282
0x10AE	0x2001    MOVS	R0, #1
L__print_F282:
0x10B0	0xB1C0    CBZ	R0, L__print_F248
; value end address is: 44 (R11)
L__print_F241:
;st7735.c, 710 :: 		print_D((x_pos + (0x18 * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
0x10B2	0xF89D802C  LDRB	R8, [SP, #44]
0x10B6	0x9F06    LDR	R7, [SP, #24]
0x10B8	0xFA1FF68A  UXTH	R6, R10
; back_colour end address is: 40 (R10)
0x10BC	0x2418    MOVS	R4, #24
0x10BE	0xB224    SXTH	R4, R4
0x10C0	0xFB04F503  MUL	R5, R4, R3
0x10C4	0xB22D    SXTH	R5, R5
0x10C6	0xF89D401C  LDRB	R4, [SP, #28]
0x10CA	0x1964    ADDS	R4, R4, R5
0x10CC	0xB2DA    UXTB	R2, R3
; colour end address is: 36 (R9)
0x10CE	0xFA1FF389  UXTH	R3, R9
; font_size end address is: 12 (R3)
; y_pos end address is: 4 (R1)
0x10D2	0xB2E0    UXTB	R0, R4
0x10D4	0xF84D8D04  PUSH	(R8)
0x10D8	0xB480    PUSH	(R7)
0x10DA	0xB440    PUSH	(R6)
0x10DC	0xF7FFFCFA  BL	_print_D+0
0x10E0	0xB003    ADD	SP, SP, #12
;st7735.c, 711 :: 		}
0x10E2	0xE085    B	L_print_F192
;st7735.c, 708 :: 		else if((value >= 99) && (value < 999))
L__print_F249:
; value start address is: 44 (R11)
; back_colour start address is: 40 (R10)
; colour start address is: 36 (R9)
; font_size start address is: 12 (R3)
; y_pos start address is: 4 (R1)
L__print_F248:
;st7735.c, 712 :: 		else if((value >= 9) && (value < 99))
0x10E4	0x4849    LDR	R0, [PC, #292]
0x10E6	0x465A    MOV	R2, R11
0x10E8	0xF7FFFD54  BL	__Compare_FP+0
0x10EC	0xF2400000  MOVW	R0, #0
0x10F0	0xDC00    BGT	L__print_F283
0x10F2	0x2001    MOVS	R0, #1
L__print_F283:
0x10F4	0xB308    CBZ	R0, L__print_F251
0x10F6	0x4844    LDR	R0, [PC, #272]
0x10F8	0x465A    MOV	R2, R11
0x10FA	0xF7FFFD4B  BL	__Compare_FP+0
0x10FE	0xF2400000  MOVW	R0, #0
0x1102	0xDD00    BLE	L__print_F284
0x1104	0x2001    MOVS	R0, #1
L__print_F284:
0x1106	0xB1C0    CBZ	R0, L__print_F250
; value end address is: 44 (R11)
L__print_F240:
;st7735.c, 714 :: 		print_D((x_pos + (0x12 * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
0x1108	0xF89D802C  LDRB	R8, [SP, #44]
0x110C	0x9F06    LDR	R7, [SP, #24]
0x110E	0xFA1FF68A  UXTH	R6, R10
; back_colour end address is: 40 (R10)
0x1112	0x2412    MOVS	R4, #18
0x1114	0xB224    SXTH	R4, R4
0x1116	0xFB04F503  MUL	R5, R4, R3
0x111A	0xB22D    SXTH	R5, R5
0x111C	0xF89D401C  LDRB	R4, [SP, #28]
0x1120	0x1964    ADDS	R4, R4, R5
0x1122	0xB2DA    UXTB	R2, R3
; colour end address is: 36 (R9)
0x1124	0xFA1FF389  UXTH	R3, R9
; font_size end address is: 12 (R3)
; y_pos end address is: 4 (R1)
0x1128	0xB2E0    UXTB	R0, R4
0x112A	0xF84D8D04  PUSH	(R8)
0x112E	0xB480    PUSH	(R7)
0x1130	0xB440    PUSH	(R6)
0x1132	0xF7FFFCCF  BL	_print_D+0
0x1136	0xB003    ADD	SP, SP, #12
;st7735.c, 715 :: 		}
0x1138	0xE05A    B	L_print_F196
;st7735.c, 712 :: 		else if((value >= 9) && (value < 99))
L__print_F251:
; value start address is: 44 (R11)
; back_colour start address is: 40 (R10)
; colour start address is: 36 (R9)
; font_size start address is: 12 (R3)
; y_pos start address is: 4 (R1)
L__print_F250:
;st7735.c, 716 :: 		else if(value < 9)
0x113A	0x4834    LDR	R0, [PC, #208]
0x113C	0x465A    MOV	R2, R11
0x113E	0xF7FFFD29  BL	__Compare_FP+0
0x1142	0xF2400000  MOVW	R0, #0
0x1146	0xDD00    BLE	L__print_F285
0x1148	0x2001    MOVS	R0, #1
L__print_F285:
0x114A	0x2800    CMP	R0, #0
0x114C	0xD050    BEQ	L_print_F197
;st7735.c, 718 :: 		print_D((x_pos + (0x0C * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
0x114E	0xF89D802C  LDRB	R8, [SP, #44]
0x1152	0x9F06    LDR	R7, [SP, #24]
0x1154	0xFA1FF68A  UXTH	R6, R10
0x1158	0x240C    MOVS	R4, #12
0x115A	0xB224    SXTH	R4, R4
0x115C	0xFB04F503  MUL	R5, R4, R3
0x1160	0xB22D    SXTH	R5, R5
0x1162	0xF89D401C  LDRB	R4, [SP, #28]
0x1166	0x1964    ADDS	R4, R4, R5
0x1168	0xF8CDB004  STR	R11, [SP, #4]
0x116C	0xF8ADA008  STRH	R10, [SP, #8]
0x1170	0xF8AD900C  STRH	R9, [SP, #12]
0x1174	0xF88D3010  STRB	R3, [SP, #16]
0x1178	0xF88D1014  STRB	R1, [SP, #20]
0x117C	0xB2DA    UXTB	R2, R3
0x117E	0xFA1FF389  UXTH	R3, R9
0x1182	0xB2E0    UXTB	R0, R4
0x1184	0xF84D8D04  PUSH	(R8)
0x1188	0xB480    PUSH	(R7)
0x118A	0xB440    PUSH	(R6)
0x118C	0xF7FFFCA2  BL	_print_D+0
0x1190	0xB003    ADD	SP, SP, #12
0x1192	0xF89D1014  LDRB	R1, [SP, #20]
0x1196	0xF89D3010  LDRB	R3, [SP, #16]
0x119A	0xF8BD900C  LDRH	R9, [SP, #12]
0x119E	0xF8BDA008  LDRH	R10, [SP, #8]
0x11A2	0xF8DDB004  LDR	R11, [SP, #4]
;st7735.c, 720 :: 		if((value) < 0)
0x11A6	0xF04F0000  MOV	R0, #0
0x11AA	0x465A    MOV	R2, R11
0x11AC	0xF7FFFCF2  BL	__Compare_FP+0
0x11B0	0xF2400000  MOVW	R0, #0
0x11B4	0xDD00    BLE	L__print_F286
0x11B6	0x2001    MOVS	R0, #1
L__print_F286:
; value end address is: 44 (R11)
0x11B8	0xB168    CBZ	R0, L_print_F198
;st7735.c, 722 :: 		print_char(x_pos, y_pos, font_size, colour, back_colour, 0x2D);
0x11BA	0x252D    MOVS	R5, #45
0x11BC	0xFA1FF48A  UXTH	R4, R10
; back_colour end address is: 40 (R10)
0x11C0	0xB2DA    UXTB	R2, R3
; colour end address is: 36 (R9)
0x11C2	0xFA1FF389  UXTH	R3, R9
; font_size end address is: 12 (R3)
; y_pos end address is: 4 (R1)
0x11C6	0xF89D001C  LDRB	R0, [SP, #28]
0x11CA	0xB420    PUSH	(R5)
0x11CC	0xB410    PUSH	(R4)
0x11CE	0xF7FFFB09  BL	_print_char+0
0x11D2	0xB002    ADD	SP, SP, #8
;st7735.c, 723 :: 		}
0x11D4	0xE00C    B	L_print_F199
L_print_F198:
;st7735.c, 726 :: 		print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
; back_colour start address is: 40 (R10)
; colour start address is: 36 (R9)
; font_size start address is: 12 (R3)
; y_pos start address is: 4 (R1)
0x11D6	0x2520    MOVS	R5, #32
0x11D8	0xFA1FF48A  UXTH	R4, R10
; back_colour end address is: 40 (R10)
0x11DC	0xB2DA    UXTB	R2, R3
; colour end address is: 36 (R9)
0x11DE	0xFA1FF389  UXTH	R3, R9
; font_size end address is: 12 (R3)
; y_pos end address is: 4 (R1)
0x11E2	0xF89D001C  LDRB	R0, [SP, #28]
0x11E6	0xB420    PUSH	(R5)
0x11E8	0xB410    PUSH	(R4)
0x11EA	0xF7FFFAFB  BL	_print_char+0
0x11EE	0xB002    ADD	SP, SP, #8
;st7735.c, 727 :: 		}
L_print_F199:
;st7735.c, 728 :: 		}
L_print_F197:
L_print_F196:
L_print_F192:
L_print_F188:
L_print_F184:
;st7735.c, 729 :: 		}
L_end_print_F:
0x11F0	0xF8DDE000  LDR	LR, [SP, #0]
0x11F4	0xB009    ADD	SP, SP, #36
0x11F6	0x4770    BX	LR
0x11F8	0x4000461C  	#1176256512
0x11FC	0x3C00461C  	#1176255488
0x1200	0x4F8047C3  	#1203982208
0x1204	0xC0004479  	#1148829696
0x1208	0x000042C6  	#1120272384
0x120C	0x00004110  	#1091567616
; end of _print_F
__FloatToSignedIntegral:
;__Lib_MathDouble.c, 4 :: 		
0x0608	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 6 :: 		
0x060A	0xB506    PUSH	(R1, R2, R14)
;__Lib_MathDouble.c, 8 :: 		
0x060C	0xEA4F0240  LSL	R2, R0, #1
;__Lib_MathDouble.c, 9 :: 		
0x0610	0xEA4F6212  LSR	R2, R2, #24
;__Lib_MathDouble.c, 11 :: 		
0x0614	0x3A7F    SUBS	R2, #127
;__Lib_MathDouble.c, 12 :: 		
0x0616	0xBF44    ITT	MI
;__Lib_MathDouble.c, 13 :: 		
0x0618	0xF04F0000  MOVMI	R0, #0
;__Lib_MathDouble.c, 15 :: 		
0x061C	0xE011    BMI	__me_lab_end
;__Lib_MathDouble.c, 17 :: 		
0x061E	0xF1D2021F  RSBS	R2, R2, #31
;__Lib_MathDouble.c, 18 :: 		
0x0622	0xD909    BLS	__me_ovfl
;__Lib_MathDouble.c, 20 :: 		
0x0624	0xEA4F2100  LSL	R1, R0, #8
;__Lib_MathDouble.c, 21 :: 		
0x0628	0xF0414100  ORR	R1, R1, #-2147483648
;__Lib_MathDouble.c, 23 :: 		
0x062C	0x40D1    LSRS	R1, R2
;__Lib_MathDouble.c, 25 :: 		
0x062E	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 26 :: 		
0x0630	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 27 :: 		
0x0632	0x4248    RSBMI	R0, R1, #0
;__Lib_MathDouble.c, 28 :: 		
0x0634	0x4608    MOVPL	R0, R1
;__Lib_MathDouble.c, 31 :: 		
0x0636	0xE004    B	__me_lab_end
;__Lib_MathDouble.c, 33 :: 		
__me_ovfl:
0x0638	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 34 :: 		
0x063A	0xF04F4000  MOV	R0, #-2147483648
;__Lib_MathDouble.c, 35 :: 		
0x063E	0xBF58    IT	PL
;__Lib_MathDouble.c, 36 :: 		
0x0640	0x1E40    SUBPL	R0, R0, #1
;__Lib_MathDouble.c, 37 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 38 :: 		
0x0642	0xE8BD4006  POP	(R1, R2, R14)
;__Lib_MathDouble.c, 40 :: 		
L_end__FloatToSignedIntegral:
0x0646	0xB001    ADD	SP, SP, #4
0x0648	0x4770    BX	LR
; end of __FloatToSignedIntegral
_print_I:
;st7735.c, 602 :: 		void print_I(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, signed int value)
; colour start address is: 12 (R3)
; font_size start address is: 8 (R2)
; y_pos start address is: 4 (R1)
; x_pos start address is: 0 (R0)
0x038C	0xB083    SUB	SP, SP, #12
0x038E	0xF8CDE000  STR	LR, [SP, #0]
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
; x_pos start address is: 0 (R0)
; y_pos start address is: 4 (R1)
; font_size start address is: 8 (R2)
; colour start address is: 12 (R3)
; back_colour start address is: 32 (R8)
0x0392	0xF8BD800C  LDRH	R8, [SP, #12]
; value start address is: 24 (R6)
0x0396	0xF9BD6010  LDRSH	R6, [SP, #16]
;st7735.c, 604 :: 		unsigned char ch[6] = {0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
0x039A	0x2420    MOVS	R4, #32
0x039C	0xF88D4004  STRB	R4, [SP, #4]
0x03A0	0x2420    MOVS	R4, #32
0x03A2	0xF88D4005  STRB	R4, [SP, #5]
0x03A6	0x2420    MOVS	R4, #32
0x03A8	0xF88D4006  STRB	R4, [SP, #6]
0x03AC	0x2420    MOVS	R4, #32
0x03AE	0xF88D4007  STRB	R4, [SP, #7]
0x03B2	0x2420    MOVS	R4, #32
0x03B4	0xF88D4008  STRB	R4, [SP, #8]
0x03B8	0x2420    MOVS	R4, #32
0x03BA	0xF88D4009  STRB	R4, [SP, #9]
;st7735.c, 606 :: 		if(value < 0)
0x03BE	0x2E00    CMP	R6, #0
0x03C0	0xDA07    BGE	L_print_I161
;st7735.c, 608 :: 		ch[0] = 0x2D;
0x03C2	0xAD01    ADD	R5, SP, #4
0x03C4	0x242D    MOVS	R4, #45
0x03C6	0x702C    STRB	R4, [R5, #0]
;st7735.c, 609 :: 		value = -value;
0x03C8	0xF1C60900  RSB	R9, R6, #0
0x03CC	0xFA0FF989  SXTH	R9, R9
; value end address is: 24 (R6)
; value start address is: 36 (R9)
;st7735.c, 610 :: 		}
; value end address is: 36 (R9)
0x03D0	0xE004    B	L_print_I162
L_print_I161:
;st7735.c, 613 :: 		ch[0] = 0x20;
; value start address is: 24 (R6)
0x03D2	0xAD01    ADD	R5, SP, #4
0x03D4	0x2420    MOVS	R4, #32
0x03D6	0x702C    STRB	R4, [R5, #0]
; value end address is: 24 (R6)
0x03D8	0xFA0FF986  SXTH	R9, R6
;st7735.c, 614 :: 		}
L_print_I162:
;st7735.c, 616 :: 		if(value > 9999)
; value start address is: 36 (R9)
0x03DC	0xF242740F  MOVW	R4, #9999
0x03E0	0x45A1    CMP	R9, R4
0x03E2	0xDD44    BLE	L_print_I163
;st7735.c, 618 :: 		ch[1] = ((value / 10000) + 0x30);
0x03E4	0xAF01    ADD	R7, SP, #4
0x03E6	0x1C7D    ADDS	R5, R7, #1
0x03E8	0xF2427410  MOVW	R4, #10000
0x03EC	0xB224    SXTH	R4, R4
0x03EE	0xFB99F4F4  SDIV	R4, R9, R4
0x03F2	0xB224    SXTH	R4, R4
0x03F4	0x3430    ADDS	R4, #48
0x03F6	0x702C    STRB	R4, [R5, #0]
;st7735.c, 619 :: 		ch[2] = (((value % 10000)/ 1000) + 0x30);
0x03F8	0x1CBE    ADDS	R6, R7, #2
0x03FA	0xF2427410  MOVW	R4, #10000
0x03FE	0xB224    SXTH	R4, R4
0x0400	0xFB99F5F4  SDIV	R5, R9, R4
0x0404	0xFB049515  MLS	R5, R4, R5, R9
0x0408	0xB22D    SXTH	R5, R5
0x040A	0xF24034E8  MOVW	R4, #1000
0x040E	0xB224    SXTH	R4, R4
0x0410	0xFB95F4F4  SDIV	R4, R5, R4
0x0414	0xB224    SXTH	R4, R4
0x0416	0x3430    ADDS	R4, #48
0x0418	0x7034    STRB	R4, [R6, #0]
;st7735.c, 620 :: 		ch[3] = (((value % 1000) / 100) + 0x30);
0x041A	0x1CFE    ADDS	R6, R7, #3
0x041C	0xF24034E8  MOVW	R4, #1000
0x0420	0xB224    SXTH	R4, R4
0x0422	0xFB99F5F4  SDIV	R5, R9, R4
0x0426	0xFB049515  MLS	R5, R4, R5, R9
0x042A	0xB22D    SXTH	R5, R5
0x042C	0x2464    MOVS	R4, #100
0x042E	0xB224    SXTH	R4, R4
0x0430	0xFB95F4F4  SDIV	R4, R5, R4
0x0434	0xB224    SXTH	R4, R4
0x0436	0x3430    ADDS	R4, #48
0x0438	0x7034    STRB	R4, [R6, #0]
;st7735.c, 621 :: 		ch[4] = (((value % 100) / 10) + 0x30);
0x043A	0x1D3E    ADDS	R6, R7, #4
0x043C	0x2464    MOVS	R4, #100
0x043E	0xB224    SXTH	R4, R4
0x0440	0xFB99F5F4  SDIV	R5, R9, R4
0x0444	0xFB049515  MLS	R5, R4, R5, R9
0x0448	0xB22D    SXTH	R5, R5
0x044A	0x240A    MOVS	R4, #10
0x044C	0xB224    SXTH	R4, R4
0x044E	0xFB95F4F4  SDIV	R4, R5, R4
0x0452	0xB224    SXTH	R4, R4
0x0454	0x3430    ADDS	R4, #48
0x0456	0x7034    STRB	R4, [R6, #0]
;st7735.c, 622 :: 		ch[5] = ((value % 10) + 0x30);
0x0458	0x1D7E    ADDS	R6, R7, #5
0x045A	0x250A    MOVS	R5, #10
0x045C	0xB22D    SXTH	R5, R5
0x045E	0xFB99F4F5  SDIV	R4, R9, R5
0x0462	0xFB059414  MLS	R4, R5, R4, R9
0x0466	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x0468	0x3430    ADDS	R4, #48
0x046A	0x7034    STRB	R4, [R6, #0]
;st7735.c, 623 :: 		}
0x046C	0xE0BF    B	L_print_I164
L_print_I163:
;st7735.c, 625 :: 		else if((value > 999) && (value <= 9999))
; value start address is: 36 (R9)
0x046E	0xF24034E7  MOVW	R4, #999
0x0472	0x45A1    CMP	R9, R4
0x0474	0xDD42    BLE	L__print_I235
0x0476	0xF242740F  MOVW	R4, #9999
0x047A	0x45A1    CMP	R9, R4
0x047C	0xDC3E    BGT	L__print_I234
L__print_I233:
;st7735.c, 627 :: 		ch[1] = (((value % 10000)/ 1000) + 0x30);
0x047E	0xAF01    ADD	R7, SP, #4
0x0480	0x1C7E    ADDS	R6, R7, #1
0x0482	0xF2427410  MOVW	R4, #10000
0x0486	0xB224    SXTH	R4, R4
0x0488	0xFB99F5F4  SDIV	R5, R9, R4
0x048C	0xFB049515  MLS	R5, R4, R5, R9
0x0490	0xB22D    SXTH	R5, R5
0x0492	0xF24034E8  MOVW	R4, #1000
0x0496	0xB224    SXTH	R4, R4
0x0498	0xFB95F4F4  SDIV	R4, R5, R4
0x049C	0xB224    SXTH	R4, R4
0x049E	0x3430    ADDS	R4, #48
0x04A0	0x7034    STRB	R4, [R6, #0]
;st7735.c, 628 :: 		ch[2] = (((value % 1000) / 100) + 0x30);
0x04A2	0x1CBE    ADDS	R6, R7, #2
0x04A4	0xF24034E8  MOVW	R4, #1000
0x04A8	0xB224    SXTH	R4, R4
0x04AA	0xFB99F5F4  SDIV	R5, R9, R4
0x04AE	0xFB049515  MLS	R5, R4, R5, R9
0x04B2	0xB22D    SXTH	R5, R5
0x04B4	0x2464    MOVS	R4, #100
0x04B6	0xB224    SXTH	R4, R4
0x04B8	0xFB95F4F4  SDIV	R4, R5, R4
0x04BC	0xB224    SXTH	R4, R4
0x04BE	0x3430    ADDS	R4, #48
0x04C0	0x7034    STRB	R4, [R6, #0]
;st7735.c, 629 :: 		ch[3] = (((value % 100) / 10) + 0x30);
0x04C2	0x1CFE    ADDS	R6, R7, #3
0x04C4	0x2464    MOVS	R4, #100
0x04C6	0xB224    SXTH	R4, R4
0x04C8	0xFB99F5F4  SDIV	R5, R9, R4
0x04CC	0xFB049515  MLS	R5, R4, R5, R9
0x04D0	0xB22D    SXTH	R5, R5
0x04D2	0x240A    MOVS	R4, #10
0x04D4	0xB224    SXTH	R4, R4
0x04D6	0xFB95F4F4  SDIV	R4, R5, R4
0x04DA	0xB224    SXTH	R4, R4
0x04DC	0x3430    ADDS	R4, #48
0x04DE	0x7034    STRB	R4, [R6, #0]
;st7735.c, 630 :: 		ch[4] = ((value % 10) + 0x30);
0x04E0	0x1D3E    ADDS	R6, R7, #4
0x04E2	0x250A    MOVS	R5, #10
0x04E4	0xB22D    SXTH	R5, R5
0x04E6	0xFB99F4F5  SDIV	R4, R9, R5
0x04EA	0xFB059414  MLS	R4, R5, R4, R9
0x04EE	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x04F0	0x3430    ADDS	R4, #48
0x04F2	0x7034    STRB	R4, [R6, #0]
;st7735.c, 631 :: 		ch[5] = 0x20;
0x04F4	0x1D7D    ADDS	R5, R7, #5
0x04F6	0x2420    MOVS	R4, #32
0x04F8	0x702C    STRB	R4, [R5, #0]
;st7735.c, 632 :: 		}
0x04FA	0xE078    B	L_print_I168
;st7735.c, 625 :: 		else if((value > 999) && (value <= 9999))
L__print_I235:
; value start address is: 36 (R9)
L__print_I234:
;st7735.c, 633 :: 		else if((value > 99) && (value <= 999))
0x04FC	0xF1B90F63  CMP	R9, #99
0x0500	0xDD34    BLE	L__print_I237
0x0502	0xF24034E7  MOVW	R4, #999
0x0506	0x45A1    CMP	R9, R4
0x0508	0xDC30    BGT	L__print_I236
L__print_I232:
;st7735.c, 635 :: 		ch[1] = (((value % 1000) / 100) + 0x30);
0x050A	0xAF01    ADD	R7, SP, #4
0x050C	0x1C7E    ADDS	R6, R7, #1
0x050E	0xF24034E8  MOVW	R4, #1000
0x0512	0xB224    SXTH	R4, R4
0x0514	0xFB99F5F4  SDIV	R5, R9, R4
0x0518	0xFB049515  MLS	R5, R4, R5, R9
0x051C	0xB22D    SXTH	R5, R5
0x051E	0x2464    MOVS	R4, #100
0x0520	0xB224    SXTH	R4, R4
0x0522	0xFB95F4F4  SDIV	R4, R5, R4
0x0526	0xB224    SXTH	R4, R4
0x0528	0x3430    ADDS	R4, #48
0x052A	0x7034    STRB	R4, [R6, #0]
;st7735.c, 636 :: 		ch[2] = (((value % 100) / 10) + 0x30);
0x052C	0x1CBE    ADDS	R6, R7, #2
0x052E	0x2464    MOVS	R4, #100
0x0530	0xB224    SXTH	R4, R4
0x0532	0xFB99F5F4  SDIV	R5, R9, R4
0x0536	0xFB049515  MLS	R5, R4, R5, R9
0x053A	0xB22D    SXTH	R5, R5
0x053C	0x240A    MOVS	R4, #10
0x053E	0xB224    SXTH	R4, R4
0x0540	0xFB95F4F4  SDIV	R4, R5, R4
0x0544	0xB224    SXTH	R4, R4
0x0546	0x3430    ADDS	R4, #48
0x0548	0x7034    STRB	R4, [R6, #0]
;st7735.c, 637 :: 		ch[3] = ((value % 10) + 0x30);
0x054A	0x1CFE    ADDS	R6, R7, #3
0x054C	0x250A    MOVS	R5, #10
0x054E	0xB22D    SXTH	R5, R5
0x0550	0xFB99F4F5  SDIV	R4, R9, R5
0x0554	0xFB059414  MLS	R4, R5, R4, R9
0x0558	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x055A	0x3430    ADDS	R4, #48
0x055C	0x7034    STRB	R4, [R6, #0]
;st7735.c, 638 :: 		ch[4] = 0x20;
0x055E	0x1D3D    ADDS	R5, R7, #4
0x0560	0x2420    MOVS	R4, #32
0x0562	0x702C    STRB	R4, [R5, #0]
;st7735.c, 639 :: 		ch[5] = 0x20;
0x0564	0x1D7D    ADDS	R5, R7, #5
0x0566	0x2420    MOVS	R4, #32
0x0568	0x702C    STRB	R4, [R5, #0]
;st7735.c, 640 :: 		}
0x056A	0xE040    B	L_print_I172
;st7735.c, 633 :: 		else if((value > 99) && (value <= 999))
L__print_I237:
; value start address is: 36 (R9)
L__print_I236:
;st7735.c, 641 :: 		else if((value > 9) && (value <= 99))
0x056C	0xF1B90F09  CMP	R9, #9
0x0570	0xDD26    BLE	L__print_I239
0x0572	0xF1B90F63  CMP	R9, #99
0x0576	0xDC23    BGT	L__print_I238
L__print_I231:
;st7735.c, 643 :: 		ch[1] = (((value % 100) / 10) + 0x30);
0x0578	0xAF01    ADD	R7, SP, #4
0x057A	0x1C7E    ADDS	R6, R7, #1
0x057C	0x2464    MOVS	R4, #100
0x057E	0xB224    SXTH	R4, R4
0x0580	0xFB99F5F4  SDIV	R5, R9, R4
0x0584	0xFB049515  MLS	R5, R4, R5, R9
0x0588	0xB22D    SXTH	R5, R5
0x058A	0x240A    MOVS	R4, #10
0x058C	0xB224    SXTH	R4, R4
0x058E	0xFB95F4F4  SDIV	R4, R5, R4
0x0592	0xB224    SXTH	R4, R4
0x0594	0x3430    ADDS	R4, #48
0x0596	0x7034    STRB	R4, [R6, #0]
;st7735.c, 644 :: 		ch[2] = ((value % 10) + 0x30);
0x0598	0x1CBE    ADDS	R6, R7, #2
0x059A	0x250A    MOVS	R5, #10
0x059C	0xB22D    SXTH	R5, R5
0x059E	0xFB99F4F5  SDIV	R4, R9, R5
0x05A2	0xFB059414  MLS	R4, R5, R4, R9
0x05A6	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x05A8	0x3430    ADDS	R4, #48
0x05AA	0x7034    STRB	R4, [R6, #0]
;st7735.c, 645 :: 		ch[3] = 0x20;
0x05AC	0x1CFD    ADDS	R5, R7, #3
0x05AE	0x2420    MOVS	R4, #32
0x05B0	0x702C    STRB	R4, [R5, #0]
;st7735.c, 646 :: 		ch[4] = 0x20;
0x05B2	0x1D3D    ADDS	R5, R7, #4
0x05B4	0x2420    MOVS	R4, #32
0x05B6	0x702C    STRB	R4, [R5, #0]
;st7735.c, 647 :: 		ch[5] = 0x20;
0x05B8	0x1D7D    ADDS	R5, R7, #5
0x05BA	0x2420    MOVS	R4, #32
0x05BC	0x702C    STRB	R4, [R5, #0]
;st7735.c, 648 :: 		}
0x05BE	0xE016    B	L_print_I176
;st7735.c, 641 :: 		else if((value > 9) && (value <= 99))
L__print_I239:
; value start address is: 36 (R9)
L__print_I238:
;st7735.c, 651 :: 		ch[1] = ((value % 10) + 0x30);
0x05C0	0xAF01    ADD	R7, SP, #4
0x05C2	0x1C7E    ADDS	R6, R7, #1
0x05C4	0x250A    MOVS	R5, #10
0x05C6	0xB22D    SXTH	R5, R5
0x05C8	0xFB99F4F5  SDIV	R4, R9, R5
0x05CC	0xFB059414  MLS	R4, R5, R4, R9
0x05D0	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x05D2	0x3430    ADDS	R4, #48
0x05D4	0x7034    STRB	R4, [R6, #0]
;st7735.c, 652 :: 		ch[2] = 0x20;
0x05D6	0x1CBD    ADDS	R5, R7, #2
0x05D8	0x2420    MOVS	R4, #32
0x05DA	0x702C    STRB	R4, [R5, #0]
;st7735.c, 653 :: 		ch[3] = 0x20;
0x05DC	0x1CFD    ADDS	R5, R7, #3
0x05DE	0x2420    MOVS	R4, #32
0x05E0	0x702C    STRB	R4, [R5, #0]
;st7735.c, 654 :: 		ch[4] = 0x20;
0x05E2	0x1D3D    ADDS	R5, R7, #4
0x05E4	0x2420    MOVS	R4, #32
0x05E6	0x702C    STRB	R4, [R5, #0]
;st7735.c, 655 :: 		ch[5] = 0x20;
0x05E8	0x1D7D    ADDS	R5, R7, #5
0x05EA	0x2420    MOVS	R4, #32
0x05EC	0x702C    STRB	R4, [R5, #0]
;st7735.c, 656 :: 		}
L_print_I176:
L_print_I172:
L_print_I168:
L_print_I164:
;st7735.c, 658 :: 		print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
0x05EE	0xAD01    ADD	R5, SP, #4
0x05F0	0xFA1FF488  UXTH	R4, R8
; back_colour end address is: 32 (R8)
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
0x05F4	0xB420    PUSH	(R5)
0x05F6	0xB410    PUSH	(R4)
0x05F8	0xF001F8CC  BL	_print_str+0
0x05FC	0xB002    ADD	SP, SP, #8
;st7735.c, 659 :: 		}
L_end_print_I:
0x05FE	0xF8DDE000  LDR	LR, [SP, #0]
0x0602	0xB003    ADD	SP, SP, #12
0x0604	0x4770    BX	LR
; end of _print_I
__SignedIntegralToFloat:
;__Lib_MathDouble.c, 186 :: 		
0x021C	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 188 :: 		
0x021E	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 189 :: 		
0x0220	0xBF08    IT	EQ
;__Lib_MathDouble.c, 191 :: 		
0x0222	0xE019    BEQ	__me_lab_end
;__Lib_MathDouble.c, 193 :: 		
0x0224	0xB506    PUSH	(R1, R2, R14)
;__Lib_MathDouble.c, 195 :: 		
0x0226	0xBF54    ITE	PL
;__Lib_MathDouble.c, 196 :: 		
0x0228	0x4601    MOVPL	R1, R0
;__Lib_MathDouble.c, 197 :: 		
0x022A	0xF1D00100  RSBSMI	R1, R0, #0
;__Lib_MathDouble.c, 199 :: 		
0x022E	0xF04F029E  MOV	R2, #158
;__Lib_MathDouble.c, 201 :: 		
0x0232	0xD402    BMI	__me_lab1
;__Lib_MathDouble.c, 202 :: 		
__me_loop:
0x0234	0x1E52    SUBS	R2, R2, #1
;__Lib_MathDouble.c, 203 :: 		
0x0236	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 204 :: 		
0x0238	0xD5FC    BPL	__me_loop
;__Lib_MathDouble.c, 206 :: 		
__me_lab1:
0x023A	0x3180    ADDS	R1, #128
;__Lib_MathDouble.c, 207 :: 		
0x023C	0xBF2C    ITE	CS
;__Lib_MathDouble.c, 208 :: 		
0x023E	0x1C52    ADDCS	R2, R2, #1
;__Lib_MathDouble.c, 209 :: 		
0x0240	0x0049    LSLCC	R1, R1, #1
;__Lib_MathDouble.c, 211 :: 		
0x0242	0xEA4F2151  LSR	R1, R1, #9
;__Lib_MathDouble.c, 212 :: 		
0x0246	0xEA4151C2  ORR	R1, R1, R2, LSL #23
;__Lib_MathDouble.c, 213 :: 		
0x024A	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 214 :: 		
0x024C	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 215 :: 		
0x024E	0xF0414000  ORRMI	R0, R1, #-2147483648
;__Lib_MathDouble.c, 216 :: 		
0x0252	0x4608    MOVPL	R0, R1
;__Lib_MathDouble.c, 218 :: 		
0x0254	0xE8BD4006  POP	(R1, R2, R14)
;__Lib_MathDouble.c, 219 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 221 :: 		
L_end__SignedIntegralToFloat:
0x0258	0xB001    ADD	SP, SP, #4
0x025A	0x4770    BX	LR
; end of __SignedIntegralToFloat
__Sub_FP:
;__Lib_MathDouble.c, 539 :: 		
0x0288	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 541 :: 		
0x028A	0xF0824200  EOR	R2, R2, #-2147483648
;__Lib_MathDouble.c, 542 :: 		
0x028E	0xE92D41FA  PUSH	(R1, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 544 :: 		
0x0292	0xEA4F2402  LSL	R4, R2, #8
;__Lib_MathDouble.c, 545 :: 		
0x0296	0xEA4F0542  LSL	R5, R2, #1
;__Lib_MathDouble.c, 546 :: 		
0x029A	0x0E2D    LSRS	R5, R5, #24
;__Lib_MathDouble.c, 547 :: 		
0x029C	0xD104    BNE	__me_lab1
;__Lib_MathDouble.c, 549 :: 		
0x029E	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 550 :: 		
0x02A0	0xBF18    IT	NE
;__Lib_MathDouble.c, 551 :: 		
0x02A2	0xF04F0000  MOVNE	R0, #0
;__Lib_MathDouble.c, 553 :: 		
0x02A6	0xE06C    B	__me_lab_end
;__Lib_MathDouble.c, 555 :: 		
__me_lab1:
0x02A8	0xF0444400  ORR	R4, R4, #-2147483648
;__Lib_MathDouble.c, 557 :: 		
0x02AC	0x2DFF    CMP	R5, #255
;__Lib_MathDouble.c, 559 :: 		
0x02AE	0xD05F    BEQ	__me_ovfl1
;__Lib_MathDouble.c, 561 :: 		
0x02B0	0xEA4F0494  LSR	R4, R4, #2
;__Lib_MathDouble.c, 562 :: 		
0x02B4	0x2A00    CMP	R2, #0
;__Lib_MathDouble.c, 563 :: 		
0x02B6	0xBF48    IT	MI
;__Lib_MathDouble.c, 564 :: 		
0x02B8	0x4264    RSBMI	R4, R4, #0
;__Lib_MathDouble.c, 566 :: 		
0x02BA	0xEA4F2100  LSL	R1, R0, #8
;__Lib_MathDouble.c, 567 :: 		
0x02BE	0xEA4F0340  LSL	R3, R0, #1
;__Lib_MathDouble.c, 568 :: 		
0x02C2	0x0E1B    LSRS	R3, R3, #24
;__Lib_MathDouble.c, 569 :: 		
0x02C4	0xD105    BNE	__me_lab2
;__Lib_MathDouble.c, 571 :: 		
0x02C6	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 572 :: 		
0x02C8	0xBF14    ITE	NE
;__Lib_MathDouble.c, 573 :: 		
0x02CA	0xF04F0000  MOVNE	R0, #0
;__Lib_MathDouble.c, 574 :: 		
0x02CE	0x4610    MOVEQ	R0, R2
;__Lib_MathDouble.c, 576 :: 		
0x02D0	0xE057    B	__me_lab_end
;__Lib_MathDouble.c, 578 :: 		
__me_lab2:
0x02D2	0xF0414100  ORR	R1, R1, #-2147483648
;__Lib_MathDouble.c, 580 :: 		
0x02D6	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 581 :: 		
0x02D8	0xD04B    BEQ	__me_ovfl0
;__Lib_MathDouble.c, 583 :: 		
0x02DA	0xEA4F0191  LSR	R1, R1, #2
;__Lib_MathDouble.c, 584 :: 		
0x02DE	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 585 :: 		
0x02E0	0xBF48    IT	MI
;__Lib_MathDouble.c, 586 :: 		
0x02E2	0x4249    RSBMI	R1, R1, #0
;__Lib_MathDouble.c, 588 :: 		
0x02E4	0x1B5E    SUBS	R6, R3, R5
;__Lib_MathDouble.c, 589 :: 		
0x02E6	0xBF41    ITTTT	MI
;__Lib_MathDouble.c, 590 :: 		
0x02E8	0x460F    MOVMI	R7, R1
;__Lib_MathDouble.c, 591 :: 		
0x02EA	0x4621    MOVMI	R1, R4
;__Lib_MathDouble.c, 592 :: 		
0x02EC	0x463C    MOVMI	R4, R7
;__Lib_MathDouble.c, 593 :: 		
0x02EE	0x4276    RSBMI	R6, R6, #0
;__Lib_MathDouble.c, 594 :: 		
0x02F0	0xBF48    IT	MI
;__Lib_MathDouble.c, 595 :: 		
0x02F2	0x462B    MOVMI	R3, R5
;__Lib_MathDouble.c, 597 :: 		
0x02F4	0x2E19    CMP	R6, #25
;__Lib_MathDouble.c, 598 :: 		
0x02F6	0xBF47    ITTEE	MI
;__Lib_MathDouble.c, 599 :: 		
0x02F8	0xFA44F706  ASRMI	R7, R4, R6
;__Lib_MathDouble.c, 600 :: 		
0x02FC	0x19C9    ADDMI	R1, R1, R7
;__Lib_MathDouble.c, 601 :: 		
0x02FE	0xF04F0800  MOVPL	R8, #0
;__Lib_MathDouble.c, 602 :: 		
0x0302	0xE003    BPL	__me_skip_sticky
;__Lib_MathDouble.c, 603 :: 		
0x0304	0xF1C6071C  RSB	R7, R6, #28
;__Lib_MathDouble.c, 604 :: 		
0x0308	0xFA04F807  LSL	R8, R4, R7
;__Lib_MathDouble.c, 606 :: 		
__me_skip_sticky:
;__Lib_MathDouble.c, 607 :: 		
0x030C	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 608 :: 		
0x030E	0xBF04    ITT	EQ
;__Lib_MathDouble.c, 609 :: 		
0x0310	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 611 :: 		
0x0314	0xE035    BEQ	__me_lab_end
;__Lib_MathDouble.c, 612 :: 		
0x0316	0xBF46    ITTE	MI
;__Lib_MathDouble.c, 613 :: 		
0x0318	0x4249    RSBMI	R1, R1, #0
;__Lib_MathDouble.c, 614 :: 		
0x031A	0xF04F0701  MOVMI	R7, #1
;__Lib_MathDouble.c, 615 :: 		
0x031E	0xF04F0700  MOVPL	R7, #0
;__Lib_MathDouble.c, 617 :: 		
__me_loop:
0x0322	0xF1A30301  SUB	R3, R3, #1
;__Lib_MathDouble.c, 618 :: 		
0x0326	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 619 :: 		
0x0328	0xD5FB    BPL	__me_loop
;__Lib_MathDouble.c, 621 :: 		
0x032A	0xF0110480  ANDS	R4, R1, #128
;__Lib_MathDouble.c, 622 :: 		
0x032E	0xD00D    BEQ	__me_no_round
;__Lib_MathDouble.c, 623 :: 		
0x0330	0xF0010520  AND	R5, R1, #32
;__Lib_MathDouble.c, 624 :: 		
0x0334	0xEA480805  ORR	R8, R8, R5, LSL #0
;__Lib_MathDouble.c, 625 :: 		
0x0338	0x3180    ADDS	R1, #128
;__Lib_MathDouble.c, 626 :: 		
0x033A	0xBF28    IT	CS
;__Lib_MathDouble.c, 627 :: 		
0x033C	0x1C5B    ADDCS	R3, R3, #1
;__Lib_MathDouble.c, 628 :: 		
0x033E	0xF0010440  AND	R4, R1, #64
;__Lib_MathDouble.c, 629 :: 		
0x0342	0xEA580804  ORRS	R8, R8, R4, LSL #0
;__Lib_MathDouble.c, 630 :: 		
0x0346	0xBF08    IT	EQ
;__Lib_MathDouble.c, 631 :: 		
0x0348	0xF4217180  BICEQ	R1, R1, #256
;__Lib_MathDouble.c, 633 :: 		
__me_no_round:
;__Lib_MathDouble.c, 634 :: 		
0x034C	0x1C9B    ADDS	R3, R3, #2
;__Lib_MathDouble.c, 635 :: 		
0x034E	0xBFDC    ITT	LE
;__Lib_MathDouble.c, 636 :: 		
0x0350	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 638 :: 		
0x0354	0xE015    BLE	__me_lab_end
;__Lib_MathDouble.c, 639 :: 		
0x0356	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 640 :: 		
0x0358	0xD20D    BCS	__me_ovfl
;__Lib_MathDouble.c, 642 :: 		
0x035A	0xF02101FF  BIC	R1, R1, #255
;__Lib_MathDouble.c, 643 :: 		
0x035E	0xEA4F0141  LSL	R1, R1, #1
;__Lib_MathDouble.c, 645 :: 		
0x0362	0xEA4F2051  LSR	R0, R1, #9
;__Lib_MathDouble.c, 646 :: 		
0x0366	0xEA4050C3  ORR	R0, R0, R3, LSL #23
;__Lib_MathDouble.c, 647 :: 		
0x036A	0xEA4070C7  ORR	R0, R0, R7, LSL #31
;__Lib_MathDouble.c, 650 :: 		
0x036E	0xE008    B	__me_lab_end
;__Lib_MathDouble.c, 652 :: 		
__me_ovfl1:
0x0370	0x4610    MOV	R0, R2
;__Lib_MathDouble.c, 653 :: 		
__me_ovfl0:
0x0372	0xEA4F77D0  LSR	R7, R0, #31
;__Lib_MathDouble.c, 654 :: 		
__me_ovfl:
0x0376	0xEA4F77C7  LSL	R7, R7, #31
;__Lib_MathDouble.c, 655 :: 		
0x037A	0x20FF    MOVS	R0, #255
;__Lib_MathDouble.c, 656 :: 		
0x037C	0xEA4F50C0  LSL	R0, R0, #23
;__Lib_MathDouble.c, 657 :: 		
0x0380	0x4338    ORRS	R0, R7
;__Lib_MathDouble.c, 658 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 659 :: 		
0x0382	0xE8BD41FA  POP	(R1, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 661 :: 		
L_end__Sub_FP:
0x0386	0xB001    ADD	SP, SP, #4
0x0388	0x4770    BX	LR
; end of __Sub_FP
__Mul_FP:
;__Lib_MathDouble.c, 666 :: 		
0x0908	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 668 :: 		
0x090A	0xB5FA    PUSH	(R1, R3, R4, R5, R6, R7, R14)
;__Lib_MathDouble.c, 670 :: 		
0x090C	0xEA900602  EORS	R6, R0, R2, LSL #0
;__Lib_MathDouble.c, 671 :: 		
0x0910	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 672 :: 		
0x0912	0xF04F4600  MOVMI	R6, #-2147483648
;__Lib_MathDouble.c, 673 :: 		
0x0916	0xF04F0600  MOVPL	R6, #0
;__Lib_MathDouble.c, 675 :: 		
0x091A	0xEA4F2100  LSL	R1, R0, #8
;__Lib_MathDouble.c, 676 :: 		
0x091E	0xEA4F0340  LSL	R3, R0, #1
;__Lib_MathDouble.c, 677 :: 		
0x0922	0x0E1B    LSRS	R3, R3, #24
;__Lib_MathDouble.c, 678 :: 		
0x0924	0xBF12    ITEE	NE
;__Lib_MathDouble.c, 679 :: 		
0x0926	0xF0414100  ORRNE	R1, R1, #-2147483648
;__Lib_MathDouble.c, 681 :: 		
0x092A	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 683 :: 		
0x092E	0xE02C    BEQ	__me_lab_end
;__Lib_MathDouble.c, 685 :: 		
0x0930	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 686 :: 		
0x0932	0xD026    BEQ	__me_ovfl
;__Lib_MathDouble.c, 688 :: 		
0x0934	0xEA4F2402  LSL	R4, R2, #8
;__Lib_MathDouble.c, 689 :: 		
0x0938	0xEA4F0542  LSL	R5, R2, #1
;__Lib_MathDouble.c, 690 :: 		
0x093C	0x0E2D    LSRS	R5, R5, #24
;__Lib_MathDouble.c, 691 :: 		
0x093E	0xBF12    ITEE	NE
;__Lib_MathDouble.c, 692 :: 		
0x0940	0xF0444400  ORRNE	R4, R4, #-2147483648
;__Lib_MathDouble.c, 694 :: 		
0x0944	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 696 :: 		
0x0948	0xE01F    BEQ	__me_lab_end
;__Lib_MathDouble.c, 698 :: 		
0x094A	0x2DFF    CMP	R5, #255
;__Lib_MathDouble.c, 699 :: 		
0x094C	0xD019    BEQ	__me_ovfl
;__Lib_MathDouble.c, 701 :: 		
0x094E	0x195B    ADDS	R3, R3, R5
;__Lib_MathDouble.c, 703 :: 		
0x0950	0xFBA15404  UMULL	R5, R4, R1, R4
;__Lib_MathDouble.c, 705 :: 		
0x0954	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 706 :: 		
0x0956	0xBF5C    ITT	PL
;__Lib_MathDouble.c, 707 :: 		
0x0958	0x0064    LSLPL	R4, R4, #1
;__Lib_MathDouble.c, 708 :: 		
0x095A	0x1E5B    SUBPL	R3, R3, #1
;__Lib_MathDouble.c, 710 :: 		
0x095C	0x3480    ADDS	R4, #128
;__Lib_MathDouble.c, 711 :: 		
0x095E	0xBF24    ITT	CS
;__Lib_MathDouble.c, 712 :: 		
0x0960	0x1C5B    ADDCS	R3, R3, #1
;__Lib_MathDouble.c, 713 :: 		
0x0962	0x0864    LSRCS	R4, R4, #1
;__Lib_MathDouble.c, 715 :: 		
0x0964	0x3B7E    SUBS	R3, #126
;__Lib_MathDouble.c, 716 :: 		
0x0966	0xBFDC    ITT	LE
;__Lib_MathDouble.c, 717 :: 		
0x0968	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 719 :: 		
0x096C	0xE00D    BLE	__me_lab_end
;__Lib_MathDouble.c, 721 :: 		
0x096E	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 722 :: 		
0x0970	0xD207    BCS	__me_ovfl
;__Lib_MathDouble.c, 724 :: 		
0x0972	0xEA4F2014  LSR	R0, R4, #8
;__Lib_MathDouble.c, 725 :: 		
0x0976	0xF4300000  BICS	R0, R0, #8388608
;__Lib_MathDouble.c, 726 :: 		
0x097A	0xEA4050C3  ORR	R0, R0, R3, LSL #23
;__Lib_MathDouble.c, 727 :: 		
0x097E	0x4330    ORRS	R0, R6
;__Lib_MathDouble.c, 730 :: 		
0x0980	0xE003    B	__me_lab_end
;__Lib_MathDouble.c, 732 :: 		
__me_ovfl:
0x0982	0x27FF    MOVS	R7, #255
;__Lib_MathDouble.c, 733 :: 		
0x0984	0x05FF    LSLS	R7, R7, #23
;__Lib_MathDouble.c, 734 :: 		
0x0986	0xEA460007  ORR	R0, R6, R7, LSL #0
;__Lib_MathDouble.c, 735 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 736 :: 		
0x098A	0xE8BD40FA  POP	(R1, R3, R4, R5, R6, R7, R14)
;__Lib_MathDouble.c, 738 :: 		
L_end__Mul_FP:
0x098E	0xB001    ADD	SP, SP, #4
0x0990	0x4770    BX	LR
; end of __Mul_FP
__Compare_FP:
;__Lib_MathDouble.c, 839 :: 		
0x0B94	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 841 :: 		
0x0B96	0xB510    PUSH	(R4, R14)
;__Lib_MathDouble.c, 843 :: 		
0x0B98	0x4290    CMP	R0, R2
;__Lib_MathDouble.c, 844 :: 		
0x0B9A	0xBF08    IT	EQ
;__Lib_MathDouble.c, 846 :: 		
0x0B9C	0xE02A    BEQ	__me_lab_end
;__Lib_MathDouble.c, 848 :: 		
0x0B9E	0xEA400402  ORR	R4, R0, R2, LSL #0
;__Lib_MathDouble.c, 849 :: 		
0x0BA2	0xEA4F0444  LSL	R4, R4, #1
;__Lib_MathDouble.c, 850 :: 		
0x0BA6	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 851 :: 		
0x0BA8	0xBF08    IT	EQ
;__Lib_MathDouble.c, 853 :: 		
0x0BAA	0xE023    BEQ	__me_lab_end
;__Lib_MathDouble.c, 855 :: 		
0x0BAC	0x0044    LSLS	R4, R0, #1
;__Lib_MathDouble.c, 856 :: 		
0x0BAE	0xD104    BNE	__me_ct2_
;__Lib_MathDouble.c, 858 :: 		
0x0BB0	0x4294    CMP	R4, R2
;__Lib_MathDouble.c, 859 :: 		
0x0BB2	0xD401    BMI	__me_labop2_pos
;__Lib_MathDouble.c, 860 :: 		
0x0BB4	0x1CA4    ADDS	R4, R4, #2
;__Lib_MathDouble.c, 861 :: 		
0x0BB6	0x2C01    CMP	R4, #1
;__Lib_MathDouble.c, 862 :: 		
__me_labop2_pos:
;__Lib_MathDouble.c, 864 :: 		
0x0BB8	0xE01C    B	__me_lab_end
;__Lib_MathDouble.c, 866 :: 		
__me_ct2_:
0x0BBA	0xEA4F0440  LSL	R4, R0, #1
;__Lib_MathDouble.c, 867 :: 		
0x0BBE	0xEA4F6414  LSR	R4, R4, #24
;__Lib_MathDouble.c, 868 :: 		
0x0BC2	0x2CFF    CMP	R4, #255
;__Lib_MathDouble.c, 869 :: 		
0x0BC4	0xD10A    BNE	__me_ct1_
;__Lib_MathDouble.c, 870 :: 		
0x0BC6	0xEA4F0442  LSL	R4, R2, #1
;__Lib_MathDouble.c, 871 :: 		
0x0BCA	0xEA4F6414  LSR	R4, R4, #24
;__Lib_MathDouble.c, 872 :: 		
0x0BCE	0x2CFF    CMP	R4, #255
;__Lib_MathDouble.c, 873 :: 		
0x0BD0	0xD104    BNE	__me_ct1_
;__Lib_MathDouble.c, 875 :: 		
0x0BD2	0xEA4F74D2  LSR	R4, R2, #31
;__Lib_MathDouble.c, 876 :: 		
0x0BD6	0xEBB434D0  SUBS	R4, R4, R0, LSR #31
;__Lib_MathDouble.c, 878 :: 		
0x0BDA	0xE00B    B	__me_lab_end
;__Lib_MathDouble.c, 880 :: 		
__me_ct1_:
0x0BDC	0x2A00    CMP	R2, #0
;__Lib_MathDouble.c, 881 :: 		
0x0BDE	0xD406    BMI	__me_op2_m
;__Lib_MathDouble.c, 883 :: 		
0x0BE0	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 884 :: 		
0x0BE2	0xDC02    BGT	__me_labop1_pos
;__Lib_MathDouble.c, 885 :: 		
0x0BE4	0x2400    MOVS	R4, #0
;__Lib_MathDouble.c, 886 :: 		
0x0BE6	0x2C01    CMP	R4, #1
;__Lib_MathDouble.c, 888 :: 		
0x0BE8	0xE004    B	__me_lab_end
;__Lib_MathDouble.c, 889 :: 		
__me_labop1_pos:
;__Lib_MathDouble.c, 890 :: 		
0x0BEA	0x4290    CMP	R0, R2
;__Lib_MathDouble.c, 892 :: 		
0x0BEC	0xE002    B	__me_lab_end
;__Lib_MathDouble.c, 893 :: 		
__me_op2_m:
0x0BEE	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 894 :: 		
0x0BF0	0xBF48    IT	MI
;__Lib_MathDouble.c, 895 :: 		
0x0BF2	0x4282    CMPMI	R2, R0
;__Lib_MathDouble.c, 896 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 897 :: 		
0x0BF4	0xE8BD4010  POP	(R4, R14)
;__Lib_MathDouble.c, 899 :: 		
L_end__Compare_FP:
0x0BF8	0xB001    ADD	SP, SP, #4
0x0BFA	0x4770    BX	LR
; end of __Compare_FP
_print_D:
;st7735.c, 662 :: 		void print_D(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, unsigned int value, unsigned char points)
; colour start address is: 12 (R3)
; font_size start address is: 8 (R2)
; y_pos start address is: 4 (R1)
; x_pos start address is: 0 (R0)
0x0AD4	0xB083    SUB	SP, SP, #12
0x0AD6	0xF8CDE000  STR	LR, [SP, #0]
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
; x_pos start address is: 0 (R0)
; y_pos start address is: 4 (R1)
; font_size start address is: 8 (R2)
; colour start address is: 12 (R3)
; back_colour start address is: 28 (R7)
0x0ADA	0xF8BD700C  LDRH	R7, [SP, #12]
; value start address is: 32 (R8)
0x0ADE	0xF8BD8010  LDRH	R8, [SP, #16]
; points start address is: 36 (R9)
0x0AE2	0xF89D9014  LDRB	R9, [SP, #20]
;st7735.c, 664 :: 		unsigned char ch[6] = {0x2E, 0x20, 0x20, 0x20, 0x20, 0x20};
0x0AE6	0x242E    MOVS	R4, #46
0x0AE8	0xF88D4004  STRB	R4, [SP, #4]
0x0AEC	0x2420    MOVS	R4, #32
0x0AEE	0xF88D4005  STRB	R4, [SP, #5]
0x0AF2	0x2420    MOVS	R4, #32
0x0AF4	0xF88D4006  STRB	R4, [SP, #6]
0x0AF8	0x2420    MOVS	R4, #32
0x0AFA	0xF88D4007  STRB	R4, [SP, #7]
0x0AFE	0x2420    MOVS	R4, #32
0x0B00	0xF88D4008  STRB	R4, [SP, #8]
0x0B04	0x2420    MOVS	R4, #32
0x0B06	0xF88D4009  STRB	R4, [SP, #9]
;st7735.c, 666 :: 		ch[1] = ((value / 1000) + 0x30);
0x0B0A	0xAC01    ADD	R4, SP, #4
0x0B0C	0x1C65    ADDS	R5, R4, #1
0x0B0E	0xF24034E8  MOVW	R4, #1000
0x0B12	0xFBB8F4F4  UDIV	R4, R8, R4
0x0B16	0xB2A4    UXTH	R4, R4
0x0B18	0x3430    ADDS	R4, #48
0x0B1A	0x702C    STRB	R4, [R5, #0]
;st7735.c, 668 :: 		if(points > 1)
0x0B1C	0xF1B90F01  CMP	R9, #1
0x0B20	0xD92C    BLS	L_print_D177
;st7735.c, 670 :: 		ch[2] = (((value % 1000) / 100) + 0x30);
0x0B22	0xAC01    ADD	R4, SP, #4
0x0B24	0x1CA6    ADDS	R6, R4, #2
0x0B26	0xF24034E8  MOVW	R4, #1000
0x0B2A	0xFBB8F5F4  UDIV	R5, R8, R4
0x0B2E	0xFB048515  MLS	R5, R4, R5, R8
0x0B32	0xB2AD    UXTH	R5, R5
0x0B34	0x2464    MOVS	R4, #100
0x0B36	0xFBB5F4F4  UDIV	R4, R5, R4
0x0B3A	0xB2A4    UXTH	R4, R4
0x0B3C	0x3430    ADDS	R4, #48
0x0B3E	0x7034    STRB	R4, [R6, #0]
;st7735.c, 672 :: 		if(points > 2)
0x0B40	0xF1B90F02  CMP	R9, #2
0x0B44	0xD91A    BLS	L_print_D178
;st7735.c, 674 :: 		ch[3] = (((value % 100) / 10) + 0x30);
0x0B46	0xAC01    ADD	R4, SP, #4
0x0B48	0x1CE6    ADDS	R6, R4, #3
0x0B4A	0x2464    MOVS	R4, #100
0x0B4C	0xFBB8F5F4  UDIV	R5, R8, R4
0x0B50	0xFB048515  MLS	R5, R4, R5, R8
0x0B54	0xB2AD    UXTH	R5, R5
0x0B56	0x240A    MOVS	R4, #10
0x0B58	0xFBB5F4F4  UDIV	R4, R5, R4
0x0B5C	0xB2A4    UXTH	R4, R4
0x0B5E	0x3430    ADDS	R4, #48
0x0B60	0x7034    STRB	R4, [R6, #0]
;st7735.c, 676 :: 		if(points > 3)
0x0B62	0xF1B90F03  CMP	R9, #3
0x0B66	0xD909    BLS	L_print_D179
; points end address is: 36 (R9)
;st7735.c, 678 :: 		ch[4] = ((value % 10) + 0x30);
0x0B68	0xAC01    ADD	R4, SP, #4
0x0B6A	0x1D26    ADDS	R6, R4, #4
0x0B6C	0x250A    MOVS	R5, #10
0x0B6E	0xFBB8F4F5  UDIV	R4, R8, R5
0x0B72	0xFB058414  MLS	R4, R5, R4, R8
0x0B76	0xB2A4    UXTH	R4, R4
; value end address is: 32 (R8)
0x0B78	0x3430    ADDS	R4, #48
0x0B7A	0x7034    STRB	R4, [R6, #0]
;st7735.c, 679 :: 		}
L_print_D179:
;st7735.c, 680 :: 		}
L_print_D178:
;st7735.c, 681 :: 		}
L_print_D177:
;st7735.c, 683 :: 		print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
0x0B7C	0xAD01    ADD	R5, SP, #4
0x0B7E	0xB2BC    UXTH	R4, R7
; back_colour end address is: 28 (R7)
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
0x0B80	0xB420    PUSH	(R5)
0x0B82	0xB410    PUSH	(R4)
0x0B84	0xF000FE06  BL	_print_str+0
0x0B88	0xB002    ADD	SP, SP, #8
;st7735.c, 684 :: 		}
L_end_print_D:
0x0B8A	0xF8DDE000  LDR	LR, [SP, #0]
0x0B8E	0xB003    ADD	SP, SP, #12
0x0B90	0x4770    BX	LR
; end of _print_D
_print_C:
;st7735.c, 564 :: 		void print_C(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, signed int value)
; colour start address is: 12 (R3)
; font_size start address is: 8 (R2)
; y_pos start address is: 4 (R1)
; x_pos start address is: 0 (R0)
0x0DF4	0xB083    SUB	SP, SP, #12
0x0DF6	0xF8CDE000  STR	LR, [SP, #0]
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
; x_pos start address is: 0 (R0)
; y_pos start address is: 4 (R1)
; font_size start address is: 8 (R2)
; colour start address is: 12 (R3)
; back_colour start address is: 32 (R8)
0x0DFA	0xF8BD800C  LDRH	R8, [SP, #12]
; value start address is: 24 (R6)
0x0DFE	0xF9BD6010  LDRSH	R6, [SP, #16]
;st7735.c, 566 :: 		unsigned char ch[6] = {0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
0x0E02	0x2420    MOVS	R4, #32
0x0E04	0xF88D4004  STRB	R4, [SP, #4]
0x0E08	0x2420    MOVS	R4, #32
0x0E0A	0xF88D4005  STRB	R4, [SP, #5]
0x0E0E	0x2420    MOVS	R4, #32
0x0E10	0xF88D4006  STRB	R4, [SP, #6]
0x0E14	0x2420    MOVS	R4, #32
0x0E16	0xF88D4007  STRB	R4, [SP, #7]
0x0E1A	0x2420    MOVS	R4, #32
0x0E1C	0xF88D4008  STRB	R4, [SP, #8]
0x0E20	0x2420    MOVS	R4, #32
0x0E22	0xF88D4009  STRB	R4, [SP, #9]
;st7735.c, 568 :: 		if(value < 0x00)
0x0E26	0x2E00    CMP	R6, #0
0x0E28	0xDA07    BGE	L_print_C148
;st7735.c, 571 :: 		ch[0] = 0x2D;
0x0E2A	0xAD01    ADD	R5, SP, #4
0x0E2C	0x242D    MOVS	R4, #45
0x0E2E	0x702C    STRB	R4, [R5, #0]
;st7735.c, 572 :: 		value = -value;
0x0E30	0xF1C60900  RSB	R9, R6, #0
0x0E34	0xFA0FF989  SXTH	R9, R9
; value end address is: 24 (R6)
; value start address is: 36 (R9)
;st7735.c, 573 :: 		}
; value end address is: 36 (R9)
0x0E38	0xE004    B	L_print_C149
L_print_C148:
;st7735.c, 576 :: 		ch[0] = 0x20;
; value start address is: 24 (R6)
0x0E3A	0xAD01    ADD	R5, SP, #4
0x0E3C	0x2420    MOVS	R4, #32
0x0E3E	0x702C    STRB	R4, [R5, #0]
; value end address is: 24 (R6)
0x0E40	0xFA0FF986  SXTH	R9, R6
;st7735.c, 577 :: 		}
L_print_C149:
;st7735.c, 579 :: 		if((value > 99) && (value <= 999))
; value start address is: 36 (R9)
0x0E44	0xF1B90F63  CMP	R9, #99
0x0E48	0xDD26    BLE	L__print_C226
0x0E4A	0xF24034E7  MOVW	R4, #999
0x0E4E	0x45A1    CMP	R9, R4
0x0E50	0xDC22    BGT	L__print_C225
L__print_C224:
;st7735.c, 581 :: 		ch[1] = ((value / 100) + 0x30);
0x0E52	0xAF01    ADD	R7, SP, #4
0x0E54	0x1C7D    ADDS	R5, R7, #1
0x0E56	0x2464    MOVS	R4, #100
0x0E58	0xB224    SXTH	R4, R4
0x0E5A	0xFB99F4F4  SDIV	R4, R9, R4
0x0E5E	0xB224    SXTH	R4, R4
0x0E60	0x3430    ADDS	R4, #48
0x0E62	0x702C    STRB	R4, [R5, #0]
;st7735.c, 582 :: 		ch[2] = (((value % 100) / 10) + 0x30);
0x0E64	0x1CBE    ADDS	R6, R7, #2
0x0E66	0x2464    MOVS	R4, #100
0x0E68	0xB224    SXTH	R4, R4
0x0E6A	0xFB99F5F4  SDIV	R5, R9, R4
0x0E6E	0xFB049515  MLS	R5, R4, R5, R9
0x0E72	0xB22D    SXTH	R5, R5
0x0E74	0x240A    MOVS	R4, #10
0x0E76	0xB224    SXTH	R4, R4
0x0E78	0xFB95F4F4  SDIV	R4, R5, R4
0x0E7C	0xB224    SXTH	R4, R4
0x0E7E	0x3430    ADDS	R4, #48
0x0E80	0x7034    STRB	R4, [R6, #0]
;st7735.c, 583 :: 		ch[3] = ((value % 10) + 0x30);
0x0E82	0x1CFE    ADDS	R6, R7, #3
0x0E84	0x250A    MOVS	R5, #10
0x0E86	0xB22D    SXTH	R5, R5
0x0E88	0xFB99F4F5  SDIV	R4, R9, R5
0x0E8C	0xFB059414  MLS	R4, R5, R4, R9
0x0E90	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x0E92	0x3430    ADDS	R4, #48
0x0E94	0x7034    STRB	R4, [R6, #0]
;st7735.c, 584 :: 		}
0x0E96	0xE03A    B	L_print_C153
;st7735.c, 579 :: 		if((value > 99) && (value <= 999))
L__print_C226:
; value start address is: 36 (R9)
L__print_C225:
;st7735.c, 585 :: 		else if((value > 9) && (value <= 99))
0x0E98	0xF1B90F09  CMP	R9, #9
0x0E9C	0xDD20    BLE	L__print_C228
0x0E9E	0xF1B90F63  CMP	R9, #99
0x0EA2	0xDC1D    BGT	L__print_C227
L__print_C223:
;st7735.c, 587 :: 		ch[1] = (((value % 100) / 10) + 0x30);
0x0EA4	0xAF01    ADD	R7, SP, #4
0x0EA6	0x1C7E    ADDS	R6, R7, #1
0x0EA8	0x2464    MOVS	R4, #100
0x0EAA	0xB224    SXTH	R4, R4
0x0EAC	0xFB99F5F4  SDIV	R5, R9, R4
0x0EB0	0xFB049515  MLS	R5, R4, R5, R9
0x0EB4	0xB22D    SXTH	R5, R5
0x0EB6	0x240A    MOVS	R4, #10
0x0EB8	0xB224    SXTH	R4, R4
0x0EBA	0xFB95F4F4  SDIV	R4, R5, R4
0x0EBE	0xB224    SXTH	R4, R4
0x0EC0	0x3430    ADDS	R4, #48
0x0EC2	0x7034    STRB	R4, [R6, #0]
;st7735.c, 588 :: 		ch[2] = ((value % 10) + 0x30);
0x0EC4	0x1CBE    ADDS	R6, R7, #2
0x0EC6	0x250A    MOVS	R5, #10
0x0EC8	0xB22D    SXTH	R5, R5
0x0ECA	0xFB99F4F5  SDIV	R4, R9, R5
0x0ECE	0xFB059414  MLS	R4, R5, R4, R9
0x0ED2	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x0ED4	0x3430    ADDS	R4, #48
0x0ED6	0x7034    STRB	R4, [R6, #0]
;st7735.c, 589 :: 		ch[3] = 0x20;
0x0ED8	0x1CFD    ADDS	R5, R7, #3
0x0EDA	0x2420    MOVS	R4, #32
0x0EDC	0x702C    STRB	R4, [R5, #0]
;st7735.c, 590 :: 		}
0x0EDE	0xE016    B	L_print_C157
;st7735.c, 585 :: 		else if((value > 9) && (value <= 99))
L__print_C228:
; value start address is: 36 (R9)
L__print_C227:
;st7735.c, 591 :: 		else if((value >= 0) && (value <= 9))
0x0EE0	0xF1B90F00  CMP	R9, #0
0x0EE4	0xDB13    BLT	L__print_C230
0x0EE6	0xF1B90F09  CMP	R9, #9
0x0EEA	0xDC10    BGT	L__print_C229
L__print_C222:
;st7735.c, 593 :: 		ch[1] = ((value % 10) + 0x30);
0x0EEC	0xAF01    ADD	R7, SP, #4
0x0EEE	0x1C7E    ADDS	R6, R7, #1
0x0EF0	0x250A    MOVS	R5, #10
0x0EF2	0xB22D    SXTH	R5, R5
0x0EF4	0xFB99F4F5  SDIV	R4, R9, R5
0x0EF8	0xFB059414  MLS	R4, R5, R4, R9
0x0EFC	0xB224    SXTH	R4, R4
; value end address is: 36 (R9)
0x0EFE	0x3430    ADDS	R4, #48
0x0F00	0x7034    STRB	R4, [R6, #0]
;st7735.c, 594 :: 		ch[2] = 0x20;
0x0F02	0x1CBD    ADDS	R5, R7, #2
0x0F04	0x2420    MOVS	R4, #32
0x0F06	0x702C    STRB	R4, [R5, #0]
;st7735.c, 595 :: 		ch[3] = 0x20;
0x0F08	0x1CFD    ADDS	R5, R7, #3
0x0F0A	0x2420    MOVS	R4, #32
0x0F0C	0x702C    STRB	R4, [R5, #0]
;st7735.c, 591 :: 		else if((value >= 0) && (value <= 9))
L__print_C230:
L__print_C229:
;st7735.c, 596 :: 		}
L_print_C157:
L_print_C153:
;st7735.c, 598 :: 		print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
0x0F0E	0xAD01    ADD	R5, SP, #4
0x0F10	0xFA1FF488  UXTH	R4, R8
; back_colour end address is: 32 (R8)
; colour end address is: 12 (R3)
; font_size end address is: 8 (R2)
; y_pos end address is: 4 (R1)
; x_pos end address is: 0 (R0)
0x0F14	0xB420    PUSH	(R5)
0x0F16	0xB410    PUSH	(R4)
0x0F18	0xF000FC3C  BL	_print_str+0
0x0F1C	0xB002    ADD	SP, SP, #8
;st7735.c, 599 :: 		}
L_end_print_C:
0x0F1E	0xF8DDE000  LDR	LR, [SP, #0]
0x0F22	0xB003    ADD	SP, SP, #12
0x0F24	0x4770    BX	LR
; end of _print_C
__Add_FP:
;__Lib_MathDouble.c, 413 :: 		
0x0CF4	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 415 :: 		
0x0CF6	0xE92D41FA  PUSH	(R1, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 417 :: 		
0x0CFA	0xEA4F2402  LSL	R4, R2, #8
;__Lib_MathDouble.c, 418 :: 		
0x0CFE	0xEA4F0542  LSL	R5, R2, #1
;__Lib_MathDouble.c, 419 :: 		
0x0D02	0x0E2D    LSRS	R5, R5, #24
;__Lib_MathDouble.c, 420 :: 		
0x0D04	0xD104    BNE	__me_lab1
;__Lib_MathDouble.c, 422 :: 		
0x0D06	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 423 :: 		
0x0D08	0xBF18    IT	NE
;__Lib_MathDouble.c, 424 :: 		
0x0D0A	0xF04F0000  MOVNE	R0, #0
;__Lib_MathDouble.c, 426 :: 		
0x0D0E	0xE06C    B	__me_lab_end
;__Lib_MathDouble.c, 428 :: 		
__me_lab1:
0x0D10	0xF0444400  ORR	R4, R4, #-2147483648
;__Lib_MathDouble.c, 430 :: 		
0x0D14	0x2DFF    CMP	R5, #255
;__Lib_MathDouble.c, 432 :: 		
0x0D16	0xD05F    BEQ	__me_ovfl1
;__Lib_MathDouble.c, 434 :: 		
0x0D18	0xEA4F0494  LSR	R4, R4, #2
;__Lib_MathDouble.c, 435 :: 		
0x0D1C	0x2A00    CMP	R2, #0
;__Lib_MathDouble.c, 436 :: 		
0x0D1E	0xBF48    IT	MI
;__Lib_MathDouble.c, 437 :: 		
0x0D20	0x4264    RSBMI	R4, R4, #0
;__Lib_MathDouble.c, 439 :: 		
0x0D22	0xEA4F2100  LSL	R1, R0, #8
;__Lib_MathDouble.c, 440 :: 		
0x0D26	0xEA4F0340  LSL	R3, R0, #1
;__Lib_MathDouble.c, 441 :: 		
0x0D2A	0x0E1B    LSRS	R3, R3, #24
;__Lib_MathDouble.c, 442 :: 		
0x0D2C	0xD105    BNE	__me_lab2
;__Lib_MathDouble.c, 444 :: 		
0x0D2E	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 445 :: 		
0x0D30	0xBF14    ITE	NE
;__Lib_MathDouble.c, 446 :: 		
0x0D32	0xF04F0000  MOVNE	R0, #0
;__Lib_MathDouble.c, 447 :: 		
0x0D36	0x4610    MOVEQ	R0, R2
;__Lib_MathDouble.c, 449 :: 		
0x0D38	0xE057    B	__me_lab_end
;__Lib_MathDouble.c, 451 :: 		
__me_lab2:
0x0D3A	0xF0414100  ORR	R1, R1, #-2147483648
;__Lib_MathDouble.c, 453 :: 		
0x0D3E	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 454 :: 		
0x0D40	0xD04B    BEQ	__me_ovfl0
;__Lib_MathDouble.c, 456 :: 		
0x0D42	0xEA4F0191  LSR	R1, R1, #2
;__Lib_MathDouble.c, 457 :: 		
0x0D46	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 458 :: 		
0x0D48	0xBF48    IT	MI
;__Lib_MathDouble.c, 459 :: 		
0x0D4A	0x4249    RSBMI	R1, R1, #0
;__Lib_MathDouble.c, 461 :: 		
0x0D4C	0x1B5E    SUBS	R6, R3, R5
;__Lib_MathDouble.c, 462 :: 		
0x0D4E	0xBF41    ITTTT	MI
;__Lib_MathDouble.c, 463 :: 		
0x0D50	0x460F    MOVMI	R7, R1
;__Lib_MathDouble.c, 464 :: 		
0x0D52	0x4621    MOVMI	R1, R4
;__Lib_MathDouble.c, 465 :: 		
0x0D54	0x463C    MOVMI	R4, R7
;__Lib_MathDouble.c, 466 :: 		
0x0D56	0x4276    RSBMI	R6, R6, #0
;__Lib_MathDouble.c, 467 :: 		
0x0D58	0xBF48    IT	MI
;__Lib_MathDouble.c, 468 :: 		
0x0D5A	0x462B    MOVMI	R3, R5
;__Lib_MathDouble.c, 470 :: 		
0x0D5C	0x2E19    CMP	R6, #25
;__Lib_MathDouble.c, 471 :: 		
0x0D5E	0xBF47    ITTEE	MI
;__Lib_MathDouble.c, 472 :: 		
0x0D60	0xFA44F706  ASRMI	R7, R4, R6
;__Lib_MathDouble.c, 473 :: 		
0x0D64	0x19C9    ADDMI	R1, R1, R7
;__Lib_MathDouble.c, 474 :: 		
0x0D66	0xF04F0800  MOVPL	R8, #0
;__Lib_MathDouble.c, 475 :: 		
0x0D6A	0xE003    BPL	__me_skip_sticky
;__Lib_MathDouble.c, 476 :: 		
0x0D6C	0xF1C6071C  RSB	R7, R6, #28
;__Lib_MathDouble.c, 477 :: 		
0x0D70	0xFA04F807  LSL	R8, R4, R7
;__Lib_MathDouble.c, 479 :: 		
__me_skip_sticky:
;__Lib_MathDouble.c, 480 :: 		
0x0D74	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 481 :: 		
0x0D76	0xBF04    ITT	EQ
;__Lib_MathDouble.c, 482 :: 		
0x0D78	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 484 :: 		
0x0D7C	0xE035    BEQ	__me_lab_end
;__Lib_MathDouble.c, 485 :: 		
0x0D7E	0xBF46    ITTE	MI
;__Lib_MathDouble.c, 486 :: 		
0x0D80	0x4249    RSBMI	R1, R1, #0
;__Lib_MathDouble.c, 487 :: 		
0x0D82	0xF04F0701  MOVMI	R7, #1
;__Lib_MathDouble.c, 488 :: 		
0x0D86	0xF04F0700  MOVPL	R7, #0
;__Lib_MathDouble.c, 490 :: 		
__me_loop:
0x0D8A	0xF1A30301  SUB	R3, R3, #1
;__Lib_MathDouble.c, 491 :: 		
0x0D8E	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 492 :: 		
0x0D90	0xD5FB    BPL	__me_loop
;__Lib_MathDouble.c, 494 :: 		
0x0D92	0xF0110480  ANDS	R4, R1, #128
;__Lib_MathDouble.c, 495 :: 		
0x0D96	0xD00D    BEQ	__me_no_round
;__Lib_MathDouble.c, 496 :: 		
0x0D98	0xF0010520  AND	R5, R1, #32
;__Lib_MathDouble.c, 497 :: 		
0x0D9C	0xEA480805  ORR	R8, R8, R5, LSL #0
;__Lib_MathDouble.c, 498 :: 		
0x0DA0	0x3180    ADDS	R1, #128
;__Lib_MathDouble.c, 499 :: 		
0x0DA2	0xBF28    IT	CS
;__Lib_MathDouble.c, 500 :: 		
0x0DA4	0x1C5B    ADDCS	R3, R3, #1
;__Lib_MathDouble.c, 501 :: 		
0x0DA6	0xF0010440  AND	R4, R1, #64
;__Lib_MathDouble.c, 502 :: 		
0x0DAA	0xEA580804  ORRS	R8, R8, R4, LSL #0
;__Lib_MathDouble.c, 503 :: 		
0x0DAE	0xBF08    IT	EQ
;__Lib_MathDouble.c, 504 :: 		
0x0DB0	0xF4217180  BICEQ	R1, R1, #256
;__Lib_MathDouble.c, 506 :: 		
__me_no_round:
;__Lib_MathDouble.c, 507 :: 		
0x0DB4	0x1C9B    ADDS	R3, R3, #2
;__Lib_MathDouble.c, 508 :: 		
0x0DB6	0xBFDC    ITT	LE
;__Lib_MathDouble.c, 509 :: 		
0x0DB8	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 511 :: 		
0x0DBC	0xE015    BLE	__me_lab_end
;__Lib_MathDouble.c, 512 :: 		
0x0DBE	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 513 :: 		
0x0DC0	0xD20D    BCS	__me_ovfl
;__Lib_MathDouble.c, 515 :: 		
0x0DC2	0xF02101FF  BIC	R1, R1, #255
;__Lib_MathDouble.c, 516 :: 		
0x0DC6	0xEA4F0141  LSL	R1, R1, #1
;__Lib_MathDouble.c, 518 :: 		
0x0DCA	0xEA4F2051  LSR	R0, R1, #9
;__Lib_MathDouble.c, 519 :: 		
0x0DCE	0xEA4050C3  ORR	R0, R0, R3, LSL #23
;__Lib_MathDouble.c, 520 :: 		
0x0DD2	0xEA4070C7  ORR	R0, R0, R7, LSL #31
;__Lib_MathDouble.c, 523 :: 		
0x0DD6	0xE008    B	__me_lab_end
;__Lib_MathDouble.c, 525 :: 		
__me_ovfl1:
0x0DD8	0x4610    MOV	R0, R2
;__Lib_MathDouble.c, 526 :: 		
__me_ovfl0:
0x0DDA	0xEA4F77D0  LSR	R7, R0, #31
;__Lib_MathDouble.c, 527 :: 		
__me_ovfl:
0x0DDE	0xEA4F77C7  LSL	R7, R7, #31
;__Lib_MathDouble.c, 528 :: 		
0x0DE2	0x20FF    MOVS	R0, #255
;__Lib_MathDouble.c, 529 :: 		
0x0DE4	0xEA4F50C0  LSL	R0, R0, #23
;__Lib_MathDouble.c, 530 :: 		
0x0DE8	0x4338    ORRS	R0, R7
;__Lib_MathDouble.c, 531 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 532 :: 		
0x0DEA	0xE8BD41FA  POP	(R1, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 534 :: 		
L_end__Add_FP:
0x0DEE	0xB001    ADD	SP, SP, #4
0x0DF0	0x4770    BX	LR
; end of __Add_FP
__Lib_System_101_102_103_InitialSetUpRCCRCC2:
;__Lib_System_101_102_103.c, 369 :: 		
0x1B2C	0xB082    SUB	SP, SP, #8
0x1B2E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_101_102_103.c, 372 :: 		
; ulRCC_CR start address is: 8 (R2)
0x1B32	0x4A33    LDR	R2, [PC, #204]
;__Lib_System_101_102_103.c, 373 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x1B34	0x4B33    LDR	R3, [PC, #204]
;__Lib_System_101_102_103.c, 374 :: 		
; Fosc_kHz start address is: 4 (R1)
0x1B36	0x4934    LDR	R1, [PC, #208]
;__Lib_System_101_102_103.c, 381 :: 		
0x1B38	0xF64B3080  MOVW	R0, #48000
0x1B3C	0x4281    CMP	R1, R0
0x1B3E	0xD906    BLS	L___Lib_System_101_102_103_InitialSetUpRCCRCC231
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_101_102_103.c, 382 :: 		
0x1B40	0x4832    LDR	R0, [PC, #200]
0x1B42	0x6800    LDR	R0, [R0, #0]
0x1B44	0xF0400102  ORR	R1, R0, #2
0x1B48	0x4830    LDR	R0, [PC, #192]
0x1B4A	0x6001    STR	R1, [R0, #0]
0x1B4C	0xE011    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC232
L___Lib_System_101_102_103_InitialSetUpRCCRCC231:
;__Lib_System_101_102_103.c, 383 :: 		
; Fosc_kHz start address is: 4 (R1)
0x1B4E	0xF64550C0  MOVW	R0, #24000
0x1B52	0x4281    CMP	R1, R0
0x1B54	0xD906    BLS	L___Lib_System_101_102_103_InitialSetUpRCCRCC233
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_101_102_103.c, 384 :: 		
0x1B56	0x482D    LDR	R0, [PC, #180]
0x1B58	0x6800    LDR	R0, [R0, #0]
0x1B5A	0xF0400101  ORR	R1, R0, #1
0x1B5E	0x482B    LDR	R0, [PC, #172]
0x1B60	0x6001    STR	R1, [R0, #0]
0x1B62	0xE006    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC234
L___Lib_System_101_102_103_InitialSetUpRCCRCC233:
;__Lib_System_101_102_103.c, 386 :: 		
0x1B64	0x4829    LDR	R0, [PC, #164]
0x1B66	0x6801    LDR	R1, [R0, #0]
0x1B68	0xF06F0007  MVN	R0, #7
0x1B6C	0x4001    ANDS	R1, R0
0x1B6E	0x4827    LDR	R0, [PC, #156]
0x1B70	0x6001    STR	R1, [R0, #0]
L___Lib_System_101_102_103_InitialSetUpRCCRCC234:
L___Lib_System_101_102_103_InitialSetUpRCCRCC232:
;__Lib_System_101_102_103.c, 388 :: 		
0x1B72	0xF7FFF897  BL	__Lib_System_101_102_103_SystemClockSetDefault+0
;__Lib_System_101_102_103.c, 390 :: 		
0x1B76	0x4826    LDR	R0, [PC, #152]
0x1B78	0x6003    STR	R3, [R0, #0]
;__Lib_System_101_102_103.c, 391 :: 		
0x1B7A	0x4826    LDR	R0, [PC, #152]
0x1B7C	0xEA020100  AND	R1, R2, R0, LSL #0
0x1B80	0x4825    LDR	R0, [PC, #148]
0x1B82	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 393 :: 		
0x1B84	0xF0020001  AND	R0, R2, #1
0x1B88	0xB140    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC246
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x1B8A	0x4619    MOV	R1, R3
;__Lib_System_101_102_103.c, 394 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC236:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x1B8C	0x4822    LDR	R0, [PC, #136]
0x1B8E	0x6800    LDR	R0, [R0, #0]
0x1B90	0xF0000002  AND	R0, R0, #2
0x1B94	0x2800    CMP	R0, #0
0x1B96	0xD100    BNE	L___Lib_System_101_102_103_InitialSetUpRCCRCC237
;__Lib_System_101_102_103.c, 395 :: 		
0x1B98	0xE7F8    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC236
L___Lib_System_101_102_103_InitialSetUpRCCRCC237:
;__Lib_System_101_102_103.c, 396 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x1B9A	0xE000    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC235
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC246:
;__Lib_System_101_102_103.c, 393 :: 		
0x1B9C	0x4619    MOV	R1, R3
;__Lib_System_101_102_103.c, 396 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC235:
;__Lib_System_101_102_103.c, 398 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x1B9E	0xF4023080  AND	R0, R2, #65536
0x1BA2	0xB148    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
;__Lib_System_101_102_103.c, 399 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC239:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 4 (R1)
0x1BA4	0x481C    LDR	R0, [PC, #112]
0x1BA6	0x6800    LDR	R0, [R0, #0]
0x1BA8	0xF4003000  AND	R0, R0, #131072
0x1BAC	0xB900    CBNZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC240
;__Lib_System_101_102_103.c, 400 :: 		
0x1BAE	0xE7F9    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC239
L___Lib_System_101_102_103_InitialSetUpRCCRCC240:
;__Lib_System_101_102_103.c, 401 :: 		
0x1BB0	0x9201    STR	R2, [SP, #4]
; ulRCC_CFGR end address is: 4 (R1)
0x1BB2	0x460A    MOV	R2, R1
0x1BB4	0x9901    LDR	R1, [SP, #4]
0x1BB6	0xE002    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC247:
;__Lib_System_101_102_103.c, 398 :: 		
0x1BB8	0x9101    STR	R1, [SP, #4]
0x1BBA	0x4611    MOV	R1, R2
0x1BBC	0x9A01    LDR	R2, [SP, #4]
;__Lib_System_101_102_103.c, 401 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC238:
;__Lib_System_101_102_103.c, 403 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x1BBE	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x1BC2	0xB170    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC248
;__Lib_System_101_102_103.c, 404 :: 		
0x1BC4	0x4814    LDR	R0, [PC, #80]
0x1BC6	0x6800    LDR	R0, [R0, #0]
0x1BC8	0xF0407180  ORR	R1, R0, #16777216
0x1BCC	0x4812    LDR	R0, [PC, #72]
0x1BCE	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x1BD0	0x4611    MOV	R1, R2
;__Lib_System_101_102_103.c, 405 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC242:
; ulRCC_CFGR start address is: 4 (R1)
0x1BD2	0x4811    LDR	R0, [PC, #68]
0x1BD4	0x6800    LDR	R0, [R0, #0]
0x1BD6	0xF0007000  AND	R0, R0, #33554432
0x1BDA	0xB900    CBNZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC243
;__Lib_System_101_102_103.c, 406 :: 		
0x1BDC	0xE7F9    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC242
L___Lib_System_101_102_103_InitialSetUpRCCRCC243:
;__Lib_System_101_102_103.c, 407 :: 		
0x1BDE	0x460A    MOV	R2, R1
0x1BE0	0xE7FF    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_101_102_103_InitialSetUpRCCRCC248:
;__Lib_System_101_102_103.c, 403 :: 		
;__Lib_System_101_102_103.c, 407 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC241:
;__Lib_System_101_102_103.c, 410 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC244:
; ulRCC_CFGR start address is: 8 (R2)
0x1BE2	0x480B    LDR	R0, [PC, #44]
0x1BE4	0x6800    LDR	R0, [R0, #0]
0x1BE6	0xF000010C  AND	R1, R0, #12
0x1BEA	0x0090    LSLS	R0, R2, #2
0x1BEC	0xF000000C  AND	R0, R0, #12
0x1BF0	0x4281    CMP	R1, R0
0x1BF2	0xD000    BEQ	L___Lib_System_101_102_103_InitialSetUpRCCRCC245
;__Lib_System_101_102_103.c, 411 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x1BF4	0xE7F5    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC244
L___Lib_System_101_102_103_InitialSetUpRCCRCC245:
;__Lib_System_101_102_103.c, 413 :: 		
L_end_InitialSetUpRCCRCC2:
0x1BF6	0xF8DDE000  LDR	LR, [SP, #0]
0x1BFA	0xB002    ADD	SP, SP, #8
0x1BFC	0x4770    BX	LR
0x1BFE	0xBF00    NOP
0x1C00	0x00810109  	#17367169
0x1C04	0xC402001D  	#1950722
0x1C08	0x19400001  	#72000
0x1C0C	0x20004002  	FLASH_ACR+0
0x1C10	0x10044002  	RCC_CFGR+0
0x1C14	0xFFFF000F  	#1048575
0x1C18	0x10004002  	RCC_CR+0
; end of __Lib_System_101_102_103_InitialSetUpRCCRCC2
__Lib_System_101_102_103_SystemClockSetDefault:
;__Lib_System_101_102_103.c, 348 :: 		
0x0CA4	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 351 :: 		
0x0CA6	0x480F    LDR	R0, [PC, #60]
0x0CA8	0x6800    LDR	R0, [R0, #0]
0x0CAA	0xF0400101  ORR	R1, R0, #1
0x0CAE	0x480D    LDR	R0, [PC, #52]
0x0CB0	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 354 :: 		
0x0CB2	0x490D    LDR	R1, [PC, #52]
0x0CB4	0x480D    LDR	R0, [PC, #52]
0x0CB6	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 357 :: 		
0x0CB8	0x480A    LDR	R0, [PC, #40]
0x0CBA	0x6801    LDR	R1, [R0, #0]
0x0CBC	0x480C    LDR	R0, [PC, #48]
0x0CBE	0x4001    ANDS	R1, R0
0x0CC0	0x4808    LDR	R0, [PC, #32]
0x0CC2	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 360 :: 		
0x0CC4	0x4807    LDR	R0, [PC, #28]
0x0CC6	0x6801    LDR	R1, [R0, #0]
0x0CC8	0xF46F2080  MVN	R0, #262144
0x0CCC	0x4001    ANDS	R1, R0
0x0CCE	0x4805    LDR	R0, [PC, #20]
0x0CD0	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 363 :: 		
0x0CD2	0x4806    LDR	R0, [PC, #24]
0x0CD4	0x6801    LDR	R1, [R0, #0]
0x0CD6	0xF46F00FE  MVN	R0, #8323072
0x0CDA	0x4001    ANDS	R1, R0
0x0CDC	0x4803    LDR	R0, [PC, #12]
0x0CDE	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 367 :: 		
L_end_SystemClockSetDefault:
0x0CE0	0xB001    ADD	SP, SP, #4
0x0CE2	0x4770    BX	LR
0x0CE4	0x10004002  	RCC_CR+0
0x0CE8	0x0000F8FF  	#-117506048
0x0CEC	0x10044002  	RCC_CFGR+0
0x0CF0	0xFFFFFEF6  	#-17367041
; end of __Lib_System_101_102_103_SystemClockSetDefault
__Lib_System_101_102_103_InitialSetUpFosc:
;__Lib_System_101_102_103.c, 415 :: 		
0x1B10	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 416 :: 		
0x1B12	0x4902    LDR	R1, [PC, #8]
0x1B14	0x4802    LDR	R0, [PC, #8]
0x1B16	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 417 :: 		
L_end_InitialSetUpFosc:
0x1B18	0xB001    ADD	SP, SP, #4
0x1B1A	0x4770    BX	LR
0x1B1C	0x19400001  	#72000
0x1B20	0x00242000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_101_102_103_InitialSetUpFosc
___GenExcept:
;__Lib_System_101_102_103.c, 298 :: 		
0x1B24	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 299 :: 		
L___GenExcept27:
0x1B26	0xE7FE    B	L___GenExcept27
;__Lib_System_101_102_103.c, 300 :: 		
L_end___GenExcept:
0x1B28	0xB001    ADD	SP, SP, #4
0x1B2A	0x4770    BX	LR
; end of ___GenExcept
0x2174	0xB500    PUSH	(R14)
0x2176	0xF8DFB014  LDR	R11, [PC, #20]
0x217A	0xF8DFA014  LDR	R10, [PC, #20]
0x217E	0xF8DFC014  LDR	R12, [PC, #20]
0x2182	0xF7FFFA0D  BL	5536
0x2186	0xBD00    POP	(R15)
0x2188	0x4770    BX	LR
0x218A	0xBF00    NOP
0x218C	0x00002000  	#536870912
0x2190	0x00232000  	#536870947
0x2194	0x21500000  	#8528
0x21F4	0xB500    PUSH	(R14)
0x21F6	0xF8DFB010  LDR	R11, [PC, #16]
0x21FA	0xF8DFA010  LDR	R10, [PC, #16]
0x21FE	0xF7FFF9D9  BL	5556
0x2202	0xBD00    POP	(R15)
0x2204	0x4770    BX	LR
0x2206	0xBF00    NOP
0x2208	0x00002000  	#536870912
0x220C	0x00282000  	#536870952
;ST7735s_demo.c,1 :: ST7735s_demo_font [480]
0x1F70	0x00000000 ;ST7735s_demo_font+0
0x1F74	0x5F000000 ;ST7735s_demo_font+4
0x1F78	0x07000000 ;ST7735s_demo_font+8
0x1F7C	0x14000700 ;ST7735s_demo_font+12
0x1F80	0x147F147F ;ST7735s_demo_font+16
0x1F84	0x2A7F2A24 ;ST7735s_demo_font+20
0x1F88	0x08132312 ;ST7735s_demo_font+24
0x1F8C	0x49366264 ;ST7735s_demo_font+28
0x1F90	0x00502255 ;ST7735s_demo_font+32
0x1F94	0x00000305 ;ST7735s_demo_font+36
0x1F98	0x41221C00 ;ST7735s_demo_font+40
0x1F9C	0x22410000 ;ST7735s_demo_font+44
0x1FA0	0x0814001C ;ST7735s_demo_font+48
0x1FA4	0x0814083E ;ST7735s_demo_font+52
0x1FA8	0x08083E08 ;ST7735s_demo_font+56
0x1FAC	0x00305000 ;ST7735s_demo_font+60
0x1FB0	0x08080800 ;ST7735s_demo_font+64
0x1FB4	0x60000808 ;ST7735s_demo_font+68
0x1FB8	0x20000060 ;ST7735s_demo_font+72
0x1FBC	0x02040810 ;ST7735s_demo_font+76
0x1FC0	0x4549513E ;ST7735s_demo_font+80
0x1FC4	0x7F42003E ;ST7735s_demo_font+84
0x1FC8	0x61420040 ;ST7735s_demo_font+88
0x1FCC	0x21464951 ;ST7735s_demo_font+92
0x1FD0	0x314B4541 ;ST7735s_demo_font+96
0x1FD4	0x7F121418 ;ST7735s_demo_font+100
0x1FD8	0x45452710 ;ST7735s_demo_font+104
0x1FDC	0x4A3C3945 ;ST7735s_demo_font+108
0x1FE0	0x01304949 ;ST7735s_demo_font+112
0x1FE4	0x03050971 ;ST7735s_demo_font+116
0x1FE8	0x49494936 ;ST7735s_demo_font+120
0x1FEC	0x49490636 ;ST7735s_demo_font+124
0x1FF0	0x36001E29 ;ST7735s_demo_font+128
0x1FF4	0x00000036 ;ST7735s_demo_font+132
0x1FF8	0x00003656 ;ST7735s_demo_font+136
0x1FFC	0x41221408 ;ST7735s_demo_font+140
0x2000	0x14141400 ;ST7735s_demo_font+144
0x2004	0x41001414 ;ST7735s_demo_font+148
0x2008	0x02081422 ;ST7735s_demo_font+152
0x200C	0x06095101 ;ST7735s_demo_font+156
0x2010	0x41794932 ;ST7735s_demo_font+160
0x2014	0x11117E3E ;ST7735s_demo_font+164
0x2018	0x497F7E11 ;ST7735s_demo_font+168
0x201C	0x3E364949 ;ST7735s_demo_font+172
0x2020	0x22414141 ;ST7735s_demo_font+176
0x2024	0x2241417F ;ST7735s_demo_font+180
0x2028	0x49497F1C ;ST7735s_demo_font+184
0x202C	0x097F4149 ;ST7735s_demo_font+188
0x2030	0x3E010909 ;ST7735s_demo_font+192
0x2034	0x7A494941 ;ST7735s_demo_font+196
0x2038	0x0808087F ;ST7735s_demo_font+200
0x203C	0x7F41007F ;ST7735s_demo_font+204
0x2040	0x40200041 ;ST7735s_demo_font+208
0x2044	0x7F013F41 ;ST7735s_demo_font+212
0x2048	0x41221408 ;ST7735s_demo_font+216
0x204C	0x4040407F ;ST7735s_demo_font+220
0x2050	0x0C027F40 ;ST7735s_demo_font+224
0x2054	0x047F7F02 ;ST7735s_demo_font+228
0x2058	0x3E7F1008 ;ST7735s_demo_font+232
0x205C	0x3E414141 ;ST7735s_demo_font+236
0x2060	0x0909097F ;ST7735s_demo_font+240
0x2064	0x51413E06 ;ST7735s_demo_font+244
0x2068	0x097F5E21 ;ST7735s_demo_font+248
0x206C	0x46462919 ;ST7735s_demo_font+252
0x2070	0x31494949 ;ST7735s_demo_font+256
0x2074	0x017F0101 ;ST7735s_demo_font+260
0x2078	0x40403F01 ;ST7735s_demo_font+264
0x207C	0x201F3F40 ;ST7735s_demo_font+268
0x2080	0x3F1F2040 ;ST7735s_demo_font+272
0x2084	0x3F403840 ;ST7735s_demo_font+276
0x2088	0x14081463 ;ST7735s_demo_font+280
0x208C	0x70080763 ;ST7735s_demo_font+284
0x2090	0x51610708 ;ST7735s_demo_font+288
0x2094	0x00434549 ;ST7735s_demo_font+292
0x2098	0x0041417F ;ST7735s_demo_font+296
0x209C	0x10080402 ;ST7735s_demo_font+300
0x20A0	0x41410020 ;ST7735s_demo_font+304
0x20A4	0x0204007F ;ST7735s_demo_font+308
0x20A8	0x40040201 ;ST7735s_demo_font+312
0x20AC	0x40404040 ;ST7735s_demo_font+316
0x20B0	0x04020100 ;ST7735s_demo_font+320
0x20B4	0x54542000 ;ST7735s_demo_font+324
0x20B8	0x487F7854 ;ST7735s_demo_font+328
0x20BC	0x38384444 ;ST7735s_demo_font+332
0x20C0	0x20444444 ;ST7735s_demo_font+336
0x20C4	0x48444438 ;ST7735s_demo_font+340
0x20C8	0x5454387F ;ST7735s_demo_font+344
0x20CC	0x7E081854 ;ST7735s_demo_font+348
0x20D0	0x0C020109 ;ST7735s_demo_font+352
0x20D4	0x3E525252 ;ST7735s_demo_font+356
0x20D8	0x0404087F ;ST7735s_demo_font+360
0x20DC	0x7D440078 ;ST7735s_demo_font+364
0x20E0	0x40200040 ;ST7735s_demo_font+368
0x20E4	0x7F003D44 ;ST7735s_demo_font+372
0x20E8	0x00442810 ;ST7735s_demo_font+376
0x20EC	0x407F4100 ;ST7735s_demo_font+380
0x20F0	0x18047C00 ;ST7735s_demo_font+384
0x20F4	0x087C7804 ;ST7735s_demo_font+388
0x20F8	0x38780404 ;ST7735s_demo_font+392
0x20FC	0x38444444 ;ST7735s_demo_font+396
0x2100	0x1414147C ;ST7735s_demo_font+400
0x2104	0x14140808 ;ST7735s_demo_font+404
0x2108	0x087C7C18 ;ST7735s_demo_font+408
0x210C	0x48080404 ;ST7735s_demo_font+412
0x2110	0x20545454 ;ST7735s_demo_font+416
0x2114	0x40443F04 ;ST7735s_demo_font+420
0x2118	0x40403C20 ;ST7735s_demo_font+424
0x211C	0x201C7C20 ;ST7735s_demo_font+428
0x2120	0x3C1C2040 ;ST7735s_demo_font+432
0x2124	0x3C403040 ;ST7735s_demo_font+436
0x2128	0x28102844 ;ST7735s_demo_font+440
0x212C	0x50500C44 ;ST7735s_demo_font+444
0x2130	0x64443C50 ;ST7735s_demo_font+448
0x2134	0x00444C54 ;ST7735s_demo_font+452
0x2138	0x00413608 ;ST7735s_demo_font+456
0x213C	0x007F0000 ;ST7735s_demo_font+460
0x2140	0x36410000 ;ST7735s_demo_font+464
0x2144	0x08100008 ;ST7735s_demo_font+468
0x2148	0x78081008 ;ST7735s_demo_font+472
0x214C	0x78464146 ;ST7735s_demo_font+476
; end of ST7735s_demo_font
;,0 :: _initBlock_1 [12]
; Containing: ?ICS_w [1]
;             ?ICS?lstr1_ST7735s_demo [11]
0x2150	0x63694D80 ;_initBlock_1+0 : ?ICS_w at 0x2150 : ?ICS?lstr1_ST7735s_demo at 0x2151
0x2154	0x72416F72 ;_initBlock_1+4
0x2158	0x00616E65 ;_initBlock_1+8
; end of _initBlock_1
;ST7735s_demo.c,0 :: ?ICS?lstr2_ST7735s_demo [22]
0x215C	0x2E777777 ;?ICS?lstr2_ST7735s_demo+0
0x2160	0x632E6266 ;?ICS?lstr2_ST7735s_demo+4
0x2164	0x4D2F6D6F ;?ICS?lstr2_ST7735s_demo+8
0x2168	0x6F726369 ;?ICS?lstr2_ST7735s_demo+12
0x216C	0x6E657241 ;?ICS?lstr2_ST7735s_demo+16
0x2170	0x0061 ;?ICS?lstr2_ST7735s_demo+20
; end of ?ICS?lstr2_ST7735s_demo
;ST7735s_demo.c,0 :: ?ICS_l [1]
0x2172	0xA0 ;?ICS_l+0
; end of ?ICS_l
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0130      [38]    _Draw_Pixel
0x0158     [114]    _Set_Addr_Window
0x01CC      [80]    _Draw_Font_Pixel
0x021C      [64]    __SignedIntegralToFloat
0x025C      [44]    _ST7735_Word_Write
0x0288     [258]    __Sub_FP
0x038C     [634]    _print_I
0x0608      [66]    __FloatToSignedIntegral
0x064C     [406]    _Draw_Line
0x07E4     [292]    _print_char
0x0908     [138]    __Mul_FP
0x0998      [80]    _ST7735_Reset
0x09E8     [236]    _Configure_GPIOs
0x0AD4     [190]    _print_D
0x0B94     [104]    __Compare_FP
0x0BFC      [26]    _RAM_Address_Set
0x0C18     [140]    _ST7735_Write
0x0CA4      [80]    __Lib_System_101_102_103_SystemClockSetDefault
0x0CF4     [254]    __Add_FP
0x0DF4     [306]    _print_C
0x0F28     [744]    _print_F
0x1210     [768]    _ST7735_init
0x1510     [144]    _Set_Rotation
0x15A0      [20]    ___CC2DW
0x15B4      [58]    ___FillZeros
0x15F0      [26]    _Swap_Colour
0x160C     [392]    _Draw_Rectangle
0x1794     [122]    _print_str
0x1810     [100]    _TFT_fill
0x1874     [666]    _Draw_Circle
0x1B10      [20]    __Lib_System_101_102_103_InitialSetUpFosc
0x1B24       [8]    ___GenExcept
0x1B2C     [240]    __Lib_System_101_102_103_InitialSetUpRCCRCC2
0x1C20     [848]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [1]    _w
0x20000001      [11]    ?lstr1_ST7735s_demo
0x2000000C      [22]    ?lstr2_ST7735s_demo
0x20000022       [1]    _l
0x20000024       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x1F70     [480]    ST7735s_demo_font
0x2150       [1]    ?ICS_w
0x2151      [11]    ?ICS?lstr1_ST7735s_demo
0x215C      [22]    ?ICS?lstr2_ST7735s_demo
0x2172       [1]    ?ICS_l
