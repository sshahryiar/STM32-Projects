
AHT10_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004364  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080046c4  080046c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c4  080046c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  080046d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080046d8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092de  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181a  00000000  00000000  00029313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167cd  00000000  00000000  0002bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b36e  00000000  00000000  000425ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b76  00000000  00000000  0004d91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000ce4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004458 	.word	0x08004458

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004458 	.word	0x08004458

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2f>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a58:	bf24      	itt	cs
 8000a5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a62:	d90d      	bls.n	8000a80 <__aeabi_d2f+0x30>
 8000a64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a78:	bf08      	it	eq
 8000a7a:	f020 0001 	biceq.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a84:	d121      	bne.n	8000aca <__aeabi_d2f+0x7a>
 8000a86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8a:	bfbc      	itt	lt
 8000a8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	4770      	bxlt	lr
 8000a92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9a:	f1c2 0218 	rsb	r2, r2, #24
 8000a9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aaa:	bf18      	it	ne
 8000aac:	f040 0001 	orrne.w	r0, r0, #1
 8000ab0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000abc:	ea40 000c 	orr.w	r0, r0, ip
 8000ac0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac8:	e7cc      	b.n	8000a64 <__aeabi_d2f+0x14>
 8000aca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ace:	d107      	bne.n	8000ae0 <__aeabi_d2f+0x90>
 8000ad0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad4:	bf1e      	ittt	ne
 8000ad6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bxne	lr
 8000ae0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_frsub>:
 8000af0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	e002      	b.n	8000afc <__addsf3>
 8000af6:	bf00      	nop

08000af8 <__aeabi_fsub>:
 8000af8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000afc <__addsf3>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	bf1f      	itttt	ne
 8000b00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b04:	ea92 0f03 	teqne	r2, r3
 8000b08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b10:	d06a      	beq.n	8000be8 <__addsf3+0xec>
 8000b12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1a:	bfc1      	itttt	gt
 8000b1c:	18d2      	addgt	r2, r2, r3
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	4048      	eorgt	r0, r1
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	2b19      	cmp	r3, #25
 8000b2a:	bf88      	it	hi
 8000b2c:	4770      	bxhi	lr
 8000b2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4249      	negne	r1, r1
 8000b4e:	ea92 0f03 	teq	r2, r3
 8000b52:	d03f      	beq.n	8000bd4 <__addsf3+0xd8>
 8000b54:	f1a2 0201 	sub.w	r2, r2, #1
 8000b58:	fa41 fc03 	asr.w	ip, r1, r3
 8000b5c:	eb10 000c 	adds.w	r0, r0, ip
 8000b60:	f1c3 0320 	rsb	r3, r3, #32
 8000b64:	fa01 f103 	lsl.w	r1, r1, r3
 8000b68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6c:	d502      	bpl.n	8000b74 <__addsf3+0x78>
 8000b6e:	4249      	negs	r1, r1
 8000b70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b78:	d313      	bcc.n	8000ba2 <__addsf3+0xa6>
 8000b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7e:	d306      	bcc.n	8000b8e <__addsf3+0x92>
 8000b80:	0840      	lsrs	r0, r0, #1
 8000b82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b86:	f102 0201 	add.w	r2, r2, #1
 8000b8a:	2afe      	cmp	r2, #254	; 0xfe
 8000b8c:	d251      	bcs.n	8000c32 <__addsf3+0x136>
 8000b8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ba0:	4770      	bx	lr
 8000ba2:	0049      	lsls	r1, r1, #1
 8000ba4:	eb40 0000 	adc.w	r0, r0, r0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	bf28      	it	cs
 8000bac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb0:	d2ed      	bcs.n	8000b8e <__addsf3+0x92>
 8000bb2:	fab0 fc80 	clz	ip, r0
 8000bb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bba:	ebb2 020c 	subs.w	r2, r2, ip
 8000bbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc2:	bfaa      	itet	ge
 8000bc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc8:	4252      	neglt	r2, r2
 8000bca:	4318      	orrge	r0, r3
 8000bcc:	bfbc      	itt	lt
 8000bce:	40d0      	lsrlt	r0, r2
 8000bd0:	4318      	orrlt	r0, r3
 8000bd2:	4770      	bx	lr
 8000bd4:	f092 0f00 	teq	r2, #0
 8000bd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bdc:	bf06      	itte	eq
 8000bde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be2:	3201      	addeq	r2, #1
 8000be4:	3b01      	subne	r3, #1
 8000be6:	e7b5      	b.n	8000b54 <__addsf3+0x58>
 8000be8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf0:	bf18      	it	ne
 8000bf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf6:	d021      	beq.n	8000c3c <__addsf3+0x140>
 8000bf8:	ea92 0f03 	teq	r2, r3
 8000bfc:	d004      	beq.n	8000c08 <__addsf3+0x10c>
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	bf08      	it	eq
 8000c04:	4608      	moveq	r0, r1
 8000c06:	4770      	bx	lr
 8000c08:	ea90 0f01 	teq	r0, r1
 8000c0c:	bf1c      	itt	ne
 8000c0e:	2000      	movne	r0, #0
 8000c10:	4770      	bxne	lr
 8000c12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c16:	d104      	bne.n	8000c22 <__addsf3+0x126>
 8000c18:	0040      	lsls	r0, r0, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	4770      	bx	lr
 8000c22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c26:	bf3c      	itt	cc
 8000c28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bxcc	lr
 8000c2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	4770      	bx	lr
 8000c3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c40:	bf16      	itet	ne
 8000c42:	4608      	movne	r0, r1
 8000c44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c48:	4601      	movne	r1, r0
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	bf06      	itte	eq
 8000c4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c52:	ea90 0f01 	teqeq	r0, r1
 8000c56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_ui2f>:
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e004      	b.n	8000c6c <__aeabi_i2f+0x8>
 8000c62:	bf00      	nop

08000c64 <__aeabi_i2f>:
 8000c64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c68:	bf48      	it	mi
 8000c6a:	4240      	negmi	r0, r0
 8000c6c:	ea5f 0c00 	movs.w	ip, r0
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c78:	4601      	mov	r1, r0
 8000c7a:	f04f 0000 	mov.w	r0, #0
 8000c7e:	e01c      	b.n	8000cba <__aeabi_l2f+0x2a>

08000c80 <__aeabi_ul2f>:
 8000c80:	ea50 0201 	orrs.w	r2, r0, r1
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <__aeabi_l2f+0x14>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_l2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c9c:	d502      	bpl.n	8000ca4 <__aeabi_l2f+0x14>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	ea5f 0c01 	movs.w	ip, r1
 8000ca8:	bf02      	ittt	eq
 8000caa:	4684      	moveq	ip, r0
 8000cac:	4601      	moveq	r1, r0
 8000cae:	2000      	moveq	r0, #0
 8000cb0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb4:	bf08      	it	eq
 8000cb6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cbe:	fabc f28c 	clz	r2, ip
 8000cc2:	3a08      	subs	r2, #8
 8000cc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc8:	db10      	blt.n	8000cec <__aeabi_l2f+0x5c>
 8000cca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	f020 0001 	biceq.w	r0, r0, #1
 8000cea:	4770      	bx	lr
 8000cec:	f102 0220 	add.w	r2, r2, #32
 8000cf0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0a:	4770      	bx	lr

08000d0c <__gesf2>:
 8000d0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d10:	e006      	b.n	8000d20 <__cmpsf2+0x4>
 8000d12:	bf00      	nop

08000d14 <__lesf2>:
 8000d14:	f04f 0c01 	mov.w	ip, #1
 8000d18:	e002      	b.n	8000d20 <__cmpsf2+0x4>
 8000d1a:	bf00      	nop

08000d1c <__cmpsf2>:
 8000d1c:	f04f 0c01 	mov.w	ip, #1
 8000d20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d011      	beq.n	8000d5c <__cmpsf2+0x40>
 8000d38:	b001      	add	sp, #4
 8000d3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d3e:	bf18      	it	ne
 8000d40:	ea90 0f01 	teqne	r0, r1
 8000d44:	bf58      	it	pl
 8000d46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d4a:	bf88      	it	hi
 8000d4c:	17c8      	asrhi	r0, r1, #31
 8000d4e:	bf38      	it	cc
 8000d50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d54:	bf18      	it	ne
 8000d56:	f040 0001 	orrne.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d60:	d102      	bne.n	8000d68 <__cmpsf2+0x4c>
 8000d62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d66:	d105      	bne.n	8000d74 <__cmpsf2+0x58>
 8000d68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d6c:	d1e4      	bne.n	8000d38 <__cmpsf2+0x1c>
 8000d6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d72:	d0e1      	beq.n	8000d38 <__cmpsf2+0x1c>
 8000d74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <__aeabi_cfrcmple>:
 8000d7c:	4684      	mov	ip, r0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	4661      	mov	r1, ip
 8000d82:	e7ff      	b.n	8000d84 <__aeabi_cfcmpeq>

08000d84 <__aeabi_cfcmpeq>:
 8000d84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d86:	f7ff ffc9 	bl	8000d1c <__cmpsf2>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	bf48      	it	mi
 8000d8e:	f110 0f00 	cmnmi.w	r0, #0
 8000d92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d94 <__aeabi_fcmpeq>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff fff4 	bl	8000d84 <__aeabi_cfcmpeq>
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2001      	moveq	r0, #1
 8000da0:	2000      	movne	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmplt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffea 	bl	8000d84 <__aeabi_cfcmpeq>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmple>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffe0 	bl	8000d84 <__aeabi_cfcmpeq>
 8000dc4:	bf94      	ite	ls
 8000dc6:	2001      	movls	r0, #1
 8000dc8:	2000      	movhi	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_fcmpge>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff ffd2 	bl	8000d7c <__aeabi_cfrcmple>
 8000dd8:	bf94      	ite	ls
 8000dda:	2001      	movls	r0, #1
 8000ddc:	2000      	movhi	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_fcmpgt>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffc8 	bl	8000d7c <__aeabi_cfrcmple>
 8000dec:	bf34      	ite	cc
 8000dee:	2001      	movcc	r0, #1
 8000df0:	2000      	movcs	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_f2iz>:
 8000df8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e00:	d30f      	bcc.n	8000e22 <__aeabi_f2iz+0x2a>
 8000e02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e0a:	d90d      	bls.n	8000e28 <__aeabi_f2iz+0x30>
 8000e0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e14:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e18:	fa23 f002 	lsr.w	r0, r3, r2
 8000e1c:	bf18      	it	ne
 8000e1e:	4240      	negne	r0, r0
 8000e20:	4770      	bx	lr
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	4770      	bx	lr
 8000e28:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_f2iz+0x3a>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d105      	bne.n	8000e3e <__aeabi_f2iz+0x46>
 8000e32:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e3c:	4770      	bx	lr
 8000e3e:	f04f 0000 	mov.w	r0, #0
 8000e42:	4770      	bx	lr

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  float T = 0.0;
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  float RH = 0.0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e56:	f000 fa49 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5a:	f000 f859 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f000 f903 	bl	8001068 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e62:	f000 f89b 	bl	8000f9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e66:	f000 f8c7 	bl	8000ff8 <MX_SPI1_Init>
  AHT10_init();
 8000e6a:	f002 fb7f 	bl	800356c <AHT10_init>
  ST7735_init();
 8000e6e:	f002 fc7b 	bl	8003768 <ST7735_init>


  TFT_fill(BLACK);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f002 feaa 	bl	8003bcc <TFT_fill>
  print_str(20, 10, 2, YELLOW, BLACK, "AHT10 Demo");
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <main+0xc0>)
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e84:	2202      	movs	r2, #2
 8000e86:	210a      	movs	r1, #10
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f002 ff7f 	bl	8003d8c <print_str>
  print_str(10, 40, 2, CYAN, BLACK, "RH (%):");
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <main+0xc4>)
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	2300      	movs	r3, #0
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	2128      	movs	r1, #40	; 0x28
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f002 ff74 	bl	8003d8c <print_str>
  print_str(10, 60, 2, CYAN, BLACK, "T ('C):");
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <main+0xc8>)
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	213c      	movs	r1, #60	; 0x3c
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f002 ff69 	bl	8003d8c <print_str>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  RH = AHT10_read_relative_humidity();
 8000eba:	f002 fc23 	bl	8003704 <AHT10_read_relative_humidity>
 8000ebe:	6038      	str	r0, [r7, #0]
	  T = AHT10_read_temperature();
 8000ec0:	f002 fbe4 	bl	800368c <AHT10_read_temperature>
 8000ec4:	6078      	str	r0, [r7, #4]

	  print_F(90, 40, 2, GREEN, BLACK, RH, 1);
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	2128      	movs	r1, #40	; 0x28
 8000eda:	205a      	movs	r0, #90	; 0x5a
 8000edc:	f003 f97e 	bl	80041dc <print_F>
	  print_F(90, 60, 2, GREEN, BLACK, T, 1);
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	213c      	movs	r1, #60	; 0x3c
 8000ef4:	205a      	movs	r0, #90	; 0x5a
 8000ef6:	f003 f971 	bl	80041dc <print_F>
	  HAL_Delay(400);
 8000efa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000efe:	f000 fa57 	bl	80013b0 <HAL_Delay>
	  RH = AHT10_read_relative_humidity();
 8000f02:	e7da      	b.n	8000eba <main+0x76>
 8000f04:	08004470 	.word	0x08004470
 8000f08:	0800447c 	.word	0x0800447c
 8000f0c:	08004484 	.word	0x08004484

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	; 0x40
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	2228      	movs	r2, #40	; 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 fa92 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fc9b 	bl	8002894 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f64:	f000 f8ca 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 ff08 	bl	8002d98 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f8e:	f000 f8b5 	bl	80010fc <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3740      	adds	r7, #64	; 0x40
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <MX_I2C1_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_I2C1_Init+0x58>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fda:	f000 fc8d 	bl	80018f8 <HAL_I2C_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe4:	f000 f88a 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000028 	.word	0x20000028
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	000186a0 	.word	0x000186a0

08000ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_SPI1_Init+0x68>)
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <MX_SPI1_Init+0x6c>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_SPI1_Init+0x68>)
 8001004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_SPI1_Init+0x68>)
 800100c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001010:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_SPI1_Init+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_SPI1_Init+0x68>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_SPI1_Init+0x68>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_SPI1_Init+0x68>)
 8001026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_SPI1_Init+0x68>)
 800102e:	2220      	movs	r2, #32
 8001030:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_SPI1_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_SPI1_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_SPI1_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_SPI1_Init+0x68>)
 8001046:	220a      	movs	r2, #10
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_SPI1_Init+0x68>)
 800104c:	f002 f828 	bl	80030a0 <HAL_SPI_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001056:	f000 f851 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000007c 	.word	0x2000007c
 8001064:	40013000 	.word	0x40013000

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_GPIO_Init+0x8c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_GPIO_Init+0x8c>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_GPIO_Init+0x8c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_GPIO_Init+0x8c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <MX_GPIO_Init+0x8c>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_GPIO_Init+0x8c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_GPIO_Init+0x8c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <MX_GPIO_Init+0x8c>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_GPIO_Init+0x8c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_RST_Pin|ST7735_CS_Pin|ST7735_RS_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	211c      	movs	r1, #28
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <MX_GPIO_Init+0x90>)
 80010ca:	f000 fbfd 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735_RST_Pin ST7735_CS_Pin ST7735_RS_Pin */
  GPIO_InitStruct.Pin = ST7735_RST_Pin|ST7735_CS_Pin|ST7735_RS_Pin;
 80010ce:	231c      	movs	r3, #28
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2302      	movs	r3, #2
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_GPIO_Init+0x90>)
 80010e6:	f000 fa6b 	bl	80015c0 <HAL_GPIO_Init>

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_MspInit+0x40>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <HAL_MspInit+0x40>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_MspInit+0x40>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_MspInit+0x40>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_MspInit+0x40>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_MspInit+0x40>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <HAL_I2C_MspInit+0x70>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d123      	bne.n	80011b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_I2C_MspInit+0x74>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <HAL_I2C_MspInit+0x74>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_I2C_MspInit+0x74>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AHT10_SCL_Pin|AHT10_SDA_Pin;
 8001184:	23c0      	movs	r3, #192	; 0xc0
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001188:	2312      	movs	r3, #18
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <HAL_I2C_MspInit+0x78>)
 8001198:	f000 fa12 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_I2C_MspInit+0x74>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_I2C_MspInit+0x74>)
 80011a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a6:	61d3      	str	r3, [r2, #28]
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_I2C_MspInit+0x74>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40005400 	.word	0x40005400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <HAL_SPI_MspInit+0x70>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d123      	bne.n	8001230 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_SPI_MspInit+0x74>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_SPI_MspInit+0x74>)
 80011ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_SPI_MspInit+0x74>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_SPI_MspInit+0x74>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_SPI_MspInit+0x74>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_SPI_MspInit+0x74>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7735_CLK_Pin|ST7735_MOSI_Pin;
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_SPI_MspInit+0x78>)
 800122c:	f000 f9c8 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013000 	.word	0x40013000
 800123c:	40021000 	.word	0x40021000
 8001240:	40010800 	.word	0x40010800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128a:	f000 f875 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}

08001292 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c6:	f7ff ffe4 	bl	8001292 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f003 f899 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ce:	f7ff fdb9 	bl	8000e44 <main>
  bx lr
 80012d2:	4770      	bx	lr
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012dc:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 80012e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012e4:	200000d8 	.word	0x200000d8

080012e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x28>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x28>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f92b 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	200f      	movs	r0, #15
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fefe 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f935 	bl	80015a6 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f90b 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_IncTick+0x20>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000008 	.word	0x20000008
 8001398:	200000d4 	.word	0x200000d4

0800139c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200000d4 	.word	0x200000d4

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fff0 	bl	800139c <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffe0 	bl	800139c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff90 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff49 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff5e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff90 	bl	80014b0 <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5f 	bl	800145c <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffb0 	bl	8001514 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e169      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d4:	2201      	movs	r2, #1
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8158 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a9a      	ldr	r2, [pc, #616]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d05e      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 80015fc:	4a98      	ldr	r2, [pc, #608]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d875      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001602:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d058      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001608:	4a96      	ldr	r2, [pc, #600]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d86f      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800160e:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d052      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001614:	4a94      	ldr	r2, [pc, #592]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d869      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800161a:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_GPIO_Init+0x2ac>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04c      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001620:	4a92      	ldr	r2, [pc, #584]	; (800186c <HAL_GPIO_Init+0x2ac>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d863      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001626:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d046      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 800162c:	4a90      	ldr	r2, [pc, #576]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d85d      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d82a      	bhi.n	800168c <HAL_GPIO_Init+0xcc>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d859      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <HAL_GPIO_Init+0x80>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	080016bb 	.word	0x080016bb
 8001644:	08001695 	.word	0x08001695
 8001648:	080016a7 	.word	0x080016a7
 800164c:	080016e9 	.word	0x080016e9
 8001650:	080016ef 	.word	0x080016ef
 8001654:	080016ef 	.word	0x080016ef
 8001658:	080016ef 	.word	0x080016ef
 800165c:	080016ef 	.word	0x080016ef
 8001660:	080016ef 	.word	0x080016ef
 8001664:	080016ef 	.word	0x080016ef
 8001668:	080016ef 	.word	0x080016ef
 800166c:	080016ef 	.word	0x080016ef
 8001670:	080016ef 	.word	0x080016ef
 8001674:	080016ef 	.word	0x080016ef
 8001678:	080016ef 	.word	0x080016ef
 800167c:	080016ef 	.word	0x080016ef
 8001680:	080016ef 	.word	0x080016ef
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016b1 	.word	0x080016b1
 800168c:	4a79      	ldr	r2, [pc, #484]	; (8001874 <HAL_GPIO_Init+0x2b4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001692:	e02c      	b.n	80016ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e029      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	3304      	adds	r3, #4
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e024      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	3308      	adds	r3, #8
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e01f      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	330c      	adds	r3, #12
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	e01a      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c2:	2304      	movs	r3, #4
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e013      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	611a      	str	r2, [r3, #16]
          break;
 80016da:	e009      	b.n	80016f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	615a      	str	r2, [r3, #20]
          break;
 80016e6:	e003      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          break;
 80016ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d801      	bhi.n	80016fa <HAL_GPIO_Init+0x13a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	e001      	b.n	80016fe <HAL_GPIO_Init+0x13e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d802      	bhi.n	800170c <HAL_GPIO_Init+0x14c>
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x152>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3b08      	subs	r3, #8
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	210f      	movs	r1, #15
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	431a      	orrs	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80b1 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2bc>)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a40      	ldr	r2, [pc, #256]	; (8001880 <HAL_GPIO_Init+0x2c0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_GPIO_Init+0x1ec>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3f      	ldr	r2, [pc, #252]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1e8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3e      	ldr	r2, [pc, #248]	; (8001888 <HAL_GPIO_Init+0x2c8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1e4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <HAL_GPIO_Init+0x2cc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1e0>
 800179c:	2303      	movs	r3, #3
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017ac:	2300      	movs	r3, #0
 80017ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017be:	492f      	ldr	r1, [pc, #188]	; (800187c <HAL_GPIO_Init+0x2bc>)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	492c      	ldr	r1, [pc, #176]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4928      	ldr	r1, [pc, #160]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	491e      	ldr	r1, [pc, #120]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	4918      	ldr	r1, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4914      	ldr	r1, [pc, #80]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d021      	beq.n	8001894 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x2e2>
 800185e:	bf00      	nop
 8001860:	10320000 	.word	0x10320000
 8001864:	10310000 	.word	0x10310000
 8001868:	10220000 	.word	0x10220000
 800186c:	10210000 	.word	0x10210000
 8001870:	10120000 	.word	0x10120000
 8001874:	10110000 	.word	0x10110000
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000
 8001880:	40010800 	.word	0x40010800
 8001884:	40010c00 	.word	0x40010c00
 8001888:	40011000 	.word	0x40011000
 800188c:	40011400 	.word	0x40011400
 8001890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	43db      	mvns	r3, r3
 800189c:	4909      	ldr	r1, [pc, #36]	; (80018c4 <HAL_GPIO_Init+0x304>)
 800189e:	4013      	ands	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3301      	adds	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f47f ae8e 	bne.w	80015d4 <HAL_GPIO_Init+0x14>
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	372c      	adds	r7, #44	; 0x2c
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e12b      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fc14 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800194a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800195a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f001 fb6e 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <HAL_I2C_Init+0x274>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d807      	bhi.n	800197c <HAL_I2C_Init+0x84>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a80      	ldr	r2, [pc, #512]	; (8001b70 <HAL_I2C_Init+0x278>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e006      	b.n	800198a <HAL_I2C_Init+0x92>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a7d      	ldr	r2, [pc, #500]	; (8001b74 <HAL_I2C_Init+0x27c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	bf94      	ite	ls
 8001984:	2301      	movls	r3, #1
 8001986:	2300      	movhi	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0e7      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4a78      	ldr	r2, [pc, #480]	; (8001b78 <HAL_I2C_Init+0x280>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0c9b      	lsrs	r3, r3, #18
 800199c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_I2C_Init+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d802      	bhi.n	80019cc <HAL_I2C_Init+0xd4>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	e009      	b.n	80019e0 <HAL_I2C_Init+0xe8>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a69      	ldr	r2, [pc, #420]	; (8001b7c <HAL_I2C_Init+0x284>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	495c      	ldr	r1, [pc, #368]	; (8001b6c <HAL_I2C_Init+0x274>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d819      	bhi.n	8001a34 <HAL_I2C_Init+0x13c>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e59      	subs	r1, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a14:	400b      	ands	r3, r1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_I2C_Init+0x138>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e59      	subs	r1, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	e051      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e04f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d111      	bne.n	8001a60 <HAL_I2C_Init+0x168>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e012      	b.n	8001a86 <HAL_I2C_Init+0x18e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Init+0x196>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e022      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10e      	bne.n	8001ab4 <HAL_I2C_Init+0x1bc>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e58      	subs	r0, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	e00f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	0099      	lsls	r1, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6911      	ldr	r1, [r2, #16]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68d2      	ldr	r2, [r2, #12]
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	000186a0 	.word	0x000186a0
 8001b70:	001e847f 	.word	0x001e847f
 8001b74:	003d08ff 	.word	0x003d08ff
 8001b78:	431bde83 	.word	0x431bde83
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	817b      	strh	r3, [r7, #10]
 8001b90:	4613      	mov	r3, r2
 8001b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fc02 	bl	800139c <HAL_GetTick>
 8001b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	f040 80e0 	bne.w	8001d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2319      	movs	r3, #25
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4970      	ldr	r1, [pc, #448]	; (8001d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fc92 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e0d3      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2C_Master_Transmit+0x50>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e0cc      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d007      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2221      	movs	r2, #33	; 0x21
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2210      	movs	r2, #16
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	893a      	ldrh	r2, [r7, #8]
 8001c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c38:	8979      	ldrh	r1, [r7, #10]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fafc 	bl	800223c <I2C_MasterRequestWrite>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e08d      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c64:	e066      	b.n	8001d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fd0c 	bl	8002688 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d107      	bne.n	8001c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e06b      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d11b      	bne.n	8001d08 <HAL_I2C_Master_Transmit+0x188>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d017      	beq.n	8001d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	6a39      	ldr	r1, [r7, #32]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fcfc 	bl	800270a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d107      	bne.n	8001d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e01a      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d194      	bne.n	8001c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	00100002 	.word	0x00100002
 8001d78:	ffff0000 	.word	0xffff0000

08001d7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08c      	sub	sp, #48	; 0x30
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	817b      	strh	r3, [r7, #10]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fb02 	bl	800139c <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	f040 823f 	bne.w	8002226 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2319      	movs	r3, #25
 8001dae:	2201      	movs	r2, #1
 8001db0:	497f      	ldr	r1, [pc, #508]	; (8001fb0 <HAL_I2C_Master_Receive+0x234>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fb92 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e232      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_I2C_Master_Receive+0x54>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e22b      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d007      	beq.n	8001df6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2222      	movs	r2, #34	; 0x22
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2210      	movs	r2, #16
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	893a      	ldrh	r2, [r7, #8]
 8001e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a5f      	ldr	r2, [pc, #380]	; (8001fb4 <HAL_I2C_Master_Receive+0x238>)
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e38:	8979      	ldrh	r1, [r7, #10]
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fa7e 	bl	8002340 <I2C_MasterRequestRead>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e1ec      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d113      	bne.n	8001e7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e1c0      	b.n	8002200 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d11e      	bne.n	8001ec4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e96:	b672      	cpsid	i
}
 8001e98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec0:	b662      	cpsie	i
}
 8001ec2:	e035      	b.n	8001f30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d11e      	bne.n	8001f0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f06:	b662      	cpsie	i
}
 8001f08:	e012      	b.n	8001f30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f30:	e166      	b.n	8002200 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	f200 811f 	bhi.w	800217a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d123      	bne.n	8001f8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fc1f 	bl	800278c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e167      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f8a:	e139      	b.n	8002200 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d152      	bne.n	800203a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <HAL_I2C_Master_Receive+0x23c>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fa9c 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e13c      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
 8001fae:	bf00      	nop
 8001fb0:	00100002 	.word	0x00100002
 8001fb4:	ffff0000 	.word	0xffff0000
 8001fb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002002:	b662      	cpsie	i
}
 8002004:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002038:	e0e2      	b.n	8002200 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002040:	2200      	movs	r2, #0
 8002042:	497b      	ldr	r1, [pc, #492]	; (8002230 <HAL_I2C_Master_Receive+0x4b4>)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fa49 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0e9      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_I2C_Master_Receive+0x4b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	08db      	lsrs	r3, r3, #3
 80020a0:	4a65      	ldr	r2, [pc, #404]	; (8002238 <HAL_I2C_Master_Receive+0x4bc>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0a1a      	lsrs	r2, r3, #8
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00da      	lsls	r2, r3, #3
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d118      	bne.n	80020f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020e2:	b662      	cpsie	i
}
 80020e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e09a      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d1d9      	bne.n	80020b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002142:	b662      	cpsie	i
}
 8002144:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002178:	e042      	b.n	8002200 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fb04 	bl	800278c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e04c      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d118      	bne.n	8002200 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f ae94 	bne.w	8001f32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	00010004 	.word	0x00010004
 8002234:	20000000 	.word	0x20000000
 8002238:	14f8b589 	.word	0x14f8b589

0800223c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	460b      	mov	r3, r1
 800224a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d006      	beq.n	8002266 <I2C_MasterRequestWrite+0x2a>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d003      	beq.n	8002266 <I2C_MasterRequestWrite+0x2a>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002264:	d108      	bne.n	8002278 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e00b      	b.n	8002290 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	2b12      	cmp	r3, #18
 800227e:	d107      	bne.n	8002290 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f91d 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b6:	d103      	bne.n	80022c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e035      	b.n	8002330 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022cc:	d108      	bne.n	80022e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e01b      	b.n	8002318 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	11db      	asrs	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0306 	and.w	r3, r3, #6
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f063 030f 	orn	r3, r3, #15
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <I2C_MasterRequestWrite+0xfc>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f943 	bl	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e010      	b.n	8002330 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800230e:	897b      	ldrh	r3, [r7, #10]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <I2C_MasterRequestWrite+0x100>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f933 	bl	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	00010008 	.word	0x00010008
 800233c:	00010002 	.word	0x00010002

08002340 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	460b      	mov	r3, r1
 800234e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002364:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d006      	beq.n	800237a <I2C_MasterRequestRead+0x3a>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d003      	beq.n	800237a <I2C_MasterRequestRead+0x3a>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002378:	d108      	bne.n	800238c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e00b      	b.n	80023a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	2b11      	cmp	r3, #17
 8002392:	d107      	bne.n	80023a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f893 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ca:	d103      	bne.n	80023d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e079      	b.n	80024cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e0:	d108      	bne.n	80023f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023e2:	897b      	ldrh	r3, [r7, #10]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	e05f      	b.n	80024b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023f4:	897b      	ldrh	r3, [r7, #10]
 80023f6:	11db      	asrs	r3, r3, #7
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 0306 	and.w	r3, r3, #6
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f063 030f 	orn	r3, r3, #15
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4930      	ldr	r1, [pc, #192]	; (80024d4 <I2C_MasterRequestRead+0x194>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8b9 	bl	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e054      	b.n	80024cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4929      	ldr	r1, [pc, #164]	; (80024d8 <I2C_MasterRequestRead+0x198>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8a9 	bl	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e044      	b.n	80024cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002466:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f831 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248e:	d103      	bne.n	8002498 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e017      	b.n	80024cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800249c:	897b      	ldrh	r3, [r7, #10]
 800249e:	11db      	asrs	r3, r3, #7
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 0306 	and.w	r3, r3, #6
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f063 030e 	orn	r3, r3, #14
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4907      	ldr	r1, [pc, #28]	; (80024d8 <I2C_MasterRequestRead+0x198>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f865 	bl	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	00010008 	.word	0x00010008
 80024d8:	00010002 	.word	0x00010002

080024dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ec:	e025      	b.n	800253a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d021      	beq.n	800253a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7fe ff51 	bl	800139c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d116      	bne.n	800253a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0220 	orr.w	r2, r3, #32
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e023      	b.n	8002582 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10d      	bne.n	8002560 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	e00c      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4013      	ands	r3, r2
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	429a      	cmp	r2, r3
 800257e:	d0b6      	beq.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002598:	e051      	b.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d123      	bne.n	80025f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e046      	b.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d021      	beq.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7fe fecf 	bl	800139c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e020      	b.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10c      	bne.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4013      	ands	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e00b      	b.n	800267a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d18d      	bne.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002694:	e02d      	b.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f8ce 	bl	8002838 <I2C_IsAcknowledgeFailed>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e02d      	b.n	8002702 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d021      	beq.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fe75 	bl	800139c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d116      	bne.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e007      	b.n	8002702 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b80      	cmp	r3, #128	; 0x80
 80026fe:	d1ca      	bne.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002716:	e02d      	b.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f88d 	bl	8002838 <I2C_IsAcknowledgeFailed>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e02d      	b.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d021      	beq.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002730:	f7fe fe34 	bl	800139c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d302      	bcc.n	8002746 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d1ca      	bne.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002798:	e042      	b.n	8002820 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d119      	bne.n	80027dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0210 	mvn.w	r2, #16
 80027b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e029      	b.n	8002830 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027dc:	f7fe fdde 	bl	800139c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d302      	bcc.n	80027f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e007      	b.n	8002830 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d1b5      	bne.n	800279a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d11b      	bne.n	8002888 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002858:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e272      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d00c      	beq.n	80028da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c0:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b89      	ldr	r3, [pc, #548]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x12c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d168      	bne.n	80029c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e24c      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x76>
 80028fc:	4b80      	ldr	r3, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a7f      	ldr	r2, [pc, #508]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xbc>
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 8002950:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fd14 	bl	800139c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe fd10 	bl	800139c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e200      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe4>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fd00 	bl	800139c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fcfc 	bl	800139c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1ec      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x10c>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1c0      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4939      	ldr	r1, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fcb5 	bl	800139c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe fcb1 	bl	800139c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1a1      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4927      	ldr	r1, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fc94 	bl	800139c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fe fc90 	bl	800139c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e180      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03a      	beq.n	8002b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fc74 	bl	800139c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fc70 	bl	800139c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e160      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f000 fac4 	bl	8003064 <RCC_Delay>
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fc5a 	bl	800139c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe fc56 	bl	800139c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d908      	bls.n	8002b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e146      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	42420000 	.word	0x42420000
 8002b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e9      	bne.n	8002aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a6 	beq.w	8002c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a87      	ldr	r2, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]
 8002b42:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b82      	ldr	r3, [pc, #520]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a7e      	ldr	r2, [pc, #504]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fc17 	bl	800139c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe fc13 	bl	800139c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	; 0x64
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e103      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x312>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bae:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a69      	ldr	r2, [pc, #420]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	e01c      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x356>
 8002bd0:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a5d      	ldr	r2, [pc, #372]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e00b      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bea:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a5a      	ldr	r2, [pc, #360]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d015      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fbc7 	bl	800139c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe fbc3 	bl	800139c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0b1      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCC_OscConfig+0x37e>
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fbb1 	bl	800139c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fbad 	bl	800139c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e09b      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8087 	beq.w	8002d8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d061      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d146      	bne.n	8002d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe fb81 	bl	800139c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fb7d 	bl	800139c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e06d      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4921      	ldr	r1, [pc, #132]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a19      	ldr	r1, [r3, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	491b      	ldr	r1, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fb51 	bl	800139c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe fb4d 	bl	800139c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e03d      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x46a>
 8002d1c:	e035      	b.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fb3a 	bl	800139c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fb36 	bl	800139c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e026      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x498>
 8002d4a:	e01e      	b.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e019      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_OscConfig+0x500>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0207 	bic.w	r2, r3, #7
 8002dc2:	4965      	ldr	r1, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d040      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e073      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fa88 	bl	800139c <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fa84 	bl	800139c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e053      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f9e6 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	080044cc 	.word	0x080044cc
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b490      	push	{r4, r7}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f74:	1d3c      	adds	r4, r7, #4
 8002f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f7c:	f240 2301 	movw	r3, #513	; 0x201
 8002f80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d002      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8002faa:	e02b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fae:	623b      	str	r3, [r7, #32]
      break;
 8002fb0:	e02b      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3328      	adds	r3, #40	; 0x28
 8002fbc:	443b      	add	r3, r7
 8002fbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d012      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	0c5b      	lsrs	r3, r3, #17
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	3328      	adds	r3, #40	; 0x28
 8002fda:	443b      	add	r3, r7
 8002fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fe6:	fb03 f202 	mul.w	r2, r3, r2
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e004      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	623b      	str	r3, [r7, #32]
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003006:	623b      	str	r3, [r7, #32]
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6a3b      	ldr	r3, [r7, #32]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc90      	pop	{r4, r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	0800448c 	.word	0x0800448c
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200
 8003024:	003d0900 	.word	0x003d0900

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b02      	ldr	r3, [pc, #8]	; (8003038 <HAL_RCC_GetHCLKFreq+0x10>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000000 	.word	0x20000000

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003040:	f7ff fff2 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	080044dc 	.word	0x080044dc

08003064 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <RCC_Delay+0x34>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <RCC_Delay+0x38>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0a5b      	lsrs	r3, r3, #9
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003080:	bf00      	nop
  }
  while (Delay --);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	60fa      	str	r2, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f9      	bne.n	8003080 <RCC_Delay+0x1c>
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	20000000 	.word	0x20000000
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e076      	b.n	80031a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c2:	d009      	beq.n	80030d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
 80030ca:	e005      	b.n	80030d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe f868 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800310e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	ea42 0103 	orr.w	r1, r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	0c1a      	lsrs	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f002 0204 	and.w	r2, r2, #4
 800317e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_Transmit+0x22>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e126      	b.n	8003418 <HAL_SPI_Transmit+0x270>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031d2:	f7fe f8e3 	bl	800139c <HAL_GetTick>
 80031d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d002      	beq.n	80031ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
 80031ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ec:	e10b      	b.n	8003406 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_Transmit+0x52>
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fe:	e102      	b.n	8003406 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	88fa      	ldrh	r2, [r7, #6]
 800321e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d10f      	bne.n	8003268 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003256:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003266:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d007      	beq.n	8003286 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328e:	d14b      	bne.n	8003328 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_SPI_Transmit+0xf6>
 8003298:	8afb      	ldrh	r3, [r7, #22]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d13e      	bne.n	800331c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032c2:	e02b      	b.n	800331c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d112      	bne.n	80032f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	881a      	ldrh	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c9a      	adds	r2, r3, #2
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80032f6:	e011      	b.n	800331c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f8:	f7fe f850 	bl	800139c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d803      	bhi.n	8003310 <HAL_SPI_Transmit+0x168>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d102      	bne.n	8003316 <HAL_SPI_Transmit+0x16e>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	77fb      	strb	r3, [r7, #31]
          goto error;
 800331a:	e074      	b.n	8003406 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ce      	bne.n	80032c4 <HAL_SPI_Transmit+0x11c>
 8003326:	e04c      	b.n	80033c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Transmit+0x18e>
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d140      	bne.n	80033b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800335c:	e02c      	b.n	80033b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d113      	bne.n	8003394 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	86da      	strh	r2, [r3, #54]	; 0x36
 8003392:	e011      	b.n	80033b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003394:	f7fe f802 	bl	800139c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d803      	bhi.n	80033ac <HAL_SPI_Transmit+0x204>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d102      	bne.n	80033b2 <HAL_SPI_Transmit+0x20a>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b6:	e026      	b.n	8003406 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1cd      	bne.n	800335e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8b2 	bl	8003530 <SPI_EndRxTxTransaction>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e000      	b.n	8003406 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003404:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003416:	7ffb      	ldrb	r3, [r7, #31]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003430:	f7fd ffb4 	bl	800139c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003440:	f7fd ffac 	bl	800139c <HAL_GetTick>
 8003444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003446:	4b39      	ldr	r3, [pc, #228]	; (800352c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	e054      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d050      	beq.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003460:	f7fd ff9c 	bl	800139c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	d902      	bls.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d13d      	bne.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348e:	d111      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	d004      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d107      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d10f      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e017      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3b01      	subs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d19b      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000

08003530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff ff6a 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e000      	b.n	8003564 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <AHT10_init>:
#include "AHT10.h"


void AHT10_init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
	AHT10_soft_reset();
 8003570:	f000 f874 	bl	800365c <AHT10_soft_reset>
	AHT10_calibrate();
 8003574:	f000 f802 	bl	800357c <AHT10_calibrate>
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}

0800357c <AHT10_calibrate>:


void AHT10_calibrate(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af02      	add	r7, sp, #8
	unsigned char value[3] = {AHT10_INIT_CMD,
 8003582:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <AHT10_calibrate+0x38>)
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	4611      	mov	r1, r2
 800358a:	8019      	strh	r1, [r3, #0]
 800358c:	3302      	adds	r3, #2
 800358e:	0c12      	lsrs	r2, r2, #16
 8003590:	701a      	strb	r2, [r3, #0]
							  AHT10_INIT_CAL_ENABLE,
							  AHT10_DATA_NOP};

	HAL_I2C_Master_Transmit(&hi2c1, AHT10_I2C_Address, value, 3, 1000);
 8003592:	1d3a      	adds	r2, r7, #4
 8003594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2303      	movs	r3, #3
 800359c:	2170      	movs	r1, #112	; 0x70
 800359e:	4806      	ldr	r0, [pc, #24]	; (80035b8 <AHT10_calibrate+0x3c>)
 80035a0:	f7fe faee 	bl	8001b80 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);
 80035a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035a8:	f7fd ff02 	bl	80013b0 <HAL_Delay>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	0800449c 	.word	0x0800449c
 80035b8:	20000028 	.word	0x20000028

080035bc <AHT10_read_sensor>:
}



unsigned long AHT10_read_sensor(unsigned char command)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
	unsigned long retval = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

	unsigned char data_buffer[6] = {0, 0, 0, 0, 0, 0};
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <AHT10_read_sensor+0x94>)
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035d4:	6018      	str	r0, [r3, #0]
 80035d6:	3304      	adds	r3, #4
 80035d8:	8019      	strh	r1, [r3, #0]

	unsigned char value[3] = {AHT10_START_MEASURMENT_CMD,
 80035da:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <AHT10_read_sensor+0x98>)
 80035dc:	f107 0308 	add.w	r3, r7, #8
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	4611      	mov	r1, r2
 80035e4:	8019      	strh	r1, [r3, #0]
 80035e6:	3302      	adds	r3, #2
 80035e8:	0c12      	lsrs	r2, r2, #16
 80035ea:	701a      	strb	r2, [r3, #0]
					  		  AHT10_DATA_MEASURMENT_CMD,
							  AHT10_DATA_NOP};

	HAL_I2C_Master_Transmit(&hi2c1, AHT10_I2C_Address, value, 3, 1000);
 80035ec:	f107 0208 	add.w	r2, r7, #8
 80035f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2303      	movs	r3, #3
 80035f8:	2170      	movs	r1, #112	; 0x70
 80035fa:	4817      	ldr	r0, [pc, #92]	; (8003658 <AHT10_read_sensor+0x9c>)
 80035fc:	f7fe fac0 	bl	8001b80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, AHT10_I2C_Address, data_buffer, 6, 1000);
 8003600:	f107 020c 	add.w	r2, r7, #12
 8003604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2306      	movs	r3, #6
 800360c:	2170      	movs	r1, #112	; 0x70
 800360e:	4812      	ldr	r0, [pc, #72]	; (8003658 <AHT10_read_sensor+0x9c>)
 8003610:	f7fe fbb4 	bl	8001d7c <HAL_I2C_Master_Receive>

	switch(command)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d109      	bne.n	800362e <AHT10_read_sensor+0x72>
	{
		case AHT10_GET_RH_CMD:
		{
		    retval = (unsigned long)((((unsigned long)data_buffer[1] << 16) | ((unsigned long)data_buffer[2] << 8) | ((unsigned long)data_buffer[3])) >> 4);
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	7bbb      	ldrb	r3, [r7, #14]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	4313      	orrs	r3, r2
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	4313      	orrs	r3, r2
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	617b      	str	r3, [r7, #20]
		    break;
 800362c:	e00a      	b.n	8003644 <AHT10_read_sensor+0x88>
		}

		default:
		{
			retval = (unsigned long)((((unsigned long)data_buffer[3] & 0x0F) << 16) | ((unsigned long)data_buffer[4] << 8) | ((unsigned long)data_buffer[5]));
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003636:	7c3b      	ldrb	r3, [r7, #16]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	4313      	orrs	r3, r2
 800363c:	7c7a      	ldrb	r2, [r7, #17]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
		    break;
 8003642:	bf00      	nop
		}
	}

	return retval;
 8003644:	697b      	ldr	r3, [r7, #20]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	080044a0 	.word	0x080044a0
 8003654:	080044a8 	.word	0x080044a8
 8003658:	20000028 	.word	0x20000028

0800365c <AHT10_soft_reset>:
	HAL_Delay(100);
}


void AHT10_soft_reset(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af02      	add	r7, sp, #8
	unsigned char value[1] = {AHT10_SOFT_RESET_CMD};
 8003662:	23ba      	movs	r3, #186	; 0xba
 8003664:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Master_Transmit(&hi2c1, AHT10_I2C_Address, value, 1, 1000);
 8003666:	1d3a      	adds	r2, r7, #4
 8003668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2301      	movs	r3, #1
 8003670:	2170      	movs	r1, #112	; 0x70
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <AHT10_soft_reset+0x2c>)
 8003674:	f7fe fa84 	bl	8001b80 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8003678:	2064      	movs	r0, #100	; 0x64
 800367a:	f7fd fe99 	bl	80013b0 <HAL_Delay>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000028 	.word	0x20000028

0800368c <AHT10_read_temperature>:


float AHT10_read_temperature(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
	float retval = 0.0;
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	607b      	str	r3, [r7, #4]

	retval = ((float)AHT10_read_sensor(AHT10_GET_T_CMD));
 8003698:	2000      	movs	r0, #0
 800369a:	f7ff ff8f 	bl	80035bc <AHT10_read_sensor>
 800369e:	4603      	mov	r3, r0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd fadb 	bl	8000c5c <__aeabi_ui2f>
 80036a6:	4603      	mov	r3, r0
 80036a8:	607b      	str	r3, [r7, #4]
	retval = (((retval * 200.0) / 1048576.0) - 50.0);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fc ff66 	bl	800057c <__aeabi_f2d>
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <AHT10_read_temperature+0x6c>)
 80036b6:	f7fc ffb9 	bl	800062c <__aeabi_dmul>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <AHT10_read_temperature+0x70>)
 80036c8:	f7fd f8da 	bl	8000880 <__aeabi_ddiv>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <AHT10_read_temperature+0x74>)
 80036da:	f7fc fdef 	bl	80002bc <__aeabi_dsub>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fd f9b3 	bl	8000a50 <__aeabi_d2f>
 80036ea:	4603      	mov	r3, r0
 80036ec:	607b      	str	r3, [r7, #4]

	return retval;
 80036ee:	687b      	ldr	r3, [r7, #4]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40690000 	.word	0x40690000
 80036fc:	41300000 	.word	0x41300000
 8003700:	40490000 	.word	0x40490000

08003704 <AHT10_read_relative_humidity>:


float AHT10_read_relative_humidity(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
    float retval = 0.0;
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	607b      	str	r3, [r7, #4]

    retval = ((float)AHT10_read_sensor(AHT10_GET_RH_CMD));
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff ff53 	bl	80035bc <AHT10_read_sensor>
 8003716:	4603      	mov	r3, r0
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fa9f 	bl	8000c5c <__aeabi_ui2f>
 800371e:	4603      	mov	r3, r0
 8003720:	607b      	str	r3, [r7, #4]
    retval = ((retval / 1048576.0) * 100.0);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fc ff2a 	bl	800057c <__aeabi_f2d>
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <AHT10_read_relative_humidity+0x5c>)
 800372e:	f7fd f8a7 	bl	8000880 <__aeabi_ddiv>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <AHT10_read_relative_humidity+0x60>)
 8003740:	f7fc ff74 	bl	800062c <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f7fd f980 	bl	8000a50 <__aeabi_d2f>
 8003750:	4603      	mov	r3, r0
 8003752:	607b      	str	r3, [r7, #4]

    return retval;
 8003754:	687b      	ldr	r3, [r7, #4]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	41300000 	.word	0x41300000
 8003764:	40590000 	.word	0x40590000

08003768 <ST7735_init>:
static unsigned char width = ST7735_TFTWIDTH;
static unsigned char length = ST7735_TFTLENGTH;


void ST7735_init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
    ST7735_Reset();
 800376c:	f000 f96e 	bl	8003a4c <ST7735_Reset>
    
    ST7735_Write(ST7735_SWRESET, CMD);
 8003770:	2100      	movs	r1, #0
 8003772:	2001      	movs	r0, #1
 8003774:	f000 f936 	bl	80039e4 <ST7735_Write>

    HAL_Delay(1);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fd fe19 	bl	80013b0 <HAL_Delay>
    ST7735_Write(ST7735_SLPOUT, CMD);
 800377e:	2100      	movs	r1, #0
 8003780:	2011      	movs	r0, #17
 8003782:	f000 f92f 	bl	80039e4 <ST7735_Write>
    HAL_Delay(120);
 8003786:	2078      	movs	r0, #120	; 0x78
 8003788:	f7fd fe12 	bl	80013b0 <HAL_Delay>

    ST7735_Write(ST7735_FRMCTR1, CMD);
 800378c:	2100      	movs	r1, #0
 800378e:	20b1      	movs	r0, #177	; 0xb1
 8003790:	f000 f928 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x05, DAT);
 8003794:	2101      	movs	r1, #1
 8003796:	2005      	movs	r0, #5
 8003798:	f000 f924 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x3A, DAT);
 800379c:	2101      	movs	r1, #1
 800379e:	203a      	movs	r0, #58	; 0x3a
 80037a0:	f000 f920 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x3A, DAT);
 80037a4:	2101      	movs	r1, #1
 80037a6:	203a      	movs	r0, #58	; 0x3a
 80037a8:	f000 f91c 	bl	80039e4 <ST7735_Write>
    
    ST7735_Write(ST7735_FRMCTR2, CMD);
 80037ac:	2100      	movs	r1, #0
 80037ae:	20b2      	movs	r0, #178	; 0xb2
 80037b0:	f000 f918 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x05, DAT);
 80037b4:	2101      	movs	r1, #1
 80037b6:	2005      	movs	r0, #5
 80037b8:	f000 f914 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x3A, DAT);
 80037bc:	2101      	movs	r1, #1
 80037be:	203a      	movs	r0, #58	; 0x3a
 80037c0:	f000 f910 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x3A, DAT);
 80037c4:	2101      	movs	r1, #1
 80037c6:	203a      	movs	r0, #58	; 0x3a
 80037c8:	f000 f90c 	bl	80039e4 <ST7735_Write>
    
    ST7735_Write(ST7735_FRMCTR3, CMD);
 80037cc:	2100      	movs	r1, #0
 80037ce:	20b3      	movs	r0, #179	; 0xb3
 80037d0:	f000 f908 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x05, DAT);
 80037d4:	2101      	movs	r1, #1
 80037d6:	2005      	movs	r0, #5
 80037d8:	f000 f904 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x3A, DAT);
 80037dc:	2101      	movs	r1, #1
 80037de:	203a      	movs	r0, #58	; 0x3a
 80037e0:	f000 f900 	bl	80039e4 <ST7735_Write>
	ST7735_Write(0x3A, DAT);
 80037e4:	2101      	movs	r1, #1
 80037e6:	203a      	movs	r0, #58	; 0x3a
 80037e8:	f000 f8fc 	bl	80039e4 <ST7735_Write>
	ST7735_Write(0x05, DAT);
 80037ec:	2101      	movs	r1, #1
 80037ee:	2005      	movs	r0, #5
 80037f0:	f000 f8f8 	bl	80039e4 <ST7735_Write>
	ST7735_Write(0x3A, DAT);
 80037f4:	2101      	movs	r1, #1
 80037f6:	203a      	movs	r0, #58	; 0x3a
 80037f8:	f000 f8f4 	bl	80039e4 <ST7735_Write>
	ST7735_Write(0x3A, DAT);
 80037fc:	2101      	movs	r1, #1
 80037fe:	203a      	movs	r0, #58	; 0x3a
 8003800:	f000 f8f0 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_INVCTR, CMD);
 8003804:	2100      	movs	r1, #0
 8003806:	20b4      	movs	r0, #180	; 0xb4
 8003808:	f000 f8ec 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x03, DAT);
 800380c:	2101      	movs	r1, #1
 800380e:	2003      	movs	r0, #3
 8003810:	f000 f8e8 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_PWCTR1, CMD);
 8003814:	2100      	movs	r1, #0
 8003816:	20c0      	movs	r0, #192	; 0xc0
 8003818:	f000 f8e4 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x62, DAT);
 800381c:	2101      	movs	r1, #1
 800381e:	2062      	movs	r0, #98	; 0x62
 8003820:	f000 f8e0 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x02, DAT); 
 8003824:	2101      	movs	r1, #1
 8003826:	2002      	movs	r0, #2
 8003828:	f000 f8dc 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x04, DAT);
 800382c:	2101      	movs	r1, #1
 800382e:	2004      	movs	r0, #4
 8003830:	f000 f8d8 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_PWCTR2, CMD);
 8003834:	2100      	movs	r1, #0
 8003836:	20c1      	movs	r0, #193	; 0xc1
 8003838:	f000 f8d4 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0xC0, DAT);
 800383c:	2101      	movs	r1, #1
 800383e:	20c0      	movs	r0, #192	; 0xc0
 8003840:	f000 f8d0 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_PWCTR3, CMD);
 8003844:	2100      	movs	r1, #0
 8003846:	20c2      	movs	r0, #194	; 0xc2
 8003848:	f000 f8cc 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0D, DAT);
 800384c:	2101      	movs	r1, #1
 800384e:	200d      	movs	r0, #13
 8003850:	f000 f8c8 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 8003854:	2101      	movs	r1, #1
 8003856:	2000      	movs	r0, #0
 8003858:	f000 f8c4 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_PWCTR4, CMD);
 800385c:	2100      	movs	r1, #0
 800385e:	20c3      	movs	r0, #195	; 0xc3
 8003860:	f000 f8c0 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x8D, DAT);
 8003864:	2101      	movs	r1, #1
 8003866:	208d      	movs	r0, #141	; 0x8d
 8003868:	f000 f8bc 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x6A, DAT);
 800386c:	2101      	movs	r1, #1
 800386e:	206a      	movs	r0, #106	; 0x6a
 8003870:	f000 f8b8 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_PWCTR5, CMD);
 8003874:	2100      	movs	r1, #0
 8003876:	20c4      	movs	r0, #196	; 0xc4
 8003878:	f000 f8b4 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x8D, DAT);
 800387c:	2101      	movs	r1, #1
 800387e:	208d      	movs	r0, #141	; 0x8d
 8003880:	f000 f8b0 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0xEE, DAT);
 8003884:	2101      	movs	r1, #1
 8003886:	20ee      	movs	r0, #238	; 0xee
 8003888:	f000 f8ac 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_VMCTR1, CMD);
 800388c:	2100      	movs	r1, #0
 800388e:	20c5      	movs	r0, #197	; 0xc5
 8003890:	f000 f8a8 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0E, DAT);
 8003894:	2101      	movs	r1, #1
 8003896:	200e      	movs	r0, #14
 8003898:	f000 f8a4 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_GMCTRP1, CMD);
 800389c:	2100      	movs	r1, #0
 800389e:	20e0      	movs	r0, #224	; 0xe0
 80038a0:	f000 f8a0 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x10, DAT);
 80038a4:	2101      	movs	r1, #1
 80038a6:	2010      	movs	r0, #16
 80038a8:	f000 f89c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0E, DAT);
 80038ac:	2101      	movs	r1, #1
 80038ae:	200e      	movs	r0, #14
 80038b0:	f000 f898 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x02, DAT);
 80038b4:	2101      	movs	r1, #1
 80038b6:	2002      	movs	r0, #2
 80038b8:	f000 f894 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x03, DAT);
 80038bc:	2101      	movs	r1, #1
 80038be:	2003      	movs	r0, #3
 80038c0:	f000 f890 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0E, DAT);
 80038c4:	2101      	movs	r1, #1
 80038c6:	200e      	movs	r0, #14
 80038c8:	f000 f88c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x07, DAT);
 80038cc:	2101      	movs	r1, #1
 80038ce:	2007      	movs	r0, #7
 80038d0:	f000 f888 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x02, DAT);
 80038d4:	2101      	movs	r1, #1
 80038d6:	2002      	movs	r0, #2
 80038d8:	f000 f884 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x07, DAT);
 80038dc:	2101      	movs	r1, #1
 80038de:	2007      	movs	r0, #7
 80038e0:	f000 f880 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0A, DAT);
 80038e4:	2101      	movs	r1, #1
 80038e6:	200a      	movs	r0, #10
 80038e8:	f000 f87c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x12, DAT);
 80038ec:	2101      	movs	r1, #1
 80038ee:	2012      	movs	r0, #18
 80038f0:	f000 f878 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x27, DAT);
 80038f4:	2101      	movs	r1, #1
 80038f6:	2027      	movs	r0, #39	; 0x27
 80038f8:	f000 f874 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x37, DAT);
 80038fc:	2101      	movs	r1, #1
 80038fe:	2037      	movs	r0, #55	; 0x37
 8003900:	f000 f870 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 8003904:	2101      	movs	r1, #1
 8003906:	2000      	movs	r0, #0
 8003908:	f000 f86c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0D, DAT);
 800390c:	2101      	movs	r1, #1
 800390e:	200d      	movs	r0, #13
 8003910:	f000 f868 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0E, DAT);
 8003914:	2101      	movs	r1, #1
 8003916:	200e      	movs	r0, #14
 8003918:	f000 f864 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x10, DAT);
 800391c:	2101      	movs	r1, #1
 800391e:	2010      	movs	r0, #16
 8003920:	f000 f860 	bl	80039e4 <ST7735_Write>
    
    ST7735_Write(ST7735_GMCTRN1, CMD);
 8003924:	2100      	movs	r1, #0
 8003926:	20e1      	movs	r0, #225	; 0xe1
 8003928:	f000 f85c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x10, DAT);
 800392c:	2101      	movs	r1, #1
 800392e:	2010      	movs	r0, #16
 8003930:	f000 f858 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0E, DAT);
 8003934:	2101      	movs	r1, #1
 8003936:	200e      	movs	r0, #14
 8003938:	f000 f854 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x03, DAT);
 800393c:	2101      	movs	r1, #1
 800393e:	2003      	movs	r0, #3
 8003940:	f000 f850 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x03, DAT);
 8003944:	2101      	movs	r1, #1
 8003946:	2003      	movs	r0, #3
 8003948:	f000 f84c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0F, DAT);
 800394c:	2101      	movs	r1, #1
 800394e:	200f      	movs	r0, #15
 8003950:	f000 f848 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x06, DAT);
 8003954:	2101      	movs	r1, #1
 8003956:	2006      	movs	r0, #6
 8003958:	f000 f844 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x02, DAT);
 800395c:	2101      	movs	r1, #1
 800395e:	2002      	movs	r0, #2
 8003960:	f000 f840 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x08, DAT);
 8003964:	2101      	movs	r1, #1
 8003966:	2008      	movs	r0, #8
 8003968:	f000 f83c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0A, DAT);
 800396c:	2101      	movs	r1, #1
 800396e:	200a      	movs	r0, #10
 8003970:	f000 f838 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x13, DAT);
 8003974:	2101      	movs	r1, #1
 8003976:	2013      	movs	r0, #19
 8003978:	f000 f834 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x26, DAT);
 800397c:	2101      	movs	r1, #1
 800397e:	2026      	movs	r0, #38	; 0x26
 8003980:	f000 f830 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x36, DAT);
 8003984:	2101      	movs	r1, #1
 8003986:	2036      	movs	r0, #54	; 0x36
 8003988:	f000 f82c 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 800398c:	2101      	movs	r1, #1
 800398e:	2000      	movs	r0, #0
 8003990:	f000 f828 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0D, DAT);
 8003994:	2101      	movs	r1, #1
 8003996:	200d      	movs	r0, #13
 8003998:	f000 f824 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x0E, DAT);
 800399c:	2101      	movs	r1, #1
 800399e:	200e      	movs	r0, #14
 80039a0:	f000 f820 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x10, DAT);
 80039a4:	2101      	movs	r1, #1
 80039a6:	2010      	movs	r0, #16
 80039a8:	f000 f81c 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_COLMOD, CMD);
 80039ac:	2100      	movs	r1, #0
 80039ae:	203a      	movs	r0, #58	; 0x3a
 80039b0:	f000 f818 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x05, DAT);
 80039b4:	2101      	movs	r1, #1
 80039b6:	2005      	movs	r0, #5
 80039b8:	f000 f814 	bl	80039e4 <ST7735_Write>

    ST7735_Set_Rotation(3);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 f8b9 	bl	8003b34 <ST7735_Set_Rotation>

    ST7735_Write(ST7735_NORON, CMD);
 80039c2:	2100      	movs	r1, #0
 80039c4:	2013      	movs	r0, #19
 80039c6:	f000 f80d 	bl	80039e4 <ST7735_Write>
    HAL_Delay(10);
 80039ca:	200a      	movs	r0, #10
 80039cc:	f7fd fcf0 	bl	80013b0 <HAL_Delay>

    ST7735_Write(ST7735_DISPON, CMD);
 80039d0:	2100      	movs	r1, #0
 80039d2:	2029      	movs	r0, #41	; 0x29
 80039d4:	f000 f806 	bl	80039e4 <ST7735_Write>
    HAL_Delay(100);
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	f7fd fce9 	bl	80013b0 <HAL_Delay>
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <ST7735_Write>:


void ST7735_Write(unsigned char value, unsigned char mode)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71bb      	strb	r3, [r7, #6]
	uint8_t data_value[1] = {0};
 80039f4:	2300      	movs	r3, #0
 80039f6:	733b      	strb	r3, [r7, #12]

	data_value[0] = value;
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	733b      	strb	r3, [r7, #12]

	CS_pin_low();
 80039fc:	2200      	movs	r2, #0
 80039fe:	2108      	movs	r1, #8
 8003a00:	4810      	ldr	r0, [pc, #64]	; (8003a44 <ST7735_Write+0x60>)
 8003a02:	f7fd ff61 	bl	80018c8 <HAL_GPIO_WritePin>
    
    if(mode != 0)
 8003a06:	79bb      	ldrb	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <ST7735_Write+0x34>
    {
        RS_pin_high();
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2110      	movs	r1, #16
 8003a10:	480c      	ldr	r0, [pc, #48]	; (8003a44 <ST7735_Write+0x60>)
 8003a12:	f7fd ff59 	bl	80018c8 <HAL_GPIO_WritePin>
 8003a16:	e004      	b.n	8003a22 <ST7735_Write+0x3e>
    }
    else
    {
        RS_pin_low();
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2110      	movs	r1, #16
 8003a1c:	4809      	ldr	r0, [pc, #36]	; (8003a44 <ST7735_Write+0x60>)
 8003a1e:	f7fd ff53 	bl	80018c8 <HAL_GPIO_WritePin>
    }
    
    HAL_SPI_Transmit(&hspi1, data_value, 1, 1000);
 8003a22:	f107 010c 	add.w	r1, r7, #12
 8003a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4806      	ldr	r0, [pc, #24]	; (8003a48 <ST7735_Write+0x64>)
 8003a2e:	f7ff fbbb 	bl	80031a8 <HAL_SPI_Transmit>

    CS_pin_high();
 8003a32:	2201      	movs	r2, #1
 8003a34:	2108      	movs	r1, #8
 8003a36:	4803      	ldr	r0, [pc, #12]	; (8003a44 <ST7735_Write+0x60>)
 8003a38:	f7fd ff46 	bl	80018c8 <HAL_GPIO_WritePin>
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40010800 	.word	0x40010800
 8003a48:	2000007c 	.word	0x2000007c

08003a4c <ST7735_Reset>:


void ST7735_Reset(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
    RST_pin_low();
 8003a50:	2200      	movs	r2, #0
 8003a52:	2104      	movs	r1, #4
 8003a54:	4807      	ldr	r0, [pc, #28]	; (8003a74 <ST7735_Reset+0x28>)
 8003a56:	f7fd ff37 	bl	80018c8 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f7fd fca8 	bl	80013b0 <HAL_Delay>
    RST_pin_high();
 8003a60:	2201      	movs	r2, #1
 8003a62:	2104      	movs	r1, #4
 8003a64:	4803      	ldr	r0, [pc, #12]	; (8003a74 <ST7735_Reset+0x28>)
 8003a66:	f7fd ff2f 	bl	80018c8 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8003a6a:	2002      	movs	r0, #2
 8003a6c:	f7fd fca0 	bl	80013b0 <HAL_Delay>
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40010800 	.word	0x40010800

08003a78 <ST7735_Word_Write>:


void ST7735_Word_Write(unsigned int value)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    ST7735_Write(((value & 0xFF00) >> 0x08), DAT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ffab 	bl	80039e4 <ST7735_Write>
    ST7735_Write((value & 0x00FF), DAT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ffa5 	bl	80039e4 <ST7735_Write>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <ST7735_Set_Addr_Window>:
    ST7735_Write(DataL, DAT);
}


void ST7735_Set_Addr_Window(unsigned char xs, unsigned char ys, unsigned char xe, unsigned char ye)
{
 8003aa2:	b590      	push	{r4, r7, lr}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4611      	mov	r1, r2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71bb      	strb	r3, [r7, #6]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	717b      	strb	r3, [r7, #5]
 8003abc:	4613      	mov	r3, r2
 8003abe:	713b      	strb	r3, [r7, #4]
	xs = xs ;
	xe = xe;
	ys = ys + 16;
 8003ac0:	79bb      	ldrb	r3, [r7, #6]
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	71bb      	strb	r3, [r7, #6]
	ye = ye + 16;
 8003ac6:	793b      	ldrb	r3, [r7, #4]
 8003ac8:	3310      	adds	r3, #16
 8003aca:	713b      	strb	r3, [r7, #4]

	ST7735_Write(ST7735_CASET, CMD);
 8003acc:	2100      	movs	r1, #0
 8003ace:	202a      	movs	r0, #42	; 0x2a
 8003ad0:	f7ff ff88 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7ff ff84 	bl	80039e4 <ST7735_Write>
    ST7735_Write(xs, DAT);
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff7f 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff ff7b 	bl	80039e4 <ST7735_Write>
    ST7735_Write(xe, DAT);
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff76 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_RASET, CMD);
 8003af8:	2100      	movs	r1, #0
 8003afa:	202b      	movs	r0, #43	; 0x2b
 8003afc:	f7ff ff72 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 8003b00:	2101      	movs	r1, #1
 8003b02:	2000      	movs	r0, #0
 8003b04:	f7ff ff6e 	bl	80039e4 <ST7735_Write>
    ST7735_Write(ys, DAT);
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff69 	bl	80039e4 <ST7735_Write>
    ST7735_Write(0x00, DAT);
 8003b12:	2101      	movs	r1, #1
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7ff ff65 	bl	80039e4 <ST7735_Write>
    ST7735_Write(ye, DAT);
 8003b1a:	793b      	ldrb	r3, [r7, #4]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff60 	bl	80039e4 <ST7735_Write>

    ST7735_Write(ST7735_RAMWR, CMD);
 8003b24:	2100      	movs	r1, #0
 8003b26:	202c      	movs	r0, #44	; 0x2c
 8003b28:	f7ff ff5c 	bl	80039e4 <ST7735_Write>
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd90      	pop	{r4, r7, pc}

08003b34 <ST7735_Set_Rotation>:
    return (((r & 0xF8) << 0x08) | ((g & 0xFC) << 0x03) | (b >> 0x03));
}


void ST7735_Set_Rotation(unsigned char m)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
    ST7735_Write(ST7735_MADCTL, CMD);
 8003b3e:	2100      	movs	r1, #0
 8003b40:	2036      	movs	r0, #54	; 0x36
 8003b42:	f7ff ff4f 	bl	80039e4 <ST7735_Write>

    switch(m)
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d837      	bhi.n	8003bbc <ST7735_Set_Rotation+0x88>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <ST7735_Set_Rotation+0x20>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b7b 	.word	0x08003b7b
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003ba7 	.word	0x08003ba7
    {
        case 0:
        {
            ST7735_Write((MADCTL_MX | MADCTL_MY | MADCTL_RGB), DAT);
 8003b64:	2101      	movs	r1, #1
 8003b66:	20c8      	movs	r0, #200	; 0xc8
 8003b68:	f7ff ff3c 	bl	80039e4 <ST7735_Write>
            width = ST7735_TFTWIDTH;
 8003b6c:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <ST7735_Set_Rotation+0x90>)
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	701a      	strb	r2, [r3, #0]
            length = ST7735_TFTLENGTH;
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <ST7735_Set_Rotation+0x94>)
 8003b74:	22a0      	movs	r2, #160	; 0xa0
 8003b76:	701a      	strb	r2, [r3, #0]
            break;
 8003b78:	e020      	b.n	8003bbc <ST7735_Set_Rotation+0x88>
        }
        case 1:
        {
            ST7735_Write((MADCTL_MY | MADCTL_MV | MADCTL_RGB), DAT);
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	20a8      	movs	r0, #168	; 0xa8
 8003b7e:	f7ff ff31 	bl	80039e4 <ST7735_Write>
            width = ST7735_TFTLENGTH;
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <ST7735_Set_Rotation+0x90>)
 8003b84:	22a0      	movs	r2, #160	; 0xa0
 8003b86:	701a      	strb	r2, [r3, #0]
            length = ST7735_TFTWIDTH;
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <ST7735_Set_Rotation+0x94>)
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	701a      	strb	r2, [r3, #0]
            break;
 8003b8e:	e015      	b.n	8003bbc <ST7735_Set_Rotation+0x88>
        }
        case 2:
        {
            ST7735_Write((MADCTL_RGB), DAT);
 8003b90:	2101      	movs	r1, #1
 8003b92:	2008      	movs	r0, #8
 8003b94:	f7ff ff26 	bl	80039e4 <ST7735_Write>
            width = ST7735_TFTWIDTH;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <ST7735_Set_Rotation+0x90>)
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	701a      	strb	r2, [r3, #0]
            length = ST7735_TFTLENGTH;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <ST7735_Set_Rotation+0x94>)
 8003ba0:	22a0      	movs	r2, #160	; 0xa0
 8003ba2:	701a      	strb	r2, [r3, #0]
            break;
 8003ba4:	e00a      	b.n	8003bbc <ST7735_Set_Rotation+0x88>
        }
        case 3:
        {
            ST7735_Write((MADCTL_MX | MADCTL_MV | MADCTL_RGB), DAT);
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2068      	movs	r0, #104	; 0x68
 8003baa:	f7ff ff1b 	bl	80039e4 <ST7735_Write>
            width = ST7735_TFTLENGTH;
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <ST7735_Set_Rotation+0x90>)
 8003bb0:	22a0      	movs	r2, #160	; 0xa0
 8003bb2:	701a      	strb	r2, [r3, #0]
            length = ST7735_TFTWIDTH;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <ST7735_Set_Rotation+0x94>)
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	701a      	strb	r2, [r3, #0]
            break;
 8003bba:	bf00      	nop
        }
    }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000009 	.word	0x20000009
 8003bc8:	2000000a 	.word	0x2000000a

08003bcc <TFT_fill>:


void TFT_fill(unsigned int colour)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
    unsigned char i = 0x00;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
    unsigned char j = 0x00;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73bb      	strb	r3, [r7, #14]

    ST7735_Set_Addr_Window(0, 0, (width - 1), (length - 1));
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <TFT_fill+0x60>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <TFT_fill+0x64>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2100      	movs	r1, #0
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f7ff ff57 	bl	8003aa2 <ST7735_Set_Addr_Window>

    for(j = length; j > 0; j--)
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <TFT_fill+0x64>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	73bb      	strb	r3, [r7, #14]
 8003bfa:	e00f      	b.n	8003c1c <TFT_fill+0x50>
    {
        for(i = width; i > 0; i--)
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <TFT_fill+0x60>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e005      	b.n	8003c10 <TFT_fill+0x44>
        {
            ST7735_Word_Write(colour);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff37 	bl	8003a78 <ST7735_Word_Write>
        for(i = width; i > 0; i--)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f6      	bne.n	8003c04 <TFT_fill+0x38>
    for(j = length; j > 0; j--)
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	73bb      	strb	r3, [r7, #14]
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ec      	bne.n	8003bfc <TFT_fill+0x30>
        }
    }
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000009 	.word	0x20000009
 8003c30:	2000000a 	.word	0x2000000a

08003c34 <Draw_Font_Pixel>:
    }while(a <= b);
}


void Draw_Font_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned int colour, unsigned char pixel_size)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	603a      	str	r2, [r7, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
 8003c42:	460b      	mov	r3, r1
 8003c44:	71bb      	strb	r3, [r7, #6]
 8003c46:	4613      	mov	r3, r2
 8003c48:	717b      	strb	r3, [r7, #5]
     unsigned char i = 0x00;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]

     ST7735_Set_Addr_Window(x_pos, y_pos, (x_pos + pixel_size - 1), (y_pos + pixel_size - 1));
 8003c4e:	79fa      	ldrb	r2, [r7, #7]
 8003c50:	797b      	ldrb	r3, [r7, #5]
 8003c52:	4413      	add	r3, r2
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b2dc      	uxtb	r4, r3
 8003c5a:	79ba      	ldrb	r2, [r7, #6]
 8003c5c:	797b      	ldrb	r3, [r7, #5]
 8003c5e:	4413      	add	r3, r2
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	79b9      	ldrb	r1, [r7, #6]
 8003c68:	79f8      	ldrb	r0, [r7, #7]
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	f7ff ff19 	bl	8003aa2 <ST7735_Set_Addr_Window>

     for(i = 0x00; i < (pixel_size * pixel_size); i++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	e005      	b.n	8003c82 <Draw_Font_Pixel+0x4e>
     {
         ST7735_Word_Write(colour);
 8003c76:	6838      	ldr	r0, [r7, #0]
 8003c78:	f7ff fefe 	bl	8003a78 <ST7735_Word_Write>
     for(i = 0x00; i < (pixel_size * pixel_size); i++)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	797b      	ldrb	r3, [r7, #5]
 8003c86:	7979      	ldrb	r1, [r7, #5]
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	dbf2      	blt.n	8003c76 <Draw_Font_Pixel+0x42>
     }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}
	...

08003c9c <print_char>:


void print_char(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, unsigned char ch)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	71bb      	strb	r3, [r7, #6]
 8003cac:	4613      	mov	r3, r2
 8003cae:	717b      	strb	r3, [r7, #5]
     unsigned char i = 0x00;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]
     unsigned char j = 0x00;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73bb      	strb	r3, [r7, #14]

     unsigned char value = 0x00;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	737b      	strb	r3, [r7, #13]

     if(font_size < 1)
 8003cbc:	797b      	ldrb	r3, [r7, #5]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <print_char+0x2a>
     {
         font_size = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	717b      	strb	r3, [r7, #5]
     }

     if(x_pos < font_size)
 8003cc6:	79fa      	ldrb	r2, [r7, #7]
 8003cc8:	797b      	ldrb	r3, [r7, #5]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d201      	bcs.n	8003cd2 <print_char+0x36>
     {
         x_pos = font_size;
 8003cce:	797b      	ldrb	r3, [r7, #5]
 8003cd0:	71fb      	strb	r3, [r7, #7]
     }

     for (i = 0x00; i < 0x05; i++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e03c      	b.n	8003d52 <print_char+0xb6>
     {
         for (j = 0x00; j < 0x08; j++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73bb      	strb	r3, [r7, #14]
 8003cdc:	e029      	b.n	8003d32 <print_char+0x96>
         {
             value = 0x00;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	737b      	strb	r3, [r7, #13]
             value = ((fonts[ch - 0x20][i]));
 8003ce2:	7f3b      	ldrb	r3, [r7, #28]
 8003ce4:	f1a3 0220 	sub.w	r2, r3, #32
 8003ce8:	7bf9      	ldrb	r1, [r7, #15]
 8003cea:	4826      	ldr	r0, [pc, #152]	; (8003d84 <print_char+0xe8>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	4403      	add	r3, r0
 8003cf4:	440b      	add	r3, r1
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	737b      	strb	r3, [r7, #13]

             if((value >> j)  & 0x01)
 8003cfa:	7b7a      	ldrb	r2, [r7, #13]
 8003cfc:	7bbb      	ldrb	r3, [r7, #14]
 8003cfe:	fa42 f303 	asr.w	r3, r2, r3
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <print_char+0x7c>
             {
                 Draw_Font_Pixel(x_pos, y_pos, colour, font_size);
 8003d0a:	797b      	ldrb	r3, [r7, #5]
 8003d0c:	79b9      	ldrb	r1, [r7, #6]
 8003d0e:	79f8      	ldrb	r0, [r7, #7]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	f7ff ff8f 	bl	8003c34 <Draw_Font_Pixel>
 8003d16:	e005      	b.n	8003d24 <print_char+0x88>
             }
             else
             {
                 Draw_Font_Pixel(x_pos, y_pos, back_colour, font_size);
 8003d18:	797b      	ldrb	r3, [r7, #5]
 8003d1a:	79b9      	ldrb	r1, [r7, #6]
 8003d1c:	79f8      	ldrb	r0, [r7, #7]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	f7ff ff88 	bl	8003c34 <Draw_Font_Pixel>
             }

             y_pos = y_pos + font_size;
 8003d24:	79ba      	ldrb	r2, [r7, #6]
 8003d26:	797b      	ldrb	r3, [r7, #5]
 8003d28:	4413      	add	r3, r2
 8003d2a:	71bb      	strb	r3, [r7, #6]
         for (j = 0x00; j < 0x08; j++)
 8003d2c:	7bbb      	ldrb	r3, [r7, #14]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	73bb      	strb	r3, [r7, #14]
 8003d32:	7bbb      	ldrb	r3, [r7, #14]
 8003d34:	2b07      	cmp	r3, #7
 8003d36:	d9d2      	bls.n	8003cde <print_char+0x42>
          }
          y_pos -= (font_size << 0x03);
 8003d38:	797b      	ldrb	r3, [r7, #5]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	79ba      	ldrb	r2, [r7, #6]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	71bb      	strb	r3, [r7, #6]
          x_pos += font_size;
 8003d44:	79fa      	ldrb	r2, [r7, #7]
 8003d46:	797b      	ldrb	r3, [r7, #5]
 8003d48:	4413      	add	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
     for (i = 0x00; i < 0x05; i++)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d9bf      	bls.n	8003cd8 <print_char+0x3c>

      }
      x_pos += font_size;
 8003d58:	79fa      	ldrb	r2, [r7, #7]
 8003d5a:	797b      	ldrb	r3, [r7, #5]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]

      if(x_pos > width)
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <print_char+0xec>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	79fa      	ldrb	r2, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d908      	bls.n	8003d7c <print_char+0xe0>
      {
          x_pos = (font_size + 0x01);
 8003d6a:	797b      	ldrb	r3, [r7, #5]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	71fb      	strb	r3, [r7, #7]
          y_pos += (font_size << 0x03);
 8003d70:	797b      	ldrb	r3, [r7, #5]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	4413      	add	r3, r2
 8003d7a:	71bb      	strb	r3, [r7, #6]
      }
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	080044e4 	.word	0x080044e4
 8003d88:	20000009 	.word	0x20000009

08003d8c <print_str>:


void print_str(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, unsigned char *ch)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	71bb      	strb	r3, [r7, #6]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	717b      	strb	r3, [r7, #5]
     do
     {
         print_char(x_pos, y_pos, font_size, colour, back_colour, *ch++);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	617a      	str	r2, [r7, #20]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	797a      	ldrb	r2, [r7, #5]
 8003daa:	79b9      	ldrb	r1, [r7, #6]
 8003dac:	79f8      	ldrb	r0, [r7, #7]
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f7ff ff71 	bl	8003c9c <print_char>
         x_pos += (font_size * 0x06);
 8003dba:	797b      	ldrb	r3, [r7, #5]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	0052      	lsls	r2, r2, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	4413      	add	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
     }while((*ch >= 0x20) && (*ch <= 0x7F));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b1f      	cmp	r3, #31
 8003dd2:	d904      	bls.n	8003dde <print_str+0x52>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	dae0      	bge.n	8003da0 <print_str+0x14>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <print_I>:
     print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
}


void print_I(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, signed int value)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
 8003df4:	460b      	mov	r3, r1
 8003df6:	71bb      	strb	r3, [r7, #6]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	717b      	strb	r3, [r7, #5]
    unsigned char ch[7] = {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
 8003dfc:	4aba      	ldr	r2, [pc, #744]	; (80040e8 <print_I+0x300>)
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e06:	6018      	str	r0, [r3, #0]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	8019      	strh	r1, [r3, #0]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	0c0a      	lsrs	r2, r1, #16
 8003e10:	701a      	strb	r2, [r3, #0]

    if(value < 0)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da05      	bge.n	8003e24 <print_I+0x3c>
    {
        ch[0] = 0x2D;
 8003e18:	232d      	movs	r3, #45	; 0x2d
 8003e1a:	723b      	strb	r3, [r7, #8]
        value = -value;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	425b      	negs	r3, r3
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e001      	b.n	8003e28 <print_I+0x40>
    }
    else
    {
        ch[0] = 0x20;
 8003e24:	2320      	movs	r3, #32
 8003e26:	723b      	strb	r3, [r7, #8]
    }

    if(value > 9999)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	dd5c      	ble.n	8003eec <print_I+0x104>
    {
        ch[1] = ((value / 10000) + 0x30);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4aad      	ldr	r2, [pc, #692]	; (80040ec <print_I+0x304>)
 8003e36:	fb82 1203 	smull	r1, r2, r2, r3
 8003e3a:	1312      	asrs	r2, r2, #12
 8003e3c:	17db      	asrs	r3, r3, #31
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3330      	adds	r3, #48	; 0x30
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 10000)/ 1000) + 0x30);
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	4ba8      	ldr	r3, [pc, #672]	; (80040ec <print_I+0x304>)
 8003e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8003e50:	1319      	asrs	r1, r3, #12
 8003e52:	17d3      	asrs	r3, r2, #31
 8003e54:	1acb      	subs	r3, r1, r3
 8003e56:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	4aa3      	ldr	r2, [pc, #652]	; (80040f0 <print_I+0x308>)
 8003e62:	fb82 1203 	smull	r1, r2, r2, r3
 8003e66:	1192      	asrs	r2, r2, #6
 8003e68:	17db      	asrs	r3, r3, #31
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3330      	adds	r3, #48	; 0x30
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	72bb      	strb	r3, [r7, #10]
        ch[3] = (((value % 1000) / 100) + 0x30);
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	4b9e      	ldr	r3, [pc, #632]	; (80040f0 <print_I+0x308>)
 8003e78:	fb83 1302 	smull	r1, r3, r3, r2
 8003e7c:	1199      	asrs	r1, r3, #6
 8003e7e:	17d3      	asrs	r3, r2, #31
 8003e80:	1acb      	subs	r3, r1, r3
 8003e82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	4a99      	ldr	r2, [pc, #612]	; (80040f4 <print_I+0x30c>)
 8003e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003e92:	1152      	asrs	r2, r2, #5
 8003e94:	17db      	asrs	r3, r3, #31
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	3330      	adds	r3, #48	; 0x30
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	72fb      	strb	r3, [r7, #11]
        ch[4] = (((value % 100) / 10) + 0x30);
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	4b94      	ldr	r3, [pc, #592]	; (80040f4 <print_I+0x30c>)
 8003ea4:	fb83 1302 	smull	r1, r3, r3, r2
 8003ea8:	1159      	asrs	r1, r3, #5
 8003eaa:	17d3      	asrs	r3, r2, #31
 8003eac:	1acb      	subs	r3, r1, r3
 8003eae:	2164      	movs	r1, #100	; 0x64
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	4a90      	ldr	r2, [pc, #576]	; (80040f8 <print_I+0x310>)
 8003eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8003ebc:	1092      	asrs	r2, r2, #2
 8003ebe:	17db      	asrs	r3, r3, #31
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	3330      	adds	r3, #48	; 0x30
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	733b      	strb	r3, [r7, #12]
        ch[5] = ((value % 10) + 0x30);
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	4b8a      	ldr	r3, [pc, #552]	; (80040f8 <print_I+0x310>)
 8003ece:	fb83 1302 	smull	r1, r3, r3, r2
 8003ed2:	1099      	asrs	r1, r3, #2
 8003ed4:	17d3      	asrs	r3, r2, #31
 8003ed6:	1ac9      	subs	r1, r1, r3
 8003ed8:	460b      	mov	r3, r1
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	1ad1      	subs	r1, r2, r3
 8003ee2:	b2cb      	uxtb	r3, r1
 8003ee4:	3330      	adds	r3, #48	; 0x30
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	737b      	strb	r3, [r7, #13]
 8003eea:	e0ed      	b.n	80040c8 <print_I+0x2e0>
    }

    else if((value > 999) && (value <= 9999))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef2:	db58      	blt.n	8003fa6 <print_I+0x1be>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f242 720f 	movw	r2, #9999	; 0x270f
 8003efa:	4293      	cmp	r3, r2
 8003efc:	dc53      	bgt.n	8003fa6 <print_I+0x1be>
    {
        ch[1] = (((value % 10000)/ 1000) + 0x30);
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <print_I+0x304>)
 8003f02:	fb83 1302 	smull	r1, r3, r3, r2
 8003f06:	1319      	asrs	r1, r3, #12
 8003f08:	17d3      	asrs	r3, r2, #31
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <print_I+0x308>)
 8003f18:	fb82 1203 	smull	r1, r2, r2, r3
 8003f1c:	1192      	asrs	r2, r2, #6
 8003f1e:	17db      	asrs	r3, r3, #31
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3330      	adds	r3, #48	; 0x30
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 1000) / 100) + 0x30);
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <print_I+0x308>)
 8003f2e:	fb83 1302 	smull	r1, r3, r3, r2
 8003f32:	1199      	asrs	r1, r3, #6
 8003f34:	17d3      	asrs	r3, r2, #31
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	4a6c      	ldr	r2, [pc, #432]	; (80040f4 <print_I+0x30c>)
 8003f44:	fb82 1203 	smull	r1, r2, r2, r3
 8003f48:	1152      	asrs	r2, r2, #5
 8003f4a:	17db      	asrs	r3, r3, #31
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3330      	adds	r3, #48	; 0x30
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	72bb      	strb	r3, [r7, #10]
        ch[3] = (((value % 100) / 10) + 0x30);
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	4b66      	ldr	r3, [pc, #408]	; (80040f4 <print_I+0x30c>)
 8003f5a:	fb83 1302 	smull	r1, r3, r3, r2
 8003f5e:	1159      	asrs	r1, r3, #5
 8003f60:	17d3      	asrs	r3, r2, #31
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	2164      	movs	r1, #100	; 0x64
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	4a62      	ldr	r2, [pc, #392]	; (80040f8 <print_I+0x310>)
 8003f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8003f72:	1092      	asrs	r2, r2, #2
 8003f74:	17db      	asrs	r3, r3, #31
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	3330      	adds	r3, #48	; 0x30
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	72fb      	strb	r3, [r7, #11]
        ch[4] = ((value % 10) + 0x30);
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <print_I+0x310>)
 8003f84:	fb83 1302 	smull	r1, r3, r3, r2
 8003f88:	1099      	asrs	r1, r3, #2
 8003f8a:	17d3      	asrs	r3, r2, #31
 8003f8c:	1ac9      	subs	r1, r1, r3
 8003f8e:	460b      	mov	r3, r1
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	1ad1      	subs	r1, r2, r3
 8003f98:	b2cb      	uxtb	r3, r1
 8003f9a:	3330      	adds	r3, #48	; 0x30
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	737b      	strb	r3, [r7, #13]
 8003fa4:	e090      	b.n	80040c8 <print_I+0x2e0>
    }
    else if((value > 99) && (value <= 999))
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b63      	cmp	r3, #99	; 0x63
 8003faa:	dd43      	ble.n	8004034 <print_I+0x24c>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb2:	da3f      	bge.n	8004034 <print_I+0x24c>
    {
        ch[1] = (((value % 1000) / 100) + 0x30);
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <print_I+0x308>)
 8003fb8:	fb83 1302 	smull	r1, r3, r3, r2
 8003fbc:	1199      	asrs	r1, r3, #6
 8003fbe:	17d3      	asrs	r3, r2, #31
 8003fc0:	1acb      	subs	r3, r1, r3
 8003fc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	4a49      	ldr	r2, [pc, #292]	; (80040f4 <print_I+0x30c>)
 8003fce:	fb82 1203 	smull	r1, r2, r2, r3
 8003fd2:	1152      	asrs	r2, r2, #5
 8003fd4:	17db      	asrs	r3, r3, #31
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3330      	adds	r3, #48	; 0x30
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 100) / 10) + 0x30);
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <print_I+0x30c>)
 8003fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8003fe8:	1159      	asrs	r1, r3, #5
 8003fea:	17d3      	asrs	r3, r2, #31
 8003fec:	1acb      	subs	r3, r1, r3
 8003fee:	2164      	movs	r1, #100	; 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	4a40      	ldr	r2, [pc, #256]	; (80040f8 <print_I+0x310>)
 8003ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8003ffc:	1092      	asrs	r2, r2, #2
 8003ffe:	17db      	asrs	r3, r3, #31
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3330      	adds	r3, #48	; 0x30
 8004006:	b2db      	uxtb	r3, r3
 8004008:	72bb      	strb	r3, [r7, #10]
        ch[3] = ((value % 10) + 0x30);
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <print_I+0x310>)
 800400e:	fb83 1302 	smull	r1, r3, r3, r2
 8004012:	1099      	asrs	r1, r3, #2
 8004014:	17d3      	asrs	r3, r2, #31
 8004016:	1ac9      	subs	r1, r1, r3
 8004018:	460b      	mov	r3, r1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	1ad1      	subs	r1, r2, r3
 8004022:	b2cb      	uxtb	r3, r1
 8004024:	3330      	adds	r3, #48	; 0x30
 8004026:	b2db      	uxtb	r3, r3
 8004028:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 800402a:	2320      	movs	r3, #32
 800402c:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 800402e:	2320      	movs	r3, #32
 8004030:	737b      	strb	r3, [r7, #13]
 8004032:	e049      	b.n	80040c8 <print_I+0x2e0>
    }
    else if((value > 9) && (value <= 99))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b09      	cmp	r3, #9
 8004038:	dd2e      	ble.n	8004098 <print_I+0x2b0>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b63      	cmp	r3, #99	; 0x63
 800403e:	dc2b      	bgt.n	8004098 <print_I+0x2b0>
    {
        ch[1] = (((value % 100) / 10) + 0x30);
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <print_I+0x30c>)
 8004044:	fb83 1302 	smull	r1, r3, r3, r2
 8004048:	1159      	asrs	r1, r3, #5
 800404a:	17d3      	asrs	r3, r2, #31
 800404c:	1acb      	subs	r3, r1, r3
 800404e:	2164      	movs	r1, #100	; 0x64
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <print_I+0x310>)
 8004058:	fb82 1203 	smull	r1, r2, r2, r3
 800405c:	1092      	asrs	r2, r2, #2
 800405e:	17db      	asrs	r3, r3, #31
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3330      	adds	r3, #48	; 0x30
 8004066:	b2db      	uxtb	r3, r3
 8004068:	727b      	strb	r3, [r7, #9]
        ch[2] = ((value % 10) + 0x30);
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <print_I+0x310>)
 800406e:	fb83 1302 	smull	r1, r3, r3, r2
 8004072:	1099      	asrs	r1, r3, #2
 8004074:	17d3      	asrs	r3, r2, #31
 8004076:	1ac9      	subs	r1, r1, r3
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	1ad1      	subs	r1, r2, r3
 8004082:	b2cb      	uxtb	r3, r1
 8004084:	3330      	adds	r3, #48	; 0x30
 8004086:	b2db      	uxtb	r3, r3
 8004088:	72bb      	strb	r3, [r7, #10]
        ch[3] = 0x20;
 800408a:	2320      	movs	r3, #32
 800408c:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 800408e:	2320      	movs	r3, #32
 8004090:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 8004092:	2320      	movs	r3, #32
 8004094:	737b      	strb	r3, [r7, #13]
 8004096:	e017      	b.n	80040c8 <print_I+0x2e0>
    }
    else
    {
        ch[1] = ((value % 10) + 0x30);
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <print_I+0x310>)
 800409c:	fb83 1302 	smull	r1, r3, r3, r2
 80040a0:	1099      	asrs	r1, r3, #2
 80040a2:	17d3      	asrs	r3, r2, #31
 80040a4:	1ac9      	subs	r1, r1, r3
 80040a6:	460b      	mov	r3, r1
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	1ad1      	subs	r1, r2, r3
 80040b0:	b2cb      	uxtb	r3, r1
 80040b2:	3330      	adds	r3, #48	; 0x30
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	727b      	strb	r3, [r7, #9]
        ch[2] = 0x20;
 80040b8:	2320      	movs	r3, #32
 80040ba:	72bb      	strb	r3, [r7, #10]
        ch[3] = 0x20;
 80040bc:	2320      	movs	r3, #32
 80040be:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 80040c0:	2320      	movs	r3, #32
 80040c2:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 80040c4:	2320      	movs	r3, #32
 80040c6:	737b      	strb	r3, [r7, #13]
    }

    print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
 80040c8:	797a      	ldrb	r2, [r7, #5]
 80040ca:	79b9      	ldrb	r1, [r7, #6]
 80040cc:	79f8      	ldrb	r0, [r7, #7]
 80040ce:	f107 0308 	add.w	r3, r7, #8
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f7ff fe57 	bl	8003d8c <print_str>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	080044bc 	.word	0x080044bc
 80040ec:	68db8bad 	.word	0x68db8bad
 80040f0:	10624dd3 	.word	0x10624dd3
 80040f4:	51eb851f 	.word	0x51eb851f
 80040f8:	66666667 	.word	0x66666667

080040fc <print_D>:


void print_D(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, unsigned int value, unsigned char points)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af02      	add	r7, sp, #8
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4603      	mov	r3, r0
 8004106:	71fb      	strb	r3, [r7, #7]
 8004108:	460b      	mov	r3, r1
 800410a:	71bb      	strb	r3, [r7, #6]
 800410c:	4613      	mov	r3, r2
 800410e:	717b      	strb	r3, [r7, #5]
    unsigned char ch[6] = {0x2E, 0x20, 0x20, 0x20, 0x20, 0x20};
 8004110:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <print_D+0xd0>)
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800411a:	6018      	str	r0, [r3, #0]
 800411c:	3304      	adds	r3, #4
 800411e:	8019      	strh	r1, [r3, #0]

    ch[1] = ((value / 1000) + 0x30);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <print_D+0xd4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3330      	adds	r3, #48	; 0x30
 800412e:	b2db      	uxtb	r3, r3
 8004130:	727b      	strb	r3, [r7, #9]

    if(points > 1)
 8004132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d938      	bls.n	80041ac <print_D+0xb0>
    {
        ch[2] = (((value % 1000) / 100) + 0x30);
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <print_D+0xd4>)
 800413e:	fba3 1302 	umull	r1, r3, r3, r2
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	4a21      	ldr	r2, [pc, #132]	; (80041d4 <print_D+0xd8>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3330      	adds	r3, #48	; 0x30
 800415a:	b2db      	uxtb	r3, r3
 800415c:	72bb      	strb	r3, [r7, #10]

        if(points > 2)
 800415e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d922      	bls.n	80041ac <print_D+0xb0>
        {
            ch[3] = (((value % 100) / 10) + 0x30);
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <print_D+0xd8>)
 800416a:	fba3 1302 	umull	r1, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2164      	movs	r1, #100	; 0x64
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <print_D+0xdc>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3330      	adds	r3, #48	; 0x30
 8004184:	b2db      	uxtb	r3, r3
 8004186:	72fb      	strb	r3, [r7, #11]

            if(points > 3)
 8004188:	f897 3020 	ldrb.w	r3, [r7, #32]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d90d      	bls.n	80041ac <print_D+0xb0>
            {
                ch[4] = ((value % 10) + 0x30);
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <print_D+0xdc>)
 8004194:	fba3 2301 	umull	r2, r3, r3, r1
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	1aca      	subs	r2, r1, r3
 80041a4:	b2d3      	uxtb	r3, r2
 80041a6:	3330      	adds	r3, #48	; 0x30
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	733b      	strb	r3, [r7, #12]
            }
        }
    }

    print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
 80041ac:	797a      	ldrb	r2, [r7, #5]
 80041ae:	79b9      	ldrb	r1, [r7, #6]
 80041b0:	79f8      	ldrb	r0, [r7, #7]
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f7ff fde5 	bl	8003d8c <print_str>
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	080044c4 	.word	0x080044c4
 80041d0:	10624dd3 	.word	0x10624dd3
 80041d4:	51eb851f 	.word	0x51eb851f
 80041d8:	cccccccd 	.word	0xcccccccd

080041dc <print_F>:


void print_F(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, float value, unsigned char points)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
 80041e8:	460b      	mov	r3, r1
 80041ea:	71bb      	strb	r3, [r7, #6]
 80041ec:	4613      	mov	r3, r2
 80041ee:	717b      	strb	r3, [r7, #5]
    signed long tmp = 0x0000;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

    tmp = (signed long)value;
 80041f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f6:	f7fc fdff 	bl	8000df8 <__aeabi_f2iz>
 80041fa:	4603      	mov	r3, r0
 80041fc:	60fb      	str	r3, [r7, #12]
    print_I(x_pos, y_pos, font_size, colour, back_colour, tmp);
 80041fe:	797a      	ldrb	r2, [r7, #5]
 8004200:	79b9      	ldrb	r1, [r7, #6]
 8004202:	79f8      	ldrb	r0, [r7, #7]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f7ff fdeb 	bl	8003de8 <print_I>
    tmp = ((signed long)((value - (float)tmp) * 10000));
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7fc fd26 	bl	8000c64 <__aeabi_i2f>
 8004218:	4603      	mov	r3, r0
 800421a:	4619      	mov	r1, r3
 800421c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421e:	f7fc fc6b 	bl	8000af8 <__aeabi_fsub>
 8004222:	4603      	mov	r3, r0
 8004224:	4971      	ldr	r1, [pc, #452]	; (80043ec <print_F+0x210>)
 8004226:	4618      	mov	r0, r3
 8004228:	f7fb ff90 	bl	800014c <__aeabi_fmul>
 800422c:	4603      	mov	r3, r0
 800422e:	4618      	mov	r0, r3
 8004230:	f7fc fde2 	bl	8000df8 <__aeabi_f2iz>
 8004234:	4603      	mov	r3, r0
 8004236:	60fb      	str	r3, [r7, #12]

    if(tmp < 0)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	da02      	bge.n	8004244 <print_F+0x68>
    {
       tmp = -tmp;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	425b      	negs	r3, r3
 8004242:	60fb      	str	r3, [r7, #12]
    }

    if((value >= 10000) && (value < 100000))
 8004244:	4969      	ldr	r1, [pc, #420]	; (80043ec <print_F+0x210>)
 8004246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004248:	f7fc fdc2 	bl	8000dd0 <__aeabi_fcmpge>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01d      	beq.n	800428e <print_F+0xb2>
 8004252:	4967      	ldr	r1, [pc, #412]	; (80043f0 <print_F+0x214>)
 8004254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004256:	f7fc fda7 	bl	8000da8 <__aeabi_fcmplt>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d016      	beq.n	800428e <print_F+0xb2>
    {
        print_D((x_pos + (0x24 * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
 8004260:	797b      	ldrb	r3, [r7, #5]
 8004262:	461a      	mov	r2, r3
 8004264:	00d2      	lsls	r2, r2, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	b2da      	uxtb	r2, r3
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	4413      	add	r3, r2
 8004270:	b2d8      	uxtb	r0, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	797c      	ldrb	r4, [r7, #5]
 8004276:	79b9      	ldrb	r1, [r7, #6]
 8004278:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800427c:	9202      	str	r2, [sp, #8]
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4622      	mov	r2, r4
 8004288:	f7ff ff38 	bl	80040fc <print_D>
 800428c:	e0aa      	b.n	80043e4 <print_F+0x208>
    }
    else if((value >= 1000) && (value < 10000))
 800428e:	4959      	ldr	r1, [pc, #356]	; (80043f4 <print_F+0x218>)
 8004290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004292:	f7fc fd9d 	bl	8000dd0 <__aeabi_fcmpge>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01d      	beq.n	80042d8 <print_F+0xfc>
 800429c:	4953      	ldr	r1, [pc, #332]	; (80043ec <print_F+0x210>)
 800429e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a0:	f7fc fd82 	bl	8000da8 <__aeabi_fcmplt>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <print_F+0xfc>
    {
        print_D((x_pos + (0x1E * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
 80042aa:	797b      	ldrb	r3, [r7, #5]
 80042ac:	461a      	mov	r2, r3
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	4413      	add	r3, r2
 80042ba:	b2d8      	uxtb	r0, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	797c      	ldrb	r4, [r7, #5]
 80042c0:	79b9      	ldrb	r1, [r7, #6]
 80042c2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80042c6:	9202      	str	r2, [sp, #8]
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	4622      	mov	r2, r4
 80042d2:	f7ff ff13 	bl	80040fc <print_D>
 80042d6:	e085      	b.n	80043e4 <print_F+0x208>
    }
    else if((value >= 100) && (value < 1000))
 80042d8:	4947      	ldr	r1, [pc, #284]	; (80043f8 <print_F+0x21c>)
 80042da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042dc:	f7fc fd78 	bl	8000dd0 <__aeabi_fcmpge>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01d      	beq.n	8004322 <print_F+0x146>
 80042e6:	4943      	ldr	r1, [pc, #268]	; (80043f4 <print_F+0x218>)
 80042e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ea:	f7fc fd5d 	bl	8000da8 <__aeabi_fcmplt>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <print_F+0x146>
    {
        print_D((x_pos + (0x18 * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
 80042f4:	797b      	ldrb	r3, [r7, #5]
 80042f6:	461a      	mov	r2, r3
 80042f8:	0052      	lsls	r2, r2, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	4413      	add	r3, r2
 8004304:	b2d8      	uxtb	r0, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	797c      	ldrb	r4, [r7, #5]
 800430a:	79b9      	ldrb	r1, [r7, #6]
 800430c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004310:	9202      	str	r2, [sp, #8]
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4622      	mov	r2, r4
 800431c:	f7ff feee 	bl	80040fc <print_D>
 8004320:	e060      	b.n	80043e4 <print_F+0x208>
    }
    else if((value >= 10) && (value < 100))
 8004322:	4936      	ldr	r1, [pc, #216]	; (80043fc <print_F+0x220>)
 8004324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004326:	f7fc fd53 	bl	8000dd0 <__aeabi_fcmpge>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01d      	beq.n	800436c <print_F+0x190>
 8004330:	4931      	ldr	r1, [pc, #196]	; (80043f8 <print_F+0x21c>)
 8004332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004334:	f7fc fd38 	bl	8000da8 <__aeabi_fcmplt>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <print_F+0x190>
    {
        print_D((x_pos + (0x12 * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
 800433e:	797b      	ldrb	r3, [r7, #5]
 8004340:	461a      	mov	r2, r3
 8004342:	00d2      	lsls	r2, r2, #3
 8004344:	4413      	add	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	4413      	add	r3, r2
 800434e:	b2d8      	uxtb	r0, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	797c      	ldrb	r4, [r7, #5]
 8004354:	79b9      	ldrb	r1, [r7, #6]
 8004356:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4622      	mov	r2, r4
 8004366:	f7ff fec9 	bl	80040fc <print_D>
 800436a:	e03b      	b.n	80043e4 <print_F+0x208>
    }
    else if(value < 10)
 800436c:	4923      	ldr	r1, [pc, #140]	; (80043fc <print_F+0x220>)
 800436e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004370:	f7fc fd1a 	bl	8000da8 <__aeabi_fcmplt>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d100      	bne.n	800437c <print_F+0x1a0>
        else
        {
            print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
        }
    }
}
 800437a:	e033      	b.n	80043e4 <print_F+0x208>
        print_D((x_pos + (0x0C * font_size)), y_pos, font_size, colour, back_colour, tmp, points);
 800437c:	797b      	ldrb	r3, [r7, #5]
 800437e:	461a      	mov	r2, r3
 8004380:	0052      	lsls	r2, r2, #1
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	b2da      	uxtb	r2, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	4413      	add	r3, r2
 800438c:	b2d8      	uxtb	r0, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	797c      	ldrb	r4, [r7, #5]
 8004392:	79b9      	ldrb	r1, [r7, #6]
 8004394:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004398:	9202      	str	r2, [sp, #8]
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4622      	mov	r2, r4
 80043a4:	f7ff feaa 	bl	80040fc <print_D>
        if((value) < 0)
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ae:	f7fc fcfb 	bl	8000da8 <__aeabi_fcmplt>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <print_F+0x1f2>
            print_char(x_pos, y_pos, font_size, colour, back_colour, 0x2D);
 80043b8:	797a      	ldrb	r2, [r7, #5]
 80043ba:	79b9      	ldrb	r1, [r7, #6]
 80043bc:	79f8      	ldrb	r0, [r7, #7]
 80043be:	232d      	movs	r3, #45	; 0x2d
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f7ff fc68 	bl	8003c9c <print_char>
}
 80043cc:	e00a      	b.n	80043e4 <print_F+0x208>
            print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
 80043ce:	797a      	ldrb	r2, [r7, #5]
 80043d0:	79b9      	ldrb	r1, [r7, #6]
 80043d2:	79f8      	ldrb	r0, [r7, #7]
 80043d4:	2320      	movs	r3, #32
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f7ff fc5d 	bl	8003c9c <print_char>
}
 80043e2:	e7ff      	b.n	80043e4 <print_F+0x208>
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd90      	pop	{r4, r7, pc}
 80043ec:	461c4000 	.word	0x461c4000
 80043f0:	47c35000 	.word	0x47c35000
 80043f4:	447a0000 	.word	0x447a0000
 80043f8:	42c80000 	.word	0x42c80000
 80043fc:	41200000 	.word	0x41200000

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	2600      	movs	r6, #0
 8004404:	4d0c      	ldr	r5, [pc, #48]	; (8004438 <__libc_init_array+0x38>)
 8004406:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	f000 f822 	bl	8004458 <_init>
 8004414:	2600      	movs	r6, #0
 8004416:	4d0a      	ldr	r5, [pc, #40]	; (8004440 <__libc_init_array+0x40>)
 8004418:	4c0a      	ldr	r4, [pc, #40]	; (8004444 <__libc_init_array+0x44>)
 800441a:	1b64      	subs	r4, r4, r5
 800441c:	10a4      	asrs	r4, r4, #2
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f855 3b04 	ldr.w	r3, [r5], #4
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	080046c4 	.word	0x080046c4
 800443c:	080046c4 	.word	0x080046c4
 8004440:	080046c4 	.word	0x080046c4
 8004444:	080046c8 	.word	0x080046c8

08004448 <memset>:
 8004448:	4603      	mov	r3, r0
 800444a:	4402      	add	r2, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <_init>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	bf00      	nop
 800445c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445e:	bc08      	pop	{r3}
 8004460:	469e      	mov	lr, r3
 8004462:	4770      	bx	lr

08004464 <_fini>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr
