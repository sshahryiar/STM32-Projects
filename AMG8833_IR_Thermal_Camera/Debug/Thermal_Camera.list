
Thermal_Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c0c  08004c0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b732  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6a  00000000  00000000  0002b76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a8  00000000  00000000  0002dc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022863  00000000  00000000  0002e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c770  00000000  00000000  00050e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d07c7  00000000  00000000  0005d5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012dd72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aa0  00000000  00000000  0012ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800497c 	.word	0x0800497c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800497c 	.word	0x0800497c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b0a8      	sub	sp, #160	; 0xa0
 80004e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
   uint8_t i = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
   uint8_t j = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
   uint16_t col = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

   int16_t T_max = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
   int16_t T_min = 125;
 8000502:	237d      	movs	r3, #125	; 0x7d
 8000504:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

   float therm = 0;
 8000508:	f04f 0300 	mov.w	r3, #0
 800050c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

   int16_t temp_array_i[AMG8833_PIXEL_COUNT] = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fa28 	bl	800496c <memset>

  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fd9a 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 faea 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fbca 	bl	8000cbc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000528:	f000 fb50 	bl	8000bcc <MX_I2C2_Init>
  MX_SPI5_Init();
 800052c:	f000 fb8e 	bl	8000c4c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  TFT_init();
 8000530:	f003 f92a 	bl	8003788 <TFT_init>
  AMG8833_init();
 8000534:	f002 ffe8 	bl	8003508 <AMG8833_init>
  TFT_fill(Black);
 8000538:	2000      	movs	r0, #0
 800053a:	f003 fbc5 	bl	8003cc8 <TFT_fill>
  /* USER CODE END 2 */

  Draw_Rectangle(210, 30, 220, 39, YES, SQUARE, Purple, Purple);
 800053e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000542:	9303      	str	r3, [sp, #12]
 8000544:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000548:	9302      	str	r3, [sp, #8]
 800054a:	2300      	movs	r3, #0
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2327      	movs	r3, #39	; 0x27
 8000554:	22dc      	movs	r2, #220	; 0xdc
 8000556:	211e      	movs	r1, #30
 8000558:	20d2      	movs	r0, #210	; 0xd2
 800055a:	f003 fcd9 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 40, 220, 49, YES, SQUARE, Blue, Blue);
 800055e:	231f      	movs	r3, #31
 8000560:	9303      	str	r3, [sp, #12]
 8000562:	231f      	movs	r3, #31
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2300      	movs	r3, #0
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2331      	movs	r3, #49	; 0x31
 8000570:	22dc      	movs	r2, #220	; 0xdc
 8000572:	2128      	movs	r1, #40	; 0x28
 8000574:	20d2      	movs	r0, #210	; 0xd2
 8000576:	f003 fccb 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 50, 220, 59, YES, SQUARE, Light_Blue, Light_Blue);
 800057a:	f240 531f 	movw	r3, #1311	; 0x51f
 800057e:	9303      	str	r3, [sp, #12]
 8000580:	f240 531f 	movw	r3, #1311	; 0x51f
 8000584:	9302      	str	r3, [sp, #8]
 8000586:	2300      	movs	r3, #0
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	233b      	movs	r3, #59	; 0x3b
 8000590:	22dc      	movs	r2, #220	; 0xdc
 8000592:	2132      	movs	r1, #50	; 0x32
 8000594:	20d2      	movs	r0, #210	; 0xd2
 8000596:	f003 fcbb 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 60, 220, 69, YES, SQUARE, Cyan, Cyan);
 800059a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800059e:	9303      	str	r3, [sp, #12]
 80005a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2300      	movs	r3, #0
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2345      	movs	r3, #69	; 0x45
 80005b0:	22dc      	movs	r2, #220	; 0xdc
 80005b2:	213c      	movs	r1, #60	; 0x3c
 80005b4:	20d2      	movs	r0, #210	; 0xd2
 80005b6:	f003 fcab 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 70, 220, 79, YES, SQUARE, Green, Green);
 80005ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005be:	9303      	str	r3, [sp, #12]
 80005c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005c4:	9302      	str	r3, [sp, #8]
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	234f      	movs	r3, #79	; 0x4f
 80005d0:	22dc      	movs	r2, #220	; 0xdc
 80005d2:	2146      	movs	r1, #70	; 0x46
 80005d4:	20d2      	movs	r0, #210	; 0xd2
 80005d6:	f003 fc9b 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 80, 220, 89, YES, SQUARE, Yellow, Yellow);
 80005da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005de:	9303      	str	r3, [sp, #12]
 80005e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2359      	movs	r3, #89	; 0x59
 80005f0:	22dc      	movs	r2, #220	; 0xdc
 80005f2:	2150      	movs	r1, #80	; 0x50
 80005f4:	20d2      	movs	r0, #210	; 0xd2
 80005f6:	f003 fc8b 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 90, 220, 99, YES, SQUARE, Orange, Orange);
 80005fa:	f64f 4308 	movw	r3, #64520	; 0xfc08
 80005fe:	9303      	str	r3, [sp, #12]
 8000600:	f64f 4308 	movw	r3, #64520	; 0xfc08
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2300      	movs	r3, #0
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2363      	movs	r3, #99	; 0x63
 8000610:	22dc      	movs	r2, #220	; 0xdc
 8000612:	215a      	movs	r1, #90	; 0x5a
 8000614:	20d2      	movs	r0, #210	; 0xd2
 8000616:	f003 fc7b 	bl	8003f10 <Draw_Rectangle>
  Draw_Rectangle(210, 100, 220, 109, YES, SQUARE, Red, Red);
 800061a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800061e:	9303      	str	r3, [sp, #12]
 8000620:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000624:	9302      	str	r3, [sp, #8]
 8000626:	2300      	movs	r3, #0
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	236d      	movs	r3, #109	; 0x6d
 8000630:	22dc      	movs	r2, #220	; 0xdc
 8000632:	2164      	movs	r1, #100	; 0x64
 8000634:	20d2      	movs	r0, #210	; 0xd2
 8000636:	f003 fc6b 	bl	8003f10 <Draw_Rectangle>

  print_str(215, 0, 1, White, Black, "AMG8833 FLIR Demo");
 800063a:	4bca      	ldr	r3, [pc, #808]	; (8000964 <main+0x480>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2300      	movs	r3, #0
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000646:	2201      	movs	r2, #1
 8000648:	2100      	movs	r1, #0
 800064a:	20d7      	movs	r0, #215	; 0xd7
 800064c:	f003 fdb0 	bl	80041b0 <print_str>
  print_str(225, 30, 1, White, Black, "< 10");
 8000650:	4bc5      	ldr	r3, [pc, #788]	; (8000968 <main+0x484>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2300      	movs	r3, #0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065c:	2201      	movs	r2, #1
 800065e:	211e      	movs	r1, #30
 8000660:	20e1      	movs	r0, #225	; 0xe1
 8000662:	f003 fda5 	bl	80041b0 <print_str>
  print_str(225, 40, 1, White, Black, "15");
 8000666:	4bc1      	ldr	r3, [pc, #772]	; (800096c <main+0x488>)
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2300      	movs	r3, #0
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000672:	2201      	movs	r2, #1
 8000674:	2128      	movs	r1, #40	; 0x28
 8000676:	20e1      	movs	r0, #225	; 0xe1
 8000678:	f003 fd9a 	bl	80041b0 <print_str>
  print_str(225, 50, 1, White, Black, "20");
 800067c:	4bbc      	ldr	r3, [pc, #752]	; (8000970 <main+0x48c>)
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000688:	2201      	movs	r2, #1
 800068a:	2132      	movs	r1, #50	; 0x32
 800068c:	20e1      	movs	r0, #225	; 0xe1
 800068e:	f003 fd8f 	bl	80041b0 <print_str>
  print_str(225, 60, 1, White, Black, "25");
 8000692:	4bb8      	ldr	r3, [pc, #736]	; (8000974 <main+0x490>)
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2300      	movs	r3, #0
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069e:	2201      	movs	r2, #1
 80006a0:	213c      	movs	r1, #60	; 0x3c
 80006a2:	20e1      	movs	r0, #225	; 0xe1
 80006a4:	f003 fd84 	bl	80041b0 <print_str>
  print_str(225, 70, 1, White, Black, "30");
 80006a8:	4bb3      	ldr	r3, [pc, #716]	; (8000978 <main+0x494>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2300      	movs	r3, #0
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b4:	2201      	movs	r2, #1
 80006b6:	2146      	movs	r1, #70	; 0x46
 80006b8:	20e1      	movs	r0, #225	; 0xe1
 80006ba:	f003 fd79 	bl	80041b0 <print_str>
  print_str(225, 80, 1, White, Black, "35");
 80006be:	4baf      	ldr	r3, [pc, #700]	; (800097c <main+0x498>)
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2300      	movs	r3, #0
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ca:	2201      	movs	r2, #1
 80006cc:	2150      	movs	r1, #80	; 0x50
 80006ce:	20e1      	movs	r0, #225	; 0xe1
 80006d0:	f003 fd6e 	bl	80041b0 <print_str>
  print_str(225, 90, 1, White, Black, "40");
 80006d4:	4baa      	ldr	r3, [pc, #680]	; (8000980 <main+0x49c>)
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	2300      	movs	r3, #0
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e0:	2201      	movs	r2, #1
 80006e2:	215a      	movs	r1, #90	; 0x5a
 80006e4:	20e1      	movs	r0, #225	; 0xe1
 80006e6:	f003 fd63 	bl	80041b0 <print_str>
  print_str(225, 100, 1, White, Black, "> 45");
 80006ea:	4ba6      	ldr	r3, [pc, #664]	; (8000984 <main+0x4a0>)
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2300      	movs	r3, #0
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f6:	2201      	movs	r2, #1
 80006f8:	2164      	movs	r1, #100	; 0x64
 80006fa:	20e1      	movs	r0, #225	; 0xe1
 80006fc:	f003 fd58 	bl	80041b0 <print_str>

  print_str(210, 160, 1, White, Black, "T. Thm./'C:");
 8000700:	4ba1      	ldr	r3, [pc, #644]	; (8000988 <main+0x4a4>)
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2300      	movs	r3, #0
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	2201      	movs	r2, #1
 800070e:	21a0      	movs	r1, #160	; 0xa0
 8000710:	20d2      	movs	r0, #210	; 0xd2
 8000712:	f003 fd4d 	bl	80041b0 <print_str>
  print_str(210, 170, 1, White, Black, "T. Max./'C:");
 8000716:	4b9d      	ldr	r3, [pc, #628]	; (800098c <main+0x4a8>)
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2300      	movs	r3, #0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	2201      	movs	r2, #1
 8000724:	21aa      	movs	r1, #170	; 0xaa
 8000726:	20d2      	movs	r0, #210	; 0xd2
 8000728:	f003 fd42 	bl	80041b0 <print_str>
  print_str(210, 180, 1, White, Black, "T. Min./'C:");
 800072c:	4b98      	ldr	r3, [pc, #608]	; (8000990 <main+0x4ac>)
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2300      	movs	r3, #0
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000738:	2201      	movs	r2, #1
 800073a:	21b4      	movs	r1, #180	; 0xb4
 800073c:	20d2      	movs	r0, #210	; 0xd2
 800073e:	f003 fd37 	bl	80041b0 <print_str>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(AMG8833_INT_GPIO_Port, AMG8833_INT_Pin))
 8000742:	2104      	movs	r1, #4
 8000744:	4893      	ldr	r0, [pc, #588]	; (8000994 <main+0x4b0>)
 8000746:	f000 ffad 	bl	80016a4 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <main+0x27a>
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	4890      	ldr	r0, [pc, #576]	; (8000998 <main+0x4b4>)
 8000758:	f000 ffbc 	bl	80016d4 <HAL_GPIO_WritePin>
 800075c:	e005      	b.n	800076a <main+0x286>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	488c      	ldr	r0, [pc, #560]	; (8000998 <main+0x4b4>)
 8000766:	f000 ffb5 	bl	80016d4 <HAL_GPIO_WritePin>
	  }

	  T_max = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  T_min = 125;
 8000770:	237d      	movs	r3, #125	; 0x7d
 8000772:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	  AMG8833_read_pixel_temperature_register_value(temp_array_i);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f002 ffc3 	bl	8003704 <AMG8833_read_pixel_temperature_register_value>

	  therm = AMG8833_get_temperature();
 800077e:	f002 ff79 	bl	8003674 <AMG8833_get_temperature>
 8000782:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

	  print_F(280, 160, 1, White, Black, therm, 2);
 8000786:	2302      	movs	r3, #2
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2300      	movs	r3, #0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	2201      	movs	r2, #1
 8000798:	21a0      	movs	r1, #160	; 0xa0
 800079a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800079e:	f003 ff85 	bl	80046ac <print_F>

	  for(i = 0; i < 8; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80007a8:	e185      	b.n	8000ab6 <main+0x5d2>
	  {
		  for(j = 0; j < 8; j++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80007b0:	e177      	b.n	8000aa2 <main+0x5be>
		  {


			  if(temp_array_i[j + (i * 8)] < 10)
 80007b2:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80007b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80007c4:	4413      	add	r3, r2
 80007c6:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80007ca:	2b09      	cmp	r3, #9
 80007cc:	dc04      	bgt.n	80007d8 <main+0x2f4>
			  {
				  col = Purple;
 80007ce:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80007d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80007d6:	e0e5      	b.n	80009a4 <main+0x4c0>
			  }

			  else if((temp_array_i[j + (i * 8)] >= 10) && (temp_array_i[j + (i * 8)] < 15))
 80007d8:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80007dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	4413      	add	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80007ea:	4413      	add	r3, r2
 80007ec:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80007f0:	2b09      	cmp	r3, #9
 80007f2:	dd11      	ble.n	8000818 <main+0x334>
 80007f4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80007f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	4413      	add	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000806:	4413      	add	r3, r2
 8000808:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 800080c:	2b0e      	cmp	r3, #14
 800080e:	dc03      	bgt.n	8000818 <main+0x334>
			  {
				  col = Blue;
 8000810:	231f      	movs	r3, #31
 8000812:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8000816:	e0c5      	b.n	80009a4 <main+0x4c0>
			  }

			  else if((temp_array_i[j + (i * 8)] >= 15) && (temp_array_i[j + (i * 8)] < 20))
 8000818:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800081c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800082a:	4413      	add	r3, r2
 800082c:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000830:	2b0e      	cmp	r3, #14
 8000832:	dd12      	ble.n	800085a <main+0x376>
 8000834:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000838:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000846:	4413      	add	r3, r2
 8000848:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 800084c:	2b13      	cmp	r3, #19
 800084e:	dc04      	bgt.n	800085a <main+0x376>
			  {
				  col = Light_Blue;
 8000850:	f240 531f 	movw	r3, #1311	; 0x51f
 8000854:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8000858:	e0a4      	b.n	80009a4 <main+0x4c0>
			  }

			  else if((temp_array_i[j + (i * 8)] >= 20) && (temp_array_i[j + (i * 8)] < 25))
 800085a:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800085e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800086c:	4413      	add	r3, r2
 800086e:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000872:	2b13      	cmp	r3, #19
 8000874:	dd12      	ble.n	800089c <main+0x3b8>
 8000876:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800087a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000888:	4413      	add	r3, r2
 800088a:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 800088e:	2b18      	cmp	r3, #24
 8000890:	dc04      	bgt.n	800089c <main+0x3b8>
			  {
				  col = Cyan;
 8000892:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000896:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800089a:	e083      	b.n	80009a4 <main+0x4c0>
			  }

			  else if((temp_array_i[j + (i * 8)] >= 25) && (temp_array_i[j + (i * 8)] < 30))
 800089c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80008a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80008ae:	4413      	add	r3, r2
 80008b0:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80008b4:	2b18      	cmp	r3, #24
 80008b6:	dd12      	ble.n	80008de <main+0x3fa>
 80008b8:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80008bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	4413      	add	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80008ca:	4413      	add	r3, r2
 80008cc:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80008d0:	2b1d      	cmp	r3, #29
 80008d2:	dc04      	bgt.n	80008de <main+0x3fa>
			  {
				  col = Green;
 80008d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008d8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80008dc:	e062      	b.n	80009a4 <main+0x4c0>
			  }

			  else if((temp_array_i[j + (i * 8)] >= 30) && (temp_array_i[j + (i * 8)] < 35))
 80008de:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80008e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80008f0:	4413      	add	r3, r2
 80008f2:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80008f6:	2b1d      	cmp	r3, #29
 80008f8:	dd12      	ble.n	8000920 <main+0x43c>
 80008fa:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80008fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800090c:	4413      	add	r3, r2
 800090e:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000912:	2b22      	cmp	r3, #34	; 0x22
 8000914:	dc04      	bgt.n	8000920 <main+0x43c>
			  {
				  col = Yellow;
 8000916:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800091a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800091e:	e041      	b.n	80009a4 <main+0x4c0>
			  }

			  else if((temp_array_i[j + (i * 8)] >= 35) && (temp_array_i[j + (i * 8)] < 40))
 8000920:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000924:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	4413      	add	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000932:	4413      	add	r3, r2
 8000934:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000938:	2b22      	cmp	r3, #34	; 0x22
 800093a:	dd2f      	ble.n	800099c <main+0x4b8>
 800093c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000940:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800094e:	4413      	add	r3, r2
 8000950:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000954:	2b27      	cmp	r3, #39	; 0x27
 8000956:	dc21      	bgt.n	800099c <main+0x4b8>
			  {
				  col = Green;
 8000958:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800095c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8000960:	e020      	b.n	80009a4 <main+0x4c0>
 8000962:	bf00      	nop
 8000964:	08004994 	.word	0x08004994
 8000968:	080049a8 	.word	0x080049a8
 800096c:	080049b0 	.word	0x080049b0
 8000970:	080049b4 	.word	0x080049b4
 8000974:	080049b8 	.word	0x080049b8
 8000978:	080049bc 	.word	0x080049bc
 800097c:	080049c0 	.word	0x080049c0
 8000980:	080049c4 	.word	0x080049c4
 8000984:	080049c8 	.word	0x080049c8
 8000988:	080049d0 	.word	0x080049d0
 800098c:	080049dc 	.word	0x080049dc
 8000990:	080049e8 	.word	0x080049e8
 8000994:	40021400 	.word	0x40021400
 8000998:	40021800 	.word	0x40021800
			  }

			  else
			  {
				  col = Red;
 800099c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			  }

			  if(temp_array_i[j + (i * 8)] < T_min)
 80009a4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80009a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	4413      	add	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80009b6:	4413      	add	r3, r2
 80009b8:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80009bc:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dd0d      	ble.n	80009e0 <main+0x4fc>
			  {
				  T_min = temp_array_i[j + (i * 8)];
 80009c4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80009c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80009d6:	4413      	add	r3, r2
 80009d8:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80009dc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			  }

			  if(temp_array_i[j + (i * 8)] > T_max)
 80009e0:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80009e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80009f2:	4413      	add	r3, r2
 80009f4:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80009f8:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	; 0x8a
 80009fc:	429a      	cmp	r2, r3
 80009fe:	da0d      	bge.n	8000a1c <main+0x538>
			  {
				  T_max = temp_array_i[j + (i * 8)];
 8000a00:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000a04:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000a12:	4413      	add	r3, r2
 8000a14:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8000a18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			  }

			  TFT_fill_area((25 * j), (25 * i), ((25 * j) + 24), ((25 * i) + 24), col);
 8000a1c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	0091      	lsls	r1, r2, #2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	460b      	mov	r3, r1
 8000a30:	4413      	add	r3, r2
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b218      	sxth	r0, r3
 8000a36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	461a      	mov	r2, r3
 8000a44:	0091      	lsls	r1, r2, #2
 8000a46:	461a      	mov	r2, r3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b219      	sxth	r1, r3
 8000a50:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	0094      	lsls	r4, r2, #2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4623      	mov	r3, r4
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3318      	adds	r3, #24
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	461c      	mov	r4, r3
 8000a76:	00a4      	lsls	r4, r4, #2
 8000a78:	4423      	add	r3, r4
 8000a7a:	461c      	mov	r4, r3
 8000a7c:	00a5      	lsls	r5, r4, #2
 8000a7e:	461c      	mov	r4, r3
 8000a80:	462b      	mov	r3, r5
 8000a82:	4423      	add	r3, r4
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3318      	adds	r3, #24
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b21c      	sxth	r4, r3
 8000a8c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4623      	mov	r3, r4
 8000a94:	f003 f942 	bl	8003d1c <TFT_fill_area>
		  for(j = 0; j < 8; j++)
 8000a98:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000aa2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000aa6:	2b07      	cmp	r3, #7
 8000aa8:	f67f ae83 	bls.w	80007b2 <main+0x2ce>
	  for(i = 0; i < 8; i++)
 8000aac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000ab6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	f67f ae75 	bls.w	80007aa <main+0x2c6>
		  }
	  }

	  print_I(280, 170, 1, White, Black, T_max);
 8000ac0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ace:	2201      	movs	r2, #1
 8000ad0:	21aa      	movs	r1, #170	; 0xaa
 8000ad2:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000ad6:	f003 fbab 	bl	8004230 <print_I>
	  print_I(280, 180, 1, White, Black, T_min);
 8000ada:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae8:	2201      	movs	r2, #1
 8000aea:	21b4      	movs	r1, #180	; 0xb4
 8000aec:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000af0:	f003 fb9e 	bl	8004230 <print_I>
	  if(HAL_GPIO_ReadPin(AMG8833_INT_GPIO_Port, AMG8833_INT_Pin))
 8000af4:	e625      	b.n	8000742 <main+0x25e>
 8000af6:	bf00      	nop

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 ff30 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b6c:	23a8      	movs	r3, #168	; 0xa8
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fdd3 	bl	8002728 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 f940 	bl	8000e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2105      	movs	r1, #5
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 f834 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bb6:	f000 f929 	bl	8000e0c <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_I2C2_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <MX_I2C2_Init+0x7c>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000c0a:	f000 fd7d 	bl	8001708 <HAL_I2C_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f000 f8fa 	bl	8000e0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000c1c:	f001 fd09 	bl	8002632 <HAL_I2CEx_ConfigAnalogFilter>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c26:	f000 f8f1 	bl	8000e0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_I2C2_Init+0x74>)
 8000c2e:	f001 fd3c 	bl	80026aa <HAL_I2CEx_ConfigDigitalFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c38:	f000 f8e8 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000080 	.word	0x20000080
 8000c44:	40005800 	.word	0x40005800
 8000c48:	000186a0 	.word	0x000186a0

08000c4c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c52:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <MX_SPI5_Init+0x6c>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c64:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000c9a:	220a      	movs	r2, #10
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_SPI5_Init+0x68>)
 8000ca0:	f002 f9a2 	bl	8002fe8 <HAL_SPI_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 8000caa:	f000 f8af 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000028 	.word	0x20000028
 8000cb8:	40015000 	.word	0x40015000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a47      	ldr	r2, [pc, #284]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2104      	movs	r1, #4
 8000d62:	4826      	ldr	r0, [pc, #152]	; (8000dfc <MX_GPIO_Init+0x140>)
 8000d64:	f000 fcb6 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d6e:	4824      	ldr	r0, [pc, #144]	; (8000e00 <MX_GPIO_Init+0x144>)
 8000d70:	f000 fcb0 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7a:	4822      	ldr	r0, [pc, #136]	; (8000e04 <MX_GPIO_Init+0x148>)
 8000d7c:	f000 fcaa 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMG8833_INT_Pin */
  GPIO_InitStruct.Pin = AMG8833_INT_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AMG8833_INT_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	481d      	ldr	r0, [pc, #116]	; (8000e08 <MX_GPIO_Init+0x14c>)
 8000d94:	f000 fada 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <MX_GPIO_Init+0x140>)
 8000db0:	f000 facc 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin;
 8000db4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_GPIO_Init+0x144>)
 8000dce:	f000 fabd 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x148>)
 8000dec:	f000 faae 	bl	800134c <HAL_GPIO_Init>

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020c00 	.word	0x40020c00
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40021400 	.word	0x40021400

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_I2C_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12b      	bne.n	8000ee2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = AMG8833_SDA_Pin|AMG8833_SCL_Pin;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <HAL_I2C_MspInit+0x8c>)
 8000ec2:	f000 fa43 	bl	800134c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40005800 	.word	0x40005800
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40021400 	.word	0x40021400

08000ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_SPI_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 8000f52:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f64:	2305      	movs	r3, #5
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_SPI_MspInit+0x8c>)
 8000f70:	f000 f9ec 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40015000 	.word	0x40015000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40021400 	.word	0x40021400

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f890 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f003 fc79 	bl	8004924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fa57 	bl	80004e4 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001038:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001044:	08004c14 	.word	0x08004c14
  ldr r2, =_sbss
 8001048:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800104c:	200000dc 	.word	0x200000dc

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f931 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	200f      	movs	r0, #15
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fec6 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f93b 	bl	8001332 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f911 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	200000d8 	.word	0x200000d8

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200000d8 	.word	0x200000d8

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5c 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb0 	bl	80012a0 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e177      	b.n	8001658 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8166 	bne.w	8001652 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d005      	beq.n	800139e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	2b02      	cmp	r3, #2
 800139c:	d130      	bne.n	8001400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 0201 	and.w	r2, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b03      	cmp	r3, #3
 800140a:	d017      	beq.n	800143c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d123      	bne.n	8001490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80c0 	beq.w	8001652 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_GPIO_Init+0x324>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_GPIO_Init+0x324>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_GPIO_Init+0x324>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a61      	ldr	r2, [pc, #388]	; (8001674 <HAL_GPIO_Init+0x328>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a58      	ldr	r2, [pc, #352]	; (8001678 <HAL_GPIO_Init+0x32c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d037      	beq.n	800158a <HAL_GPIO_Init+0x23e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a57      	ldr	r2, [pc, #348]	; (800167c <HAL_GPIO_Init+0x330>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d031      	beq.n	8001586 <HAL_GPIO_Init+0x23a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a56      	ldr	r2, [pc, #344]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d02b      	beq.n	8001582 <HAL_GPIO_Init+0x236>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a55      	ldr	r2, [pc, #340]	; (8001684 <HAL_GPIO_Init+0x338>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d025      	beq.n	800157e <HAL_GPIO_Init+0x232>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x33c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01f      	beq.n	800157a <HAL_GPIO_Init+0x22e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a53      	ldr	r2, [pc, #332]	; (800168c <HAL_GPIO_Init+0x340>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d019      	beq.n	8001576 <HAL_GPIO_Init+0x22a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_GPIO_Init+0x344>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x226>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x348>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x222>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x34c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x21e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x350>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x21a>
 8001562:	2309      	movs	r3, #9
 8001564:	e012      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001566:	230a      	movs	r3, #10
 8001568:	e010      	b.n	800158c <HAL_GPIO_Init+0x240>
 800156a:	2308      	movs	r3, #8
 800156c:	e00e      	b.n	800158c <HAL_GPIO_Init+0x240>
 800156e:	2307      	movs	r3, #7
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001572:	2306      	movs	r3, #6
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x240>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x240>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x240>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_GPIO_Init+0x328>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ce:	4a34      	ldr	r2, [pc, #208]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f8:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_GPIO_Init+0x354>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_GPIO_Init+0x354>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_GPIO_Init+0x354>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_GPIO_Init+0x354>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae84 	bls.w	8001368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40022000 	.word	0x40022000
 800169c:	40022400 	.word	0x40022400
 80016a0:	40013c00 	.word	0x40013c00

080016a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e001      	b.n	80016c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e12b      	b.n	8001972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fb9a 	bl	8000e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2224      	movs	r2, #36	; 0x24
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800176c:	f001 fc28 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8001770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a81      	ldr	r2, [pc, #516]	; (800197c <HAL_I2C_Init+0x274>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d807      	bhi.n	800178c <HAL_I2C_Init+0x84>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a80      	ldr	r2, [pc, #512]	; (8001980 <HAL_I2C_Init+0x278>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e006      	b.n	800179a <HAL_I2C_Init+0x92>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a7d      	ldr	r2, [pc, #500]	; (8001984 <HAL_I2C_Init+0x27c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	bf94      	ite	ls
 8001794:	2301      	movls	r3, #1
 8001796:	2300      	movhi	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0e7      	b.n	8001972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a78      	ldr	r2, [pc, #480]	; (8001988 <HAL_I2C_Init+0x280>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <HAL_I2C_Init+0x274>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <HAL_I2C_Init+0xd4>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3301      	adds	r3, #1
 80017da:	e009      	b.n	80017f0 <HAL_I2C_Init+0xe8>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a69      	ldr	r2, [pc, #420]	; (800198c <HAL_I2C_Init+0x284>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	3301      	adds	r3, #1
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	495c      	ldr	r1, [pc, #368]	; (800197c <HAL_I2C_Init+0x274>)
 800180c:	428b      	cmp	r3, r1
 800180e:	d819      	bhi.n	8001844 <HAL_I2C_Init+0x13c>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1e59      	subs	r1, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fbb1 f3f3 	udiv	r3, r1, r3
 800181e:	1c59      	adds	r1, r3, #1
 8001820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001824:	400b      	ands	r3, r1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <HAL_I2C_Init+0x138>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e59      	subs	r1, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fbb1 f3f3 	udiv	r3, r1, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183e:	e051      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 8001840:	2304      	movs	r3, #4
 8001842:	e04f      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_I2C_Init+0x168>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1e58      	subs	r0, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e012      	b.n	8001896 <HAL_I2C_Init+0x18e>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_Init+0x196>
 800189a:	2301      	movs	r3, #1
 800189c:	e022      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10e      	bne.n	80018c4 <HAL_I2C_Init+0x1bc>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1e58      	subs	r0, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	440b      	add	r3, r1
 80018b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c2:	e00f      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e58      	subs	r0, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	0099      	lsls	r1, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	6809      	ldr	r1, [r1, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6911      	ldr	r1, [r2, #16]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68d2      	ldr	r2, [r2, #12]
 800191e:	4311      	orrs	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	000186a0 	.word	0x000186a0
 8001980:	001e847f 	.word	0x001e847f
 8001984:	003d08ff 	.word	0x003d08ff
 8001988:	431bde83 	.word	0x431bde83
 800198c:	10624dd3 	.word	0x10624dd3

08001990 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	461a      	mov	r2, r3
 800199c:	460b      	mov	r3, r1
 800199e:	817b      	strh	r3, [r7, #10]
 80019a0:	4613      	mov	r3, r2
 80019a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fbbc 	bl	8001120 <HAL_GetTick>
 80019a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	f040 80e0 	bne.w	8001b78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2319      	movs	r3, #25
 80019be:	2201      	movs	r2, #1
 80019c0:	4970      	ldr	r1, [pc, #448]	; (8001b84 <HAL_I2C_Master_Transmit+0x1f4>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fc58 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
 80019d0:	e0d3      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_I2C_Master_Transmit+0x50>
 80019dc:	2302      	movs	r3, #2
 80019de:	e0cc      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ea>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d007      	beq.n	8001a06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2221      	movs	r2, #33	; 0x21
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2210      	movs	r2, #16
 8001a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	893a      	ldrh	r2, [r7, #8]
 8001a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a48:	8979      	ldrh	r1, [r7, #10]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fac2 	bl	8001fd8 <I2C_MasterRequestWrite>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e08d      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a74:	e066      	b.n	8001b44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	6a39      	ldr	r1, [r7, #32]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fcd2 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d107      	bne.n	8001a9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06b      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d11b      	bne.n	8001b18 <HAL_I2C_Master_Transmit+0x188>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d017      	beq.n	8001b18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	6a39      	ldr	r1, [r7, #32]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fcc2 	bl	80024a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d107      	bne.n	8001b40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e01a      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d194      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	00100002 	.word	0x00100002
 8001b88:	ffff0000 	.word	0xffff0000

08001b8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	461a      	mov	r2, r3
 8001b98:	460b      	mov	r3, r1
 8001b9a:	817b      	strh	r3, [r7, #10]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fabe 	bl	8001120 <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	f040 820b 	bne.w	8001fca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2319      	movs	r3, #25
 8001bba:	2201      	movs	r2, #1
 8001bbc:	497c      	ldr	r1, [pc, #496]	; (8001db0 <HAL_I2C_Master_Receive+0x224>)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fb5a 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e1fe      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_I2C_Master_Receive+0x50>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e1f7      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d007      	beq.n	8001c02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2222      	movs	r2, #34	; 0x22
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	893a      	ldrh	r2, [r7, #8]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4a5c      	ldr	r2, [pc, #368]	; (8001db4 <HAL_I2C_Master_Receive+0x228>)
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c44:	8979      	ldrh	r1, [r7, #10]
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa46 	bl	80020dc <I2C_MasterRequestRead>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1b8      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d113      	bne.n	8001c8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e18c      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d11b      	bne.n	8001cca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e16c      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d11b      	bne.n	8001d0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	e14c      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d30:	e138      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	f200 80f1 	bhi.w	8001f1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d123      	bne.n	8001d8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 fbed 	bl	8002528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e139      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d8a:	e10b      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d14e      	bne.n	8001e32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <HAL_I2C_Master_Receive+0x22c>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fa6a 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e10e      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
 8001dae:	bf00      	nop
 8001db0:	00100002 	.word	0x00100002
 8001db4:	ffff0000 	.word	0xffff0000
 8001db8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e30:	e0b8      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4966      	ldr	r1, [pc, #408]	; (8001fd4 <HAL_I2C_Master_Receive+0x448>)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fa1b 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0bf      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	2200      	movs	r2, #0
 8001e96:	494f      	ldr	r1, [pc, #316]	; (8001fd4 <HAL_I2C_Master_Receive+0x448>)
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f9ed 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e091      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f1c:	e042      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fb00 	bl	8002528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e04c      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d118      	bne.n	8001fa4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f aec2 	bne.w	8001d32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	00010004 	.word	0x00010004

08001fd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d006      	beq.n	8002002 <I2C_MasterRequestWrite+0x2a>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d003      	beq.n	8002002 <I2C_MasterRequestWrite+0x2a>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002000:	d108      	bne.n	8002014 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e00b      	b.n	800202c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	2b12      	cmp	r3, #18
 800201a:	d107      	bne.n	800202c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f91d 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002052:	d103      	bne.n	800205c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e035      	b.n	80020cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002068:	d108      	bne.n	800207c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	e01b      	b.n	80020b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800207c:	897b      	ldrh	r3, [r7, #10]
 800207e:	11db      	asrs	r3, r3, #7
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f003 0306 	and.w	r3, r3, #6
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f063 030f 	orn	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <I2C_MasterRequestWrite+0xfc>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f943 	bl	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e010      	b.n	80020cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020aa:	897b      	ldrh	r3, [r7, #10]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <I2C_MasterRequestWrite+0x100>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f933 	bl	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	00010008 	.word	0x00010008
 80020d8:	00010002 	.word	0x00010002

080020dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	460b      	mov	r3, r1
 80020ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002100:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d006      	beq.n	8002116 <I2C_MasterRequestRead+0x3a>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d003      	beq.n	8002116 <I2C_MasterRequestRead+0x3a>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00b      	b.n	8002140 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	2b11      	cmp	r3, #17
 800212e:	d107      	bne.n	8002140 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f893 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002166:	d103      	bne.n	8002170 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e079      	b.n	8002268 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800217c:	d108      	bne.n	8002190 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800217e:	897b      	ldrh	r3, [r7, #10]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e05f      	b.n	8002250 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	11db      	asrs	r3, r3, #7
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 0306 	and.w	r3, r3, #6
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f063 030f 	orn	r3, r3, #15
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4930      	ldr	r1, [pc, #192]	; (8002270 <I2C_MasterRequestRead+0x194>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8b9 	bl	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e054      	b.n	8002268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4929      	ldr	r1, [pc, #164]	; (8002274 <I2C_MasterRequestRead+0x198>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8a9 	bl	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e044      	b.n	8002268 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002202:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f831 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222a:	d103      	bne.n	8002234 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e017      	b.n	8002268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002238:	897b      	ldrh	r3, [r7, #10]
 800223a:	11db      	asrs	r3, r3, #7
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f063 030e 	orn	r3, r3, #14
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4907      	ldr	r1, [pc, #28]	; (8002274 <I2C_MasterRequestRead+0x198>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f865 	bl	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	00010008 	.word	0x00010008
 8002274:	00010002 	.word	0x00010002

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e025      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d021      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7fe ff45 	bl	8001120 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d116      	bne.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e023      	b.n	800231e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10d      	bne.n	80022fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4013      	ands	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	e00c      	b.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	429a      	cmp	r2, r3
 800231a:	d0b6      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002334:	e051      	b.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d123      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800235e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e046      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d021      	beq.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7fe fec3 	bl	8001120 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e020      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10c      	bne.n	80023fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e00b      	b.n	8002416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	43da      	mvns	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4013      	ands	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d18d      	bne.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002430:	e02d      	b.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8ce 	bl	80025d4 <I2C_IsAcknowledgeFailed>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e02d      	b.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d021      	beq.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7fe fe69 	bl	8001120 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d116      	bne.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d1ca      	bne.n	8002432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024b2:	e02d      	b.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f88d 	bl	80025d4 <I2C_IsAcknowledgeFailed>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e02d      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d021      	beq.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7fe fe28 	bl	8001120 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b04      	cmp	r3, #4
 800251c:	d1ca      	bne.n	80024b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002534:	e042      	b.n	80025bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b10      	cmp	r3, #16
 8002542:	d119      	bne.n	8002578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0210 	mvn.w	r2, #16
 800254c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e029      	b.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002578:	f7fe fdd2 	bl	8001120 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	429a      	cmp	r2, r3
 8002586:	d302      	bcc.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e007      	b.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d1b5      	bne.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d11b      	bne.n	8002624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b20      	cmp	r3, #32
 8002646:	d129      	bne.n	800269c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0210 	bic.w	r2, r2, #16
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d12a      	bne.n	800271a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	; 0x24
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	89fb      	ldrh	r3, [r7, #14]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	89fa      	ldrh	r2, [r7, #14]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e264      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d075      	beq.n	8002832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002746:	4ba3      	ldr	r3, [pc, #652]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4ba0      	ldr	r3, [pc, #640]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275a:	2b08      	cmp	r3, #8
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b9d      	ldr	r3, [pc, #628]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b99      	ldr	r3, [pc, #612]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e23f      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x74>
 800278e:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a90      	ldr	r2, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8a      	ldr	r2, [pc, #552]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a87      	ldr	r2, [pc, #540]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 80027c0:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a83      	ldr	r2, [pc, #524]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fc9e 	bl	8001120 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fc9a 	bl	8001120 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e204      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fc8a 	bl	8001120 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fc86 	bl	8001120 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1f0      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c4      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4952      	ldr	r1, [pc, #328]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_OscConfig+0x2b0>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fc3f 	bl	8001120 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe fc3b 	bl	8001120 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1a5      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4940      	ldr	r1, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x2b0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fc1e 	bl	8001120 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe fc1a 	bl	8001120 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e184      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d030      	beq.n	8002974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x2b4>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fbfe 	bl	8001120 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe fbfa 	bl	8001120 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e164      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x200>
 8002946:	e015      	b.n	8002974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x2b4>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe fbe7 	bl	8001120 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe fbe3 	bl	8001120 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e14d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a0 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x2b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d121      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x2b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x2b8>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fba9 	bl	8001120 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	e011      	b.n	80029f6 <HAL_RCC_OscConfig+0x2ce>
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	42470000 	.word	0x42470000
 80029dc:	42470e80 	.word	0x42470e80
 80029e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fe fb9c 	bl	8001120 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e106      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b85      	ldr	r3, [pc, #532]	; (8002c0c <HAL_RCC_OscConfig+0x4e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a80      	ldr	r2, [pc, #512]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x312>
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x32a>
 8002a3a:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a74      	ldr	r2, [pc, #464]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a71      	ldr	r2, [pc, #452]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fb61 	bl	8001120 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fb5d 	bl	8001120 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0c5      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCC_OscConfig+0x33a>
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fb4b 	bl	8001120 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fb47 	bl	8001120 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0af      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a55      	ldr	r2, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 809b 	beq.w	8002c02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d05c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d141      	bne.n	8002b64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fb1b 	bl	8001120 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fb17 	bl	8001120 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e081      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b00:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	019b      	lsls	r3, r3, #6
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	061b      	lsls	r3, r3, #24
 8002b30:	4937      	ldr	r1, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe faf0 	bl	8001120 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe faec 	bl	8001120 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e056      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x41c>
 8002b62:	e04e      	b.n	8002c02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fad9 	bl	8001120 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe fad5 	bl	8001120 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e03f      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x44a>
 8002b90:	e037      	b.n	8002c02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e032      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d028      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d11a      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470060 	.word	0x42470060

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90c      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d044      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e067      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4934      	ldr	r1, [pc, #208]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fa0a 	bl	8001120 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fa06 	bl	8001120 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d20c      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f96a 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08004a0c 	.word	0x08004a0c
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	2300      	movs	r3, #0
 8002df6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfc:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x40>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f200 80bd 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e16:	e0b7      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e1a:	60bb      	str	r3, [r7, #8]
       break;
 8002e1c:	e0b7      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e0b4      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b5d      	ldr	r3, [pc, #372]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04d      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	461a      	mov	r2, r3
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	ea02 0800 	and.w	r8, r2, r0
 8002e52:	ea03 0901 	and.w	r9, r3, r1
 8002e56:	4640      	mov	r0, r8
 8002e58:	4649      	mov	r1, r9
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	014b      	lsls	r3, r1, #5
 8002e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e68:	0142      	lsls	r2, r0, #5
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	ebb0 0008 	subs.w	r0, r0, r8
 8002e72:	eb61 0109 	sbc.w	r1, r1, r9
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e84:	0182      	lsls	r2, r0, #6
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8c:	f04f 0000 	mov.w	r0, #0
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	00d9      	lsls	r1, r3, #3
 8002e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e9a:	00d0      	lsls	r0, r2, #3
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	eb12 0208 	adds.w	r2, r2, r8
 8002ea4:	eb43 0309 	adc.w	r3, r3, r9
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	0259      	lsls	r1, r3, #9
 8002eb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eb6:	0250      	lsls	r0, r2, #9
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f7fd f990 	bl	80001ec <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e04a      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	461a      	mov	r2, r3
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	ea02 0400 	and.w	r4, r2, r0
 8002eee:	ea03 0501 	and.w	r5, r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	014b      	lsls	r3, r1, #5
 8002f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f04:	0142      	lsls	r2, r0, #5
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	1b00      	subs	r0, r0, r4
 8002f0c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	018b      	lsls	r3, r1, #6
 8002f1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f1e:	0182      	lsls	r2, r0, #6
 8002f20:	1a12      	subs	r2, r2, r0
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	00d9      	lsls	r1, r3, #3
 8002f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f34:	00d0      	lsls	r0, r2, #3
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	1912      	adds	r2, r2, r4
 8002f3c:	eb45 0303 	adc.w	r3, r5, r3
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	0299      	lsls	r1, r3, #10
 8002f4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f4e:	0290      	lsls	r0, r2, #10
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f7fd f944 	bl	80001ec <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	3301      	adds	r3, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	60bb      	str	r3, [r7, #8]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f8a:	60bb      	str	r3, [r7, #8]
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	007a1200 	.word	0x007a1200

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0a9b      	lsrs	r3, r3, #10
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08004a1c 	.word	0x08004a1c

08002fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07b      	b.n	80030f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800300a:	d009      	beq.n	8003020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
 8003012:	e005      	b.n	8003020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd ff5c 	bl	8000ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	ea42 0103 	orr.w	r1, r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0104 	and.w	r1, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	f003 0210 	and.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b088      	sub	sp, #32
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_SPI_Transmit+0x22>
 8003118:	2302      	movs	r3, #2
 800311a:	e126      	b.n	800336a <HAL_SPI_Transmit+0x270>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003124:	f7fd fffc 	bl	8001120 <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d002      	beq.n	8003140 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800313e:	e10b      	b.n	8003358 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Transmit+0x52>
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003150:	e102      	b.n	8003358 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2203      	movs	r2, #3
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	d10f      	bne.n	80031ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d007      	beq.n	80031d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e0:	d14b      	bne.n	800327a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_SPI_Transmit+0xf6>
 80031ea:	8afb      	ldrh	r3, [r7, #22]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d13e      	bne.n	800326e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003214:	e02b      	b.n	800326e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d112      	bne.n	800324a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	86da      	strh	r2, [r3, #54]	; 0x36
 8003248:	e011      	b.n	800326e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800324a:	f7fd ff69 	bl	8001120 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d803      	bhi.n	8003262 <HAL_SPI_Transmit+0x168>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d102      	bne.n	8003268 <HAL_SPI_Transmit+0x16e>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800326c:	e074      	b.n	8003358 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ce      	bne.n	8003216 <HAL_SPI_Transmit+0x11c>
 8003278:	e04c      	b.n	8003314 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_SPI_Transmit+0x18e>
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d140      	bne.n	800330a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032ae:	e02c      	b.n	800330a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d113      	bne.n	80032e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80032e4:	e011      	b.n	800330a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e6:	f7fd ff1b 	bl	8001120 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d803      	bhi.n	80032fe <HAL_SPI_Transmit+0x204>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d102      	bne.n	8003304 <HAL_SPI_Transmit+0x20a>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003308:	e026      	b.n	8003358 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1cd      	bne.n	80032b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f8b3 	bl	8003484 <SPI_EndRxTxTransaction>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e000      	b.n	8003358 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003368:	7ffb      	ldrb	r3, [r7, #31]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003384:	f7fd fecc 	bl	8001120 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003394:	f7fd fec4 	bl	8001120 <HAL_GetTick>
 8003398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800339a:	4b39      	ldr	r3, [pc, #228]	; (8003480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	015b      	lsls	r3, r3, #5
 80033a0:	0d1b      	lsrs	r3, r3, #20
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033aa:	e054      	b.n	8003456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d050      	beq.n	8003456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033b4:	f7fd feb4 	bl	8001120 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d902      	bls.n	80033ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d13d      	bne.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033e2:	d111      	bne.n	8003408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ec:	d004      	beq.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d107      	bne.n	8003408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d10f      	bne.n	8003432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e017      	b.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3b01      	subs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d19b      	bne.n	80033ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000000 	.word	0x20000000

08003484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <SPI_EndRxTxTransaction+0x7c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <SPI_EndRxTxTransaction+0x80>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0d5b      	lsrs	r3, r3, #21
 800349c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d112      	bne.n	80034d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff ff5a 	bl	8003374 <SPI_WaitFlagStateUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e00f      	b.n	80034f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3b01      	subs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d0f2      	beq.n	80034d6 <SPI_EndRxTxTransaction+0x52>
 80034f0:	e000      	b.n	80034f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80034f2:	bf00      	nop
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000
 8003504:	165e9f81 	.word	0x165e9f81

08003508 <AMG8833_init>:
#include "AMG8833.h"


void AMG8833_init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
	AMG8833_write_byte(AMG8833_POWER_CONTROL_REG, AMG8833_NORMAL_MODE);
 800350c:	2100      	movs	r1, #0
 800350e:	2000      	movs	r0, #0
 8003510:	f000 f824 	bl	800355c <AMG8833_write_byte>
	HAL_Delay(60);
 8003514:	203c      	movs	r0, #60	; 0x3c
 8003516:	f7fd fe0f 	bl	8001138 <HAL_Delay>

	AMG8833_set_upper_interrupt_limit(0x0080);
 800351a:	2080      	movs	r0, #128	; 0x80
 800351c:	f000 f864 	bl	80035e8 <AMG8833_set_upper_interrupt_limit>
	AMG8833_set_lower_interrupt_limit(0x0010);
 8003520:	2010      	movs	r0, #16
 8003522:	f000 f878 	bl	8003616 <AMG8833_set_lower_interrupt_limit>
	AMG8833_set_interrupt_hystersis_level(0x0080);
 8003526:	2080      	movs	r0, #128	; 0x80
 8003528:	f000 f88c 	bl	8003644 <AMG8833_set_interrupt_hystersis_level>

	AMG8833_write_byte(AMG8833_FRAME_RATE_REG, 10);
 800352c:	210a      	movs	r1, #10
 800352e:	2002      	movs	r0, #2
 8003530:	f000 f814 	bl	800355c <AMG8833_write_byte>

	AMG8833_write_byte(AMG8833_INTERRUPT_CONTROL_REG, (AMG8833_INT_ACTIVE | AMG8833_INT_ABS_VALUE_INT_MODE));
 8003534:	2103      	movs	r1, #3
 8003536:	2003      	movs	r0, #3
 8003538:	f000 f810 	bl	800355c <AMG8833_write_byte>
	HAL_Delay(30);
 800353c:	201e      	movs	r0, #30
 800353e:	f7fd fdfb 	bl	8001138 <HAL_Delay>

	AMG8833_write_byte(AMG8833_STATUS_CLEAR_REG, AMG8833_CLEAR_ALL_STATUS);
 8003542:	210e      	movs	r1, #14
 8003544:	2005      	movs	r0, #5
 8003546:	f000 f809 	bl	800355c <AMG8833_write_byte>
	AMG8833_write_byte(AMG8833_RESET_REG, AMG8833_INIT_RESET_VALUE);
 800354a:	213f      	movs	r1, #63	; 0x3f
 800354c:	2001      	movs	r0, #1
 800354e:	f000 f805 	bl	800355c <AMG8833_write_byte>
	HAL_Delay(100);
 8003552:	2064      	movs	r0, #100	; 0x64
 8003554:	f7fd fdf0 	bl	8001138 <HAL_Delay>
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <AMG8833_write_byte>:


void AMG8833_write_byte(uint8_t address, uint8_t value)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	4603      	mov	r3, r0
 8003564:	460a      	mov	r2, r1
 8003566:	71fb      	strb	r3, [r7, #7]
 8003568:	4613      	mov	r3, r2
 800356a:	71bb      	strb	r3, [r7, #6]
	uint8_t wr_buffer[2] = {0x00, 0x00};
 800356c:	2300      	movs	r3, #0
 800356e:	81bb      	strh	r3, [r7, #12]

    wr_buffer[0] = address;
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	733b      	strb	r3, [r7, #12]
	wr_buffer[1] = value;
 8003574:	79bb      	ldrb	r3, [r7, #6]
 8003576:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c2, AMG8833_I2C_ADDR, wr_buffer, 2, 1000);
 8003578:	f107 020c 	add.w	r2, r7, #12
 800357c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2302      	movs	r3, #2
 8003584:	21d0      	movs	r1, #208	; 0xd0
 8003586:	4803      	ldr	r0, [pc, #12]	; (8003594 <AMG8833_write_byte+0x38>)
 8003588:	f7fe fa02 	bl	8001990 <HAL_I2C_Master_Transmit>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000080 	.word	0x20000080

08003598 <AMG8833_read_byte>:
	HAL_I2C_Master_Transmit(&hi2c2, AMG8833_I2C_ADDR, wr_buffer, 3, 1000);
}


uint8_t AMG8833_read_byte(uint8_t address)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_buffer[1] = {0x00};
 80035a2:	2300      	movs	r3, #0
 80035a4:	733b      	strb	r3, [r7, #12]
    uint8_t retval = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]

    data_buffer[0] = address;
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	733b      	strb	r3, [r7, #12]


	HAL_I2C_Master_Transmit(&hi2c2, AMG8833_I2C_ADDR, data_buffer, 1, 1000);
 80035ae:	f107 020c 	add.w	r2, r7, #12
 80035b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2301      	movs	r3, #1
 80035ba:	21d0      	movs	r1, #208	; 0xd0
 80035bc:	4809      	ldr	r0, [pc, #36]	; (80035e4 <AMG8833_read_byte+0x4c>)
 80035be:	f7fe f9e7 	bl	8001990 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, AMG8833_I2C_ADDR, data_buffer, 1, 1000);
 80035c2:	f107 020c 	add.w	r2, r7, #12
 80035c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2301      	movs	r3, #1
 80035ce:	21d0      	movs	r1, #208	; 0xd0
 80035d0:	4804      	ldr	r0, [pc, #16]	; (80035e4 <AMG8833_read_byte+0x4c>)
 80035d2:	f7fe fadb 	bl	8001b8c <HAL_I2C_Master_Receive>

	retval = data_buffer[0];
 80035d6:	7b3b      	ldrb	r3, [r7, #12]
 80035d8:	73fb      	strb	r3, [r7, #15]

	return retval;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000080 	.word	0x20000080

080035e8 <AMG8833_set_upper_interrupt_limit>:
	return retval;
}


void AMG8833_set_upper_interrupt_limit(uint16_t value)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
	AMG8833_write_byte(AMG8833_INT_LEVEL_REG_HL, ((uint8_t)(value & 0x00FF)));
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	2008      	movs	r0, #8
 80035fa:	f7ff ffaf 	bl	800355c <AMG8833_write_byte>
	AMG8833_write_byte(AMG8833_INT_LEVEL_REG_HH, ((uint8_t)(value >> 8)));
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	b29b      	uxth	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	2009      	movs	r0, #9
 800360a:	f7ff ffa7 	bl	800355c <AMG8833_write_byte>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <AMG8833_set_lower_interrupt_limit>:


void AMG8833_set_lower_interrupt_limit(uint16_t value)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	80fb      	strh	r3, [r7, #6]
	AMG8833_write_byte(AMG8833_INT_LEVEL_REG_LL, ((uint8_t)(value & 0x00FF)));
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	200a      	movs	r0, #10
 8003628:	f7ff ff98 	bl	800355c <AMG8833_write_byte>
	AMG8833_write_byte(AMG8833_INT_LEVEL_REG_LH, ((uint8_t)(value >> 8)));
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	200b      	movs	r0, #11
 8003638:	f7ff ff90 	bl	800355c <AMG8833_write_byte>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <AMG8833_set_interrupt_hystersis_level>:


void AMG8833_set_interrupt_hystersis_level(uint16_t value)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
	AMG8833_write_byte(AMG8833_INT_LEVEL_REG_YSL, ((uint8_t)(value & 0x00FF)));
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	200c      	movs	r0, #12
 8003656:	f7ff ff81 	bl	800355c <AMG8833_write_byte>
	AMG8833_write_byte(AMG8833_INT_LEVEL_REG_YSH, ((uint8_t)(value >> 8)));
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	b29b      	uxth	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	200d      	movs	r0, #13
 8003666:	f7ff ff79 	bl	800355c <AMG8833_write_byte>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <AMG8833_get_temperature>:
	}
}


float AMG8833_get_temperature(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	uint8_t LB = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	717b      	strb	r3, [r7, #5]
	uint8_t HB = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	713b      	strb	r3, [r7, #4]
	int16_t value = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	80fb      	strh	r3, [r7, #6]
	float retval = 0;
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	603b      	str	r3, [r7, #0]

	LB = AMG8833_read_byte(AMG8833_THERMISTOR_REG_L);
 800368c:	200e      	movs	r0, #14
 800368e:	f7ff ff83 	bl	8003598 <AMG8833_read_byte>
 8003692:	4603      	mov	r3, r0
 8003694:	717b      	strb	r3, [r7, #5]
	HB = AMG8833_read_byte(AMG8833_THERMISTOR_REG_H);
 8003696:	200f      	movs	r0, #15
 8003698:	f7ff ff7e 	bl	8003598 <AMG8833_read_byte>
 800369c:	4603      	mov	r3, r0
 800369e:	713b      	strb	r3, [r7, #4]

	value = HB;
 80036a0:	793b      	ldrb	r3, [r7, #4]
 80036a2:	80fb      	strh	r3, [r7, #6]
	value <<= 8;
 80036a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	80fb      	strh	r3, [r7, #6]
	value |= LB;
 80036ac:	797b      	ldrb	r3, [r7, #5]
 80036ae:	b21a      	sxth	r2, r3
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]

	value = (value & 0x07FF);
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036bc:	80fb      	strh	r3, [r7, #6]

	if(value & 0x0800)
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <AMG8833_get_temperature+0x5c>
	{
		value = -value;
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	425b      	negs	r3, r3
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	80fb      	strh	r3, [r7, #6]
	}

	retval = value;
 80036d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036dc:	edc7 7a00 	vstr	s15, [r7]
	retval *= 0.0625;
 80036e0:	edd7 7a00 	vldr	s15, [r7]
 80036e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003700 <AMG8833_get_temperature+0x8c>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	edc7 7a00 	vstr	s15, [r7]

	return retval;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	ee07 3a90 	vmov	s15, r3
}
 80036f6:	eeb0 0a67 	vmov.f32	s0, s15
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	3d800000 	.word	0x3d800000

08003704 <AMG8833_read_pixel_temperature_register_value>:


void AMG8833_read_pixel_temperature_register_value(int16_t *value)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
	uint8_t LB = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	73bb      	strb	r3, [r7, #14]
	uint8_t HB = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	737b      	strb	r3, [r7, #13]
	uint16_t retval = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	817b      	strh	r3, [r7, #10]

	for(i = 0; i < AMG8833_PIXEL_COUNT; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e029      	b.n	8003776 <AMG8833_read_pixel_temperature_register_value+0x72>
	{
		LB = AMG8833_read_byte((i * 2) + AMG8833_TEMPERATURE_REG_L);
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	3340      	adds	r3, #64	; 0x40
 8003726:	b2db      	uxtb	r3, r3
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff33 	bl	8003598 <AMG8833_read_byte>
 8003732:	4603      	mov	r3, r0
 8003734:	73bb      	strb	r3, [r7, #14]
		HB = AMG8833_read_byte((i * 2) + AMG8833_TEMPERATURE_REG_H);
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3b7f      	subs	r3, #127	; 0x7f
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff29 	bl	8003598 <AMG8833_read_byte>
 8003746:	4603      	mov	r3, r0
 8003748:	737b      	strb	r3, [r7, #13]

		retval = HB;
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	817b      	strh	r3, [r7, #10]
		retval <<= 8;
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	817b      	strh	r3, [r7, #10]
		retval |= LB;
 8003754:	7bbb      	ldrb	r3, [r7, #14]
 8003756:	b29a      	uxth	r2, r3
 8003758:	897b      	ldrh	r3, [r7, #10]
 800375a:	4313      	orrs	r3, r2
 800375c:	817b      	strh	r3, [r7, #10]

		value[i] = retval >> 2;
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	b299      	uxth	r1, r3
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	b20a      	sxth	r2, r1
 800376e:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < AMG8833_PIXEL_COUNT; i++)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	3301      	adds	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b3f      	cmp	r3, #63	; 0x3f
 800377a:	d9d2      	bls.n	8003722 <AMG8833_read_pixel_temperature_register_value+0x1e>
	}
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <TFT_init>:
#include "ILI9341.h"


void TFT_init()
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	MAX_X = X_max;
 800378c:	4bc5      	ldr	r3, [pc, #788]	; (8003aa4 <TFT_init+0x31c>)
 800378e:	22f0      	movs	r2, #240	; 0xf0
 8003790:	801a      	strh	r2, [r3, #0]
	MAX_Y = Y_max;
 8003792:	4bc5      	ldr	r3, [pc, #788]	; (8003aa8 <TFT_init+0x320>)
 8003794:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003798:	801a      	strh	r2, [r3, #0]

	TFT_reset();
 800379a:	f000 f987 	bl	8003aac <TFT_reset>

    TFT_write(ILI9341_RESET, CMD);
 800379e:	2100      	movs	r1, #0
 80037a0:	2001      	movs	r0, #1
 80037a2:	f000 f999 	bl	8003ad8 <TFT_write>
    HAL_Delay(60);
 80037a6:	203c      	movs	r0, #60	; 0x3c
 80037a8:	f7fd fcc6 	bl	8001138 <HAL_Delay>

    TFT_write(ILI9341_POWERA, CMD);
 80037ac:	2100      	movs	r1, #0
 80037ae:	20cb      	movs	r0, #203	; 0xcb
 80037b0:	f000 f992 	bl	8003ad8 <TFT_write>
    TFT_write(0x39, DAT);
 80037b4:	2101      	movs	r1, #1
 80037b6:	2039      	movs	r0, #57	; 0x39
 80037b8:	f000 f98e 	bl	8003ad8 <TFT_write>
    TFT_write(0x2C, DAT);
 80037bc:	2101      	movs	r1, #1
 80037be:	202c      	movs	r0, #44	; 0x2c
 80037c0:	f000 f98a 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 80037c4:	2101      	movs	r1, #1
 80037c6:	2000      	movs	r0, #0
 80037c8:	f000 f986 	bl	8003ad8 <TFT_write>
    TFT_write(0x34, DAT);
 80037cc:	2101      	movs	r1, #1
 80037ce:	2034      	movs	r0, #52	; 0x34
 80037d0:	f000 f982 	bl	8003ad8 <TFT_write>
    TFT_write(0x02, DAT);
 80037d4:	2101      	movs	r1, #1
 80037d6:	2002      	movs	r0, #2
 80037d8:	f000 f97e 	bl	8003ad8 <TFT_write>
    
    TFT_write(ILI9341_POWERB, CMD);
 80037dc:	2100      	movs	r1, #0
 80037de:	20cf      	movs	r0, #207	; 0xcf
 80037e0:	f000 f97a 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 80037e4:	2101      	movs	r1, #1
 80037e6:	2000      	movs	r0, #0
 80037e8:	f000 f976 	bl	8003ad8 <TFT_write>
    TFT_write(0xC1, DAT);
 80037ec:	2101      	movs	r1, #1
 80037ee:	20c1      	movs	r0, #193	; 0xc1
 80037f0:	f000 f972 	bl	8003ad8 <TFT_write>
    TFT_write(0x30, DAT);
 80037f4:	2101      	movs	r1, #1
 80037f6:	2030      	movs	r0, #48	; 0x30
 80037f8:	f000 f96e 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_DTCA, CMD);
 80037fc:	2100      	movs	r1, #0
 80037fe:	20e8      	movs	r0, #232	; 0xe8
 8003800:	f000 f96a 	bl	8003ad8 <TFT_write>
    TFT_write(0x85, DAT);
 8003804:	2101      	movs	r1, #1
 8003806:	2085      	movs	r0, #133	; 0x85
 8003808:	f000 f966 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 800380c:	2101      	movs	r1, #1
 800380e:	2000      	movs	r0, #0
 8003810:	f000 f962 	bl	8003ad8 <TFT_write>
    TFT_write(0x78, DAT);
 8003814:	2101      	movs	r1, #1
 8003816:	2078      	movs	r0, #120	; 0x78
 8003818:	f000 f95e 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_DTCB, CMD);
 800381c:	2100      	movs	r1, #0
 800381e:	20ea      	movs	r0, #234	; 0xea
 8003820:	f000 f95a 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 8003824:	2101      	movs	r1, #1
 8003826:	2000      	movs	r0, #0
 8003828:	f000 f956 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 800382c:	2101      	movs	r1, #1
 800382e:	2000      	movs	r0, #0
 8003830:	f000 f952 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_POWER_SEQ, CMD);
 8003834:	2100      	movs	r1, #0
 8003836:	20ed      	movs	r0, #237	; 0xed
 8003838:	f000 f94e 	bl	8003ad8 <TFT_write>
    TFT_write(0x64, DAT);
 800383c:	2101      	movs	r1, #1
 800383e:	2064      	movs	r0, #100	; 0x64
 8003840:	f000 f94a 	bl	8003ad8 <TFT_write>
    TFT_write(0x03, DAT);
 8003844:	2101      	movs	r1, #1
 8003846:	2003      	movs	r0, #3
 8003848:	f000 f946 	bl	8003ad8 <TFT_write>
    TFT_write(0x12, DAT);
 800384c:	2101      	movs	r1, #1
 800384e:	2012      	movs	r0, #18
 8003850:	f000 f942 	bl	8003ad8 <TFT_write>
    TFT_write(0x81, DAT);
 8003854:	2101      	movs	r1, #1
 8003856:	2081      	movs	r0, #129	; 0x81
 8003858:	f000 f93e 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_PRC, CMD);
 800385c:	2100      	movs	r1, #0
 800385e:	20f7      	movs	r0, #247	; 0xf7
 8003860:	f000 f93a 	bl	8003ad8 <TFT_write>
    TFT_write(0x20, DAT);
 8003864:	2101      	movs	r1, #1
 8003866:	2020      	movs	r0, #32
 8003868:	f000 f936 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_POWER1, CMD);
 800386c:	2100      	movs	r1, #0
 800386e:	20c0      	movs	r0, #192	; 0xc0
 8003870:	f000 f932 	bl	8003ad8 <TFT_write>
    TFT_write(0x23, DAT);
 8003874:	2101      	movs	r1, #1
 8003876:	2023      	movs	r0, #35	; 0x23
 8003878:	f000 f92e 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_POWER2, CMD);
 800387c:	2100      	movs	r1, #0
 800387e:	20c1      	movs	r0, #193	; 0xc1
 8003880:	f000 f92a 	bl	8003ad8 <TFT_write>
    TFT_write(0x10, DAT);
 8003884:	2101      	movs	r1, #1
 8003886:	2010      	movs	r0, #16
 8003888:	f000 f926 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_VCOM1, CMD);
 800388c:	2100      	movs	r1, #0
 800388e:	20c5      	movs	r0, #197	; 0xc5
 8003890:	f000 f922 	bl	8003ad8 <TFT_write>
    TFT_write(0x3E, DAT);
 8003894:	2101      	movs	r1, #1
 8003896:	203e      	movs	r0, #62	; 0x3e
 8003898:	f000 f91e 	bl	8003ad8 <TFT_write>
    TFT_write(0x28, DAT);
 800389c:	2101      	movs	r1, #1
 800389e:	2028      	movs	r0, #40	; 0x28
 80038a0:	f000 f91a 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_VCOM2, CMD);
 80038a4:	2100      	movs	r1, #0
 80038a6:	20c7      	movs	r0, #199	; 0xc7
 80038a8:	f000 f916 	bl	8003ad8 <TFT_write>
    TFT_write(0x86, DAT);
 80038ac:	2101      	movs	r1, #1
 80038ae:	2086      	movs	r0, #134	; 0x86
 80038b0:	f000 f912 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_MAC, CMD);
 80038b4:	2100      	movs	r1, #0
 80038b6:	2036      	movs	r0, #54	; 0x36
 80038b8:	f000 f90e 	bl	8003ad8 <TFT_write>
    TFT_write(0x48, DAT);
 80038bc:	2101      	movs	r1, #1
 80038be:	2048      	movs	r0, #72	; 0x48
 80038c0:	f000 f90a 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_PIXEL_FORMAT, CMD);
 80038c4:	2100      	movs	r1, #0
 80038c6:	203a      	movs	r0, #58	; 0x3a
 80038c8:	f000 f906 	bl	8003ad8 <TFT_write>
    TFT_write(0x55, DAT);
 80038cc:	2101      	movs	r1, #1
 80038ce:	2055      	movs	r0, #85	; 0x55
 80038d0:	f000 f902 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_FRC, CMD);
 80038d4:	2100      	movs	r1, #0
 80038d6:	20b1      	movs	r0, #177	; 0xb1
 80038d8:	f000 f8fe 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 80038dc:	2101      	movs	r1, #1
 80038de:	2000      	movs	r0, #0
 80038e0:	f000 f8fa 	bl	8003ad8 <TFT_write>
    TFT_write(0x18, DAT);
 80038e4:	2101      	movs	r1, #1
 80038e6:	2018      	movs	r0, #24
 80038e8:	f000 f8f6 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_DFC, CMD);
 80038ec:	2100      	movs	r1, #0
 80038ee:	20b6      	movs	r0, #182	; 0xb6
 80038f0:	f000 f8f2 	bl	8003ad8 <TFT_write>
    TFT_write(0x08, DAT);
 80038f4:	2101      	movs	r1, #1
 80038f6:	2008      	movs	r0, #8
 80038f8:	f000 f8ee 	bl	8003ad8 <TFT_write>
    TFT_write(0x82, DAT);
 80038fc:	2101      	movs	r1, #1
 80038fe:	2082      	movs	r0, #130	; 0x82
 8003900:	f000 f8ea 	bl	8003ad8 <TFT_write>
    TFT_write(0x27, DAT);
 8003904:	2101      	movs	r1, #1
 8003906:	2027      	movs	r0, #39	; 0x27
 8003908:	f000 f8e6 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_3GAMMA_EN, CMD);
 800390c:	2100      	movs	r1, #0
 800390e:	20f2      	movs	r0, #242	; 0xf2
 8003910:	f000 f8e2 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 8003914:	2101      	movs	r1, #1
 8003916:	2000      	movs	r0, #0
 8003918:	f000 f8de 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_COLUMN_ADDR, CMD);
 800391c:	2100      	movs	r1, #0
 800391e:	202a      	movs	r0, #42	; 0x2a
 8003920:	f000 f8da 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 8003924:	2101      	movs	r1, #1
 8003926:	2000      	movs	r0, #0
 8003928:	f000 f8d6 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 800392c:	2101      	movs	r1, #1
 800392e:	2000      	movs	r0, #0
 8003930:	f000 f8d2 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 8003934:	2101      	movs	r1, #1
 8003936:	2000      	movs	r0, #0
 8003938:	f000 f8ce 	bl	8003ad8 <TFT_write>
    TFT_write(0xEF, DAT);
 800393c:	2101      	movs	r1, #1
 800393e:	20ef      	movs	r0, #239	; 0xef
 8003940:	f000 f8ca 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_PAGE_ADDR, CMD);
 8003944:	2100      	movs	r1, #0
 8003946:	202b      	movs	r0, #43	; 0x2b
 8003948:	f000 f8c6 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 800394c:	2101      	movs	r1, #1
 800394e:	2000      	movs	r0, #0
 8003950:	f000 f8c2 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 8003954:	2101      	movs	r1, #1
 8003956:	2000      	movs	r0, #0
 8003958:	f000 f8be 	bl	8003ad8 <TFT_write>
    TFT_write(0x01, DAT);
 800395c:	2101      	movs	r1, #1
 800395e:	2001      	movs	r0, #1
 8003960:	f000 f8ba 	bl	8003ad8 <TFT_write>
    TFT_write(0x3F, DAT);
 8003964:	2101      	movs	r1, #1
 8003966:	203f      	movs	r0, #63	; 0x3f
 8003968:	f000 f8b6 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_GAMMA, CMD);
 800396c:	2100      	movs	r1, #0
 800396e:	2026      	movs	r0, #38	; 0x26
 8003970:	f000 f8b2 	bl	8003ad8 <TFT_write>
    TFT_write(0x01, DAT);
 8003974:	2101      	movs	r1, #1
 8003976:	2001      	movs	r0, #1
 8003978:	f000 f8ae 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_PGAMMA, CMD);
 800397c:	2100      	movs	r1, #0
 800397e:	20e0      	movs	r0, #224	; 0xe0
 8003980:	f000 f8aa 	bl	8003ad8 <TFT_write>
    TFT_write(0x0F, DAT);
 8003984:	2101      	movs	r1, #1
 8003986:	200f      	movs	r0, #15
 8003988:	f000 f8a6 	bl	8003ad8 <TFT_write>
    TFT_write(0x31, DAT);
 800398c:	2101      	movs	r1, #1
 800398e:	2031      	movs	r0, #49	; 0x31
 8003990:	f000 f8a2 	bl	8003ad8 <TFT_write>
    TFT_write(0x2B, DAT);
 8003994:	2101      	movs	r1, #1
 8003996:	202b      	movs	r0, #43	; 0x2b
 8003998:	f000 f89e 	bl	8003ad8 <TFT_write>
    TFT_write(0x0C, DAT);
 800399c:	2101      	movs	r1, #1
 800399e:	200c      	movs	r0, #12
 80039a0:	f000 f89a 	bl	8003ad8 <TFT_write>
    TFT_write(0x0E, DAT);
 80039a4:	2101      	movs	r1, #1
 80039a6:	200e      	movs	r0, #14
 80039a8:	f000 f896 	bl	8003ad8 <TFT_write>
    TFT_write(0x08, DAT);
 80039ac:	2101      	movs	r1, #1
 80039ae:	2008      	movs	r0, #8
 80039b0:	f000 f892 	bl	8003ad8 <TFT_write>
    TFT_write(0x4E, DAT);
 80039b4:	2101      	movs	r1, #1
 80039b6:	204e      	movs	r0, #78	; 0x4e
 80039b8:	f000 f88e 	bl	8003ad8 <TFT_write>
    TFT_write(0xF1, DAT);
 80039bc:	2101      	movs	r1, #1
 80039be:	20f1      	movs	r0, #241	; 0xf1
 80039c0:	f000 f88a 	bl	8003ad8 <TFT_write>
    TFT_write(0x37, DAT);
 80039c4:	2101      	movs	r1, #1
 80039c6:	2037      	movs	r0, #55	; 0x37
 80039c8:	f000 f886 	bl	8003ad8 <TFT_write>
    TFT_write(0x07, DAT);
 80039cc:	2101      	movs	r1, #1
 80039ce:	2007      	movs	r0, #7
 80039d0:	f000 f882 	bl	8003ad8 <TFT_write>
    TFT_write(0x10, DAT);
 80039d4:	2101      	movs	r1, #1
 80039d6:	2010      	movs	r0, #16
 80039d8:	f000 f87e 	bl	8003ad8 <TFT_write>
    TFT_write(0x03, DAT);
 80039dc:	2101      	movs	r1, #1
 80039de:	2003      	movs	r0, #3
 80039e0:	f000 f87a 	bl	8003ad8 <TFT_write>
    TFT_write(0x0E, DAT);
 80039e4:	2101      	movs	r1, #1
 80039e6:	200e      	movs	r0, #14
 80039e8:	f000 f876 	bl	8003ad8 <TFT_write>
    TFT_write(0x09, DAT);
 80039ec:	2101      	movs	r1, #1
 80039ee:	2009      	movs	r0, #9
 80039f0:	f000 f872 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 80039f4:	2101      	movs	r1, #1
 80039f6:	2000      	movs	r0, #0
 80039f8:	f000 f86e 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_NGAMMA, CMD);
 80039fc:	2100      	movs	r1, #0
 80039fe:	20e1      	movs	r0, #225	; 0xe1
 8003a00:	f000 f86a 	bl	8003ad8 <TFT_write>
    TFT_write(0x00, DAT);
 8003a04:	2101      	movs	r1, #1
 8003a06:	2000      	movs	r0, #0
 8003a08:	f000 f866 	bl	8003ad8 <TFT_write>
    TFT_write(0x0E, DAT);
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	200e      	movs	r0, #14
 8003a10:	f000 f862 	bl	8003ad8 <TFT_write>
    TFT_write(0x14, DAT);
 8003a14:	2101      	movs	r1, #1
 8003a16:	2014      	movs	r0, #20
 8003a18:	f000 f85e 	bl	8003ad8 <TFT_write>
    TFT_write(0x03, DAT);
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2003      	movs	r0, #3
 8003a20:	f000 f85a 	bl	8003ad8 <TFT_write>
    TFT_write(0x11, DAT);
 8003a24:	2101      	movs	r1, #1
 8003a26:	2011      	movs	r0, #17
 8003a28:	f000 f856 	bl	8003ad8 <TFT_write>
    TFT_write(0x07, DAT);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	2007      	movs	r0, #7
 8003a30:	f000 f852 	bl	8003ad8 <TFT_write>
    TFT_write(0x31, DAT);
 8003a34:	2101      	movs	r1, #1
 8003a36:	2031      	movs	r0, #49	; 0x31
 8003a38:	f000 f84e 	bl	8003ad8 <TFT_write>
    TFT_write(0xC1, DAT);
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	20c1      	movs	r0, #193	; 0xc1
 8003a40:	f000 f84a 	bl	8003ad8 <TFT_write>
    TFT_write(0x48, DAT);
 8003a44:	2101      	movs	r1, #1
 8003a46:	2048      	movs	r0, #72	; 0x48
 8003a48:	f000 f846 	bl	8003ad8 <TFT_write>
    TFT_write(0x08, DAT);
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	2008      	movs	r0, #8
 8003a50:	f000 f842 	bl	8003ad8 <TFT_write>
    TFT_write(0x0F, DAT);
 8003a54:	2101      	movs	r1, #1
 8003a56:	200f      	movs	r0, #15
 8003a58:	f000 f83e 	bl	8003ad8 <TFT_write>
    TFT_write(0x0C, DAT);
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	200c      	movs	r0, #12
 8003a60:	f000 f83a 	bl	8003ad8 <TFT_write>
    TFT_write(0x31, DAT);
 8003a64:	2101      	movs	r1, #1
 8003a66:	2031      	movs	r0, #49	; 0x31
 8003a68:	f000 f836 	bl	8003ad8 <TFT_write>
    TFT_write(0x36, DAT);
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	2036      	movs	r0, #54	; 0x36
 8003a70:	f000 f832 	bl	8003ad8 <TFT_write>
    TFT_write(0x0F, DAT);
 8003a74:	2101      	movs	r1, #1
 8003a76:	200f      	movs	r0, #15
 8003a78:	f000 f82e 	bl	8003ad8 <TFT_write>

    TFT_write(ILI9341_SLEEP_OUT, CMD);
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	2011      	movs	r0, #17
 8003a80:	f000 f82a 	bl	8003ad8 <TFT_write>
    HAL_Delay(100);
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	f7fd fb57 	bl	8001138 <HAL_Delay>

    TFT_on_off(ON);
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f000 f882 	bl	8003b94 <TFT_on_off>
    TFT_write(ILI9341_GRAM, CMD);
 8003a90:	2100      	movs	r1, #0
 8003a92:	202c      	movs	r0, #44	; 0x2c
 8003a94:	f000 f820 	bl	8003ad8 <TFT_write>
    
    TFT_set_rotation(LANDSCAPE_1);
 8003a98:	2003      	movs	r0, #3
 8003a9a:	f000 f893 	bl	8003bc4 <TFT_set_rotation>
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200000d6 	.word	0x200000d6
 8003aa8:	200000d4 	.word	0x200000d4

08003aac <TFT_reset>:


void TFT_reset()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, RESET);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ab6:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <TFT_reset+0x28>)
 8003ab8:	f7fd fe0c 	bl	80016d4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003abc:	2014      	movs	r0, #20
 8003abe:	f7fd fb3b 	bl	8001138 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, SET);
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <TFT_reset+0x28>)
 8003aca:	f7fd fe03 	bl	80016d4 <HAL_GPIO_WritePin>
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40020c00 	.word	0x40020c00

08003ad8 <TFT_write>:


void TFT_write(uint8_t value, uint8_t mode)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71bb      	strb	r3, [r7, #6]
    uint8_t val[1];

    val[0] = value;
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, mode);
 8003aec:	79bb      	ldrb	r3, [r7, #6]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af4:	480b      	ldr	r0, [pc, #44]	; (8003b24 <TFT_write+0x4c>)
 8003af6:	f7fd fded 	bl	80016d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2104      	movs	r1, #4
 8003afe:	480a      	ldr	r0, [pc, #40]	; (8003b28 <TFT_write+0x50>)
 8003b00:	f7fd fde8 	bl	80016d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, val, 1, 100);
 8003b04:	f107 010c 	add.w	r1, r7, #12
 8003b08:	2364      	movs	r3, #100	; 0x64
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4807      	ldr	r0, [pc, #28]	; (8003b2c <TFT_write+0x54>)
 8003b0e:	f7ff faf4 	bl	80030fa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, SET);
 8003b12:	2201      	movs	r2, #1
 8003b14:	2104      	movs	r1, #4
 8003b16:	4804      	ldr	r0, [pc, #16]	; (8003b28 <TFT_write+0x50>)
 8003b18:	f7fd fddc 	bl	80016d4 <HAL_GPIO_WritePin>
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	20000028 	.word	0x20000028

08003b30 <TFT_write_word>:


void TFT_write_word(uint16_t value, uint8_t mode)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	460a      	mov	r2, r1
 8003b3a:	80fb      	strh	r3, [r7, #6]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	717b      	strb	r3, [r7, #5]
    uint8_t tmp[2];

    tmp[1] = (value & 0x00FF);
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	737b      	strb	r3, [r7, #13]
    tmp[0] = (value >> 0x08);
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, mode);
 8003b50:	797b      	ldrb	r3, [r7, #5]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b58:	480b      	ldr	r0, [pc, #44]	; (8003b88 <TFT_write_word+0x58>)
 8003b5a:	f7fd fdbb 	bl	80016d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, RESET);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2104      	movs	r1, #4
 8003b62:	480a      	ldr	r0, [pc, #40]	; (8003b8c <TFT_write_word+0x5c>)
 8003b64:	f7fd fdb6 	bl	80016d4 <HAL_GPIO_WritePin>
    
    HAL_SPI_Transmit(&hspi5, tmp, 2, 100);
 8003b68:	f107 010c 	add.w	r1, r7, #12
 8003b6c:	2364      	movs	r3, #100	; 0x64
 8003b6e:	2202      	movs	r2, #2
 8003b70:	4807      	ldr	r0, [pc, #28]	; (8003b90 <TFT_write_word+0x60>)
 8003b72:	f7ff fac2 	bl	80030fa <HAL_SPI_Transmit>
    
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, SET);
 8003b76:	2201      	movs	r2, #1
 8003b78:	2104      	movs	r1, #4
 8003b7a:	4804      	ldr	r0, [pc, #16]	; (8003b8c <TFT_write_word+0x5c>)
 8003b7c:	f7fd fdaa 	bl	80016d4 <HAL_GPIO_WritePin>
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40020c00 	.word	0x40020c00
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	20000028 	.word	0x20000028

08003b94 <TFT_on_off>:


void TFT_on_off(uint8_t mode)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
    switch(mode)
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <TFT_on_off+0x1e>
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d109      	bne.n	8003bbc <TFT_on_off+0x28>
    {
        case ON:
        {
            TFT_write(ILI9341_DISPLAY_ON, CMD);
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2029      	movs	r0, #41	; 0x29
 8003bac:	f7ff ff94 	bl	8003ad8 <TFT_write>
            break;
 8003bb0:	e004      	b.n	8003bbc <TFT_on_off+0x28>
        }
        case OFF:
        {
            TFT_write(ILI9341_DISPLAY_OFF, CMD);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2028      	movs	r0, #40	; 0x28
 8003bb6:	f7ff ff8f 	bl	8003ad8 <TFT_write>
            break;
 8003bba:	bf00      	nop
        }
    }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <TFT_set_rotation>:


void TFT_set_rotation(uint8_t value)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
    TFT_write(ILI9341_MAC, CMD);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2036      	movs	r0, #54	; 0x36
 8003bd2:	f7ff ff81 	bl	8003ad8 <TFT_write>

    switch(value)
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d81e      	bhi.n	8003c1c <TFT_set_rotation+0x58>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <TFT_set_rotation+0x20>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003bff 	.word	0x08003bff
 8003bec:	08003c09 	.word	0x08003c09
 8003bf0:	08003c13 	.word	0x08003c13
    {
        case PORTRAIT_1:
        {
            TFT_write(0x58, DAT);
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	2058      	movs	r0, #88	; 0x58
 8003bf8:	f7ff ff6e 	bl	8003ad8 <TFT_write>
            break;
 8003bfc:	e00e      	b.n	8003c1c <TFT_set_rotation+0x58>
        }
        case PORTRAIT_2:
        {
            TFT_write(0x88, DAT);
 8003bfe:	2101      	movs	r1, #1
 8003c00:	2088      	movs	r0, #136	; 0x88
 8003c02:	f7ff ff69 	bl	8003ad8 <TFT_write>
            break;
 8003c06:	e009      	b.n	8003c1c <TFT_set_rotation+0x58>
        }
        case LANDSCAPE_1:
        {
            TFT_write(0x28, DAT);
 8003c08:	2101      	movs	r1, #1
 8003c0a:	2028      	movs	r0, #40	; 0x28
 8003c0c:	f7ff ff64 	bl	8003ad8 <TFT_write>
            break;
 8003c10:	e004      	b.n	8003c1c <TFT_set_rotation+0x58>
        }
        case LANDSCAPE_2:
        {
            TFT_write(0xE8, DAT);
 8003c12:	2101      	movs	r1, #1
 8003c14:	20e8      	movs	r0, #232	; 0xe8
 8003c16:	f7ff ff5f 	bl	8003ad8 <TFT_write>
            break;
 8003c1a:	bf00      	nop
        }
    }

    if((value == PORTRAIT_1) || (value == PORTRAIT_2))
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d002      	beq.n	8003c28 <TFT_set_rotation+0x64>
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d106      	bne.n	8003c36 <TFT_set_rotation+0x72>
    {
        MAX_X = X_max;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <TFT_set_rotation+0x94>)
 8003c2a:	22f0      	movs	r2, #240	; 0xf0
 8003c2c:	801a      	strh	r2, [r3, #0]
        MAX_Y = Y_max;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <TFT_set_rotation+0x98>)
 8003c30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c34:	801a      	strh	r2, [r3, #0]
    }

    if((value == LANDSCAPE_1) || (value == LANDSCAPE_2))
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d002      	beq.n	8003c42 <TFT_set_rotation+0x7e>
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d106      	bne.n	8003c50 <TFT_set_rotation+0x8c>
    {
        MAX_X = Y_max;
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <TFT_set_rotation+0x94>)
 8003c44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c48:	801a      	strh	r2, [r3, #0]
        MAX_Y = X_max;
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <TFT_set_rotation+0x98>)
 8003c4c:	22f0      	movs	r2, #240	; 0xf0
 8003c4e:	801a      	strh	r2, [r3, #0]
    }
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200000d6 	.word	0x200000d6
 8003c5c:	200000d4 	.word	0x200000d4

08003c60 <TFT_set_display_window>:


void TFT_set_display_window(uint16_t x_pos1, uint16_t y_pos1, uint16_t x_pos2, uint16_t y_pos2)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	80fb      	strh	r3, [r7, #6]
 8003c72:	4603      	mov	r3, r0
 8003c74:	80bb      	strh	r3, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	807b      	strh	r3, [r7, #2]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	803b      	strh	r3, [r7, #0]
    TFT_write(ILI9341_COLUMN_ADDR, CMD);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	202a      	movs	r0, #42	; 0x2a
 8003c82:	f7ff ff29 	bl	8003ad8 <TFT_write>
    TFT_write_word(x_pos1, DAT);
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff50 	bl	8003b30 <TFT_write_word>
    TFT_write_word(x_pos2, DAT);
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff4b 	bl	8003b30 <TFT_write_word>

    TFT_write(ILI9341_PAGE_ADDR, CMD);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	202b      	movs	r0, #43	; 0x2b
 8003c9e:	f7ff ff1b 	bl	8003ad8 <TFT_write>
    TFT_write_word(y_pos1, DAT);
 8003ca2:	88bb      	ldrh	r3, [r7, #4]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff42 	bl	8003b30 <TFT_write_word>
    TFT_write_word(y_pos2, DAT);
 8003cac:	883b      	ldrh	r3, [r7, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff3d 	bl	8003b30 <TFT_write_word>
    
    TFT_write(ILI9341_GRAM, CMD);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	202c      	movs	r0, #44	; 0x2c
 8003cba:	f7ff ff0d 	bl	8003ad8 <TFT_write>
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}
	...

08003cc8 <TFT_fill>:


void TFT_fill(uint16_t colour)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
    unsigned long index = pixels;
 8003cd2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003cd6:	60fb      	str	r3, [r7, #12]
    
    TFT_set_display_window(0, 0, (MAX_X - 1), (MAX_Y - 1));
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <TFT_fill+0x4c>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <TFT_fill+0x50>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2000      	movs	r0, #0
 8003cec:	f7ff ffb8 	bl	8003c60 <TFT_set_display_window>

    while(index)
 8003cf0:	e007      	b.n	8003d02 <TFT_fill+0x3a>
    {
       TFT_write_word(colour, DAT);
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff ff1a 	bl	8003b30 <TFT_write_word>
       index--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
    while(index)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f4      	bne.n	8003cf2 <TFT_fill+0x2a>
    };
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200000d6 	.word	0x200000d6
 8003d18:	200000d4 	.word	0x200000d4

08003d1c <TFT_fill_area>:


void TFT_fill_area(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t colour)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	80fb      	strh	r3, [r7, #6]
 8003d2e:	4603      	mov	r3, r0
 8003d30:	80bb      	strh	r3, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	807b      	strh	r3, [r7, #2]
 8003d36:	4613      	mov	r3, r2
 8003d38:	803b      	strh	r3, [r7, #0]
    unsigned long index = 0x00000000;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
    
    if(x1 > x2)
 8003d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	dd05      	ble.n	8003d56 <TFT_fill_area+0x3a>
    {
        swap(&x1, &x2);
 8003d4a:	1cba      	adds	r2, r7, #2
 8003d4c:	1dbb      	adds	r3, r7, #6
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f841 	bl	8003dd8 <swap>
    }
    if(y1 > y2)
 8003d56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	dd05      	ble.n	8003d6e <TFT_fill_area+0x52>
    {
        swap(&y1, &y2);
 8003d62:	463a      	mov	r2, r7
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f835 	bl	8003dd8 <swap>
    }
    
    index = (x2 - x1);
 8003d6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
    index *= (y2 - y1);
 8003d7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	60fb      	str	r3, [r7, #12]

    TFT_set_display_window(x1, y1, (x2 - 1), (y2 - 1));
 8003d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d96:	b298      	uxth	r0, r3
 8003d98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f7ff ff55 	bl	8003c60 <TFT_set_display_window>

    while(index)
 8003db6:	e007      	b.n	8003dc8 <TFT_fill_area+0xac>
    {
       TFT_write_word(colour, DAT);
 8003db8:	8c3b      	ldrh	r3, [r7, #32]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff feb7 	bl	8003b30 <TFT_write_word>
       index--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
    while(index)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f4      	bne.n	8003db8 <TFT_fill_area+0x9c>
    };
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}

08003dd8 <swap>:
    return (((((uint16_t)r) >> 3) << 11) | ((((uint16_t)g) >> 2) << 5) | (((uint16_t)b) >> 3));
}


void swap(int16_t *a, int16_t *b)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    int16_t temp = 0x0000;
 8003de2:	2300      	movs	r3, #0
 8003de4:	81fb      	strh	r3, [r7, #14]

    temp = *b;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	81fb      	strh	r3, [r7, #14]
    *b = *a;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	801a      	strh	r2, [r3, #0]
    *a = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	89fa      	ldrh	r2, [r7, #14]
 8003dfa:	801a      	strh	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <Draw_Pixel>:


void Draw_Pixel(uint16_t x_pos, uint16_t y_pos, uint16_t colour)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80fb      	strh	r3, [r7, #6]
 8003e12:	460b      	mov	r3, r1
 8003e14:	80bb      	strh	r3, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	807b      	strh	r3, [r7, #2]
    TFT_set_display_window(x_pos, y_pos, x_pos, y_pos);
 8003e1a:	88bb      	ldrh	r3, [r7, #4]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	88b9      	ldrh	r1, [r7, #4]
 8003e20:	88f8      	ldrh	r0, [r7, #6]
 8003e22:	f7ff ff1d 	bl	8003c60 <TFT_set_display_window>
    TFT_write_word(colour, DAT);
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fe80 	bl	8003b30 <TFT_write_word>
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <Draw_V_Line>:
    }
}


void Draw_V_Line(int16_t x1, int16_t y1, int16_t y2, uint16_t colour)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	80fb      	strh	r3, [r7, #6]
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	80bb      	strh	r3, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	807b      	strh	r3, [r7, #2]
 8003e52:	4613      	mov	r3, r2
 8003e54:	803b      	strh	r3, [r7, #0]
    if(y1 > y2)
 8003e56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	dd15      	ble.n	8003e8e <Draw_V_Line+0x56>
    {
       swap(&y1, &y2);
 8003e62:	1cba      	adds	r2, r7, #2
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ffb5 	bl	8003dd8 <swap>
    }

    while(y2 > (y1 - 1))
 8003e6e:	e00e      	b.n	8003e8e <Draw_V_Line+0x56>
    {
        Draw_Pixel(x1, y2, colour);
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e76:	b291      	uxth	r1, r2
 8003e78:	883a      	ldrh	r2, [r7, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffc4 	bl	8003e08 <Draw_Pixel>
        y2--;
 8003e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	807b      	strh	r3, [r7, #2]
    while(y2 > (y1 - 1))
 8003e8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	ddea      	ble.n	8003e70 <Draw_V_Line+0x38>
    }
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd90      	pop	{r4, r7, pc}

08003ea4 <Draw_H_Line>:


void Draw_H_Line(int16_t x1, int16_t x2, int16_t y1, uint16_t colour)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	80fb      	strh	r3, [r7, #6]
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80bb      	strh	r3, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	807b      	strh	r3, [r7, #2]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	803b      	strh	r3, [r7, #0]
    if(x1 > x2)
 8003ec2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ec6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	dd15      	ble.n	8003efa <Draw_H_Line+0x56>
    {
       swap(&x1, &x2);
 8003ece:	1d3a      	adds	r2, r7, #4
 8003ed0:	1dbb      	adds	r3, r7, #6
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff7f 	bl	8003dd8 <swap>
    }

    while(x2 > (x1 - 1))
 8003eda:	e00e      	b.n	8003efa <Draw_H_Line+0x56>
    {
        Draw_Pixel(x2, y1, colour);
 8003edc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8879      	ldrh	r1, [r7, #2]
 8003ee4:	883a      	ldrh	r2, [r7, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff8e 	bl	8003e08 <Draw_Pixel>
        x2--;
 8003eec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	80bb      	strh	r3, [r7, #4]
    while(x2 > (x1 - 1))
 8003efa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003efe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	ddea      	ble.n	8003edc <Draw_H_Line+0x38>
    }
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}

08003f10 <Draw_Rectangle>:
    }
}


void Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t fill, uint8_t type, uint16_t colour, uint16_t back_colour)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4604      	mov	r4, r0
 8003f18:	4608      	mov	r0, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	80fb      	strh	r3, [r7, #6]
 8003f22:	4603      	mov	r3, r0
 8003f24:	80bb      	strh	r3, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	807b      	strh	r3, [r7, #2]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	803b      	strh	r3, [r7, #0]
     int16_t i = 0x0000;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	82fb      	strh	r3, [r7, #22]
     int16_t j = 0x0000;
 8003f32:	2300      	movs	r3, #0
 8003f34:	82bb      	strh	r3, [r7, #20]
     int16_t xmin = 0x0000;
 8003f36:	2300      	movs	r3, #0
 8003f38:	827b      	strh	r3, [r7, #18]
     int16_t xmax = 0x0000;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	823b      	strh	r3, [r7, #16]
     int16_t ymin = 0x0000;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	81fb      	strh	r3, [r7, #14]
     int16_t ymax = 0x0000;
 8003f42:	2300      	movs	r3, #0
 8003f44:	81bb      	strh	r3, [r7, #12]

     switch(fill)
 8003f46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d142      	bne.n	8003fd4 <Draw_Rectangle+0xc4>
     {
         case YES:
         {
             if(x1 < x2)
 8003f4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	da04      	bge.n	8003f64 <Draw_Rectangle+0x54>
             {
                xmin = x1;
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	827b      	strh	r3, [r7, #18]
                xmax = x2;
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	823b      	strh	r3, [r7, #16]
 8003f62:	e003      	b.n	8003f6c <Draw_Rectangle+0x5c>
             }
             else
             {
                xmin = x2;
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	827b      	strh	r3, [r7, #18]
                xmax = x1;
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	823b      	strh	r3, [r7, #16]
             }

             if(y1 < y2)
 8003f6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	da04      	bge.n	8003f82 <Draw_Rectangle+0x72>
             {
                ymin = y1;
 8003f78:	88bb      	ldrh	r3, [r7, #4]
 8003f7a:	81fb      	strh	r3, [r7, #14]
                ymax = y2;
 8003f7c:	883b      	ldrh	r3, [r7, #0]
 8003f7e:	81bb      	strh	r3, [r7, #12]
 8003f80:	e003      	b.n	8003f8a <Draw_Rectangle+0x7a>
             }
             else
             {
                ymin = y2;
 8003f82:	883b      	ldrh	r3, [r7, #0]
 8003f84:	81fb      	strh	r3, [r7, #14]
                ymax = y1;
 8003f86:	88bb      	ldrh	r3, [r7, #4]
 8003f88:	81bb      	strh	r3, [r7, #12]
             }

             i = xmax;
 8003f8a:	8a3b      	ldrh	r3, [r7, #16]
 8003f8c:	82fb      	strh	r3, [r7, #22]

             while(i > xmin)
 8003f8e:	e01a      	b.n	8003fc6 <Draw_Rectangle+0xb6>
             {
            	 j = ymax;
 8003f90:	89bb      	ldrh	r3, [r7, #12]
 8003f92:	82bb      	strh	r3, [r7, #20]

            	 while(j > ymin)
 8003f94:	e00b      	b.n	8003fae <Draw_Rectangle+0x9e>
            	 {
            		 Draw_Pixel(i, j, colour);
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	8ab9      	ldrh	r1, [r7, #20]
 8003f9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff33 	bl	8003e08 <Draw_Pixel>
            		 j--;
 8003fa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	82bb      	strh	r3, [r7, #20]
            	 while(j > ymin)
 8003fae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	dced      	bgt.n	8003f96 <Draw_Rectangle+0x86>
            	 }
            	 i--;
 8003fba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	82fb      	strh	r3, [r7, #22]
             while(i > xmin)
 8003fc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003fca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dcde      	bgt.n	8003f90 <Draw_Rectangle+0x80>
             }

             break;
 8003fd2:	e024      	b.n	800401e <Draw_Rectangle+0x10e>
         }
         default:
         {
             Draw_V_Line(x1, y1, y2, colour);
 8003fd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fd6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003fda:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003fde:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003fe2:	f7ff ff29 	bl	8003e38 <Draw_V_Line>
             Draw_V_Line(x2, y1, y2, colour);
 8003fe6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fe8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003fec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ff0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8003ff4:	f7ff ff20 	bl	8003e38 <Draw_V_Line>
             Draw_H_Line(x1, x2, y1, colour);
 8003ff8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003ffa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003ffe:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004002:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004006:	f7ff ff4d 	bl	8003ea4 <Draw_H_Line>
             Draw_H_Line(x1, x2, y2, colour);
 800400a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800400c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004010:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004014:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004018:	f7ff ff44 	bl	8003ea4 <Draw_H_Line>
             break;
 800401c:	bf00      	nop
         }
     }

     if(type != SQUARE)
 800401e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <Draw_Rectangle+0x146>
     {
         Draw_Pixel(x1, y1, back_colour);
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	88b9      	ldrh	r1, [r7, #4]
 800402a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff feeb 	bl	8003e08 <Draw_Pixel>
         Draw_Pixel(x1, y2, back_colour);
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	8839      	ldrh	r1, [r7, #0]
 8004036:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fee5 	bl	8003e08 <Draw_Pixel>
         Draw_Pixel(x2, y1, back_colour);
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	88b9      	ldrh	r1, [r7, #4]
 8004042:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fedf 	bl	8003e08 <Draw_Pixel>
         Draw_Pixel(x2, y2, back_colour);
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	8839      	ldrh	r1, [r7, #0]
 800404e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fed9 	bl	8003e08 <Draw_Pixel>
     }
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}

0800405e <Draw_Font_Pixel>:
}



void Draw_Font_Pixel(uint16_t x_pos, uint16_t y_pos, uint16_t colour, uint8_t pixel_size)
{
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	4604      	mov	r4, r0
 8004066:	4608      	mov	r0, r1
 8004068:	4611      	mov	r1, r2
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	80fb      	strh	r3, [r7, #6]
 8004070:	4603      	mov	r3, r0
 8004072:	80bb      	strh	r3, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
 8004078:	4613      	mov	r3, r2
 800407a:	707b      	strb	r3, [r7, #1]
     uint8_t i = (pixel_size * pixel_size);
 800407c:	787a      	ldrb	r2, [r7, #1]
 800407e:	787b      	ldrb	r3, [r7, #1]
 8004080:	fb12 f303 	smulbb	r3, r2, r3
 8004084:	73fb      	strb	r3, [r7, #15]

     TFT_set_display_window(x_pos, y_pos, (x_pos + pixel_size - 1), (y_pos + pixel_size - 1));
 8004086:	787b      	ldrb	r3, [r7, #1]
 8004088:	b29a      	uxth	r2, r3
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	4413      	add	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29c      	uxth	r4, r3
 8004094:	787b      	ldrb	r3, [r7, #1]
 8004096:	b29a      	uxth	r2, r3
 8004098:	88bb      	ldrh	r3, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	88b9      	ldrh	r1, [r7, #4]
 80040a4:	88f8      	ldrh	r0, [r7, #6]
 80040a6:	4622      	mov	r2, r4
 80040a8:	f7ff fdda 	bl	8003c60 <TFT_set_display_window>

     while(i > 0)
 80040ac:	e007      	b.n	80040be <Draw_Font_Pixel+0x60>
     {
         TFT_write_word(colour, DAT);
 80040ae:	887b      	ldrh	r3, [r7, #2]
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fd3c 	bl	8003b30 <TFT_write_word>
         i--;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
     while(i > 0)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f4      	bne.n	80040ae <Draw_Font_Pixel+0x50>
     }
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}
	...

080040d0 <print_char>:


void print_char(uint16_t x_pos, uint16_t y_pos, uint8_t font_size, uint16_t colour, uint16_t back_colour, char ch)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4604      	mov	r4, r0
 80040d8:	4608      	mov	r0, r1
 80040da:	4611      	mov	r1, r2
 80040dc:	461a      	mov	r2, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	80fb      	strh	r3, [r7, #6]
 80040e2:	4603      	mov	r3, r0
 80040e4:	80bb      	strh	r3, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70fb      	strb	r3, [r7, #3]
 80040ea:	4613      	mov	r3, r2
 80040ec:	803b      	strh	r3, [r7, #0]
     uint8_t i = 0x00;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
     uint8_t j = 0x00;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73bb      	strb	r3, [r7, #14]
     uint8_t value = 0x00;
 80040f6:	2300      	movs	r3, #0
 80040f8:	737b      	strb	r3, [r7, #13]

     if(font_size <= 0)
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <print_char+0x34>
     {
         font_size = 1;
 8004100:	2301      	movs	r3, #1
 8004102:	70fb      	strb	r3, [r7, #3]
     }

     if(x_pos < font_size)
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	b29b      	uxth	r3, r3
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	429a      	cmp	r2, r3
 800410c:	d201      	bcs.n	8004112 <print_char+0x42>
     {
         x_pos = font_size;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	80fb      	strh	r3, [r7, #6]
     }

     for(i = 0x00; i < 0x05; i++)
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
 8004116:	e040      	b.n	800419a <print_char+0xca>
     {
         for(j = 0x00; j < 0x08; j++)
 8004118:	2300      	movs	r3, #0
 800411a:	73bb      	strb	r3, [r7, #14]
 800411c:	e02b      	b.n	8004176 <print_char+0xa6>
         {
             value = 0x0000;
 800411e:	2300      	movs	r3, #0
 8004120:	737b      	strb	r3, [r7, #13]
             value = ((font[((uint8_t)ch) - 0x20][i]));
 8004122:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004126:	f1a3 0220 	sub.w	r2, r3, #32
 800412a:	7bf9      	ldrb	r1, [r7, #15]
 800412c:	481f      	ldr	r0, [pc, #124]	; (80041ac <print_char+0xdc>)
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	4403      	add	r3, r0
 8004136:	440b      	add	r3, r1
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	737b      	strb	r3, [r7, #13]

             if(((value >> j) & 0x01) != 0x00)
 800413c:	7b7a      	ldrb	r2, [r7, #13]
 800413e:	7bbb      	ldrb	r3, [r7, #14]
 8004140:	fa42 f303 	asr.w	r3, r2, r3
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <print_char+0x8a>
             {
                 Draw_Font_Pixel(x_pos, y_pos, colour, font_size);
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	883a      	ldrh	r2, [r7, #0]
 8004150:	88b9      	ldrh	r1, [r7, #4]
 8004152:	88f8      	ldrh	r0, [r7, #6]
 8004154:	f7ff ff83 	bl	800405e <Draw_Font_Pixel>
 8004158:	e005      	b.n	8004166 <print_char+0x96>
             }
             else
             {
                 Draw_Font_Pixel(x_pos, y_pos, back_colour, font_size);
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	8c3a      	ldrh	r2, [r7, #32]
 800415e:	88b9      	ldrh	r1, [r7, #4]
 8004160:	88f8      	ldrh	r0, [r7, #6]
 8004162:	f7ff ff7c 	bl	800405e <Draw_Font_Pixel>
             }

             y_pos += font_size;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	b29a      	uxth	r2, r3
 800416a:	88bb      	ldrh	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	80bb      	strh	r3, [r7, #4]
         for(j = 0x00; j < 0x08; j++)
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	3301      	adds	r3, #1
 8004174:	73bb      	strb	r3, [r7, #14]
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	2b07      	cmp	r3, #7
 800417a:	d9d0      	bls.n	800411e <print_char+0x4e>
          }
          
          y_pos -= (font_size << 0x03);
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	b29b      	uxth	r3, r3
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	b29b      	uxth	r3, r3
 8004184:	88ba      	ldrh	r2, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	80bb      	strh	r3, [r7, #4]
          x_pos += font_size;
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	b29a      	uxth	r2, r3
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	4413      	add	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
     for(i = 0x00; i < 0x05; i++)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	3301      	adds	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d9bb      	bls.n	8004118 <print_char+0x48>
      }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd90      	pop	{r4, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	08004a24 	.word	0x08004a24

080041b0 <print_str>:


void print_str(uint16_t x_pos, uint16_t y_pos, uint8_t font_size, uint16_t colour, uint16_t back_colour, char *ch)
{
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	80fb      	strh	r3, [r7, #6]
 80041c2:	4603      	mov	r3, r0
 80041c4:	80bb      	strh	r3, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
 80041ca:	4613      	mov	r3, r2
 80041cc:	803b      	strh	r3, [r7, #0]
     do
     {
         print_char(x_pos, y_pos, font_size, colour, back_colour, *ch++);
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	61fa      	str	r2, [r7, #28]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	883c      	ldrh	r4, [r7, #0]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	88b9      	ldrh	r1, [r7, #4]
 80041dc:	88f8      	ldrh	r0, [r7, #6]
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	8b3b      	ldrh	r3, [r7, #24]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4623      	mov	r3, r4
 80041e6:	f7ff ff73 	bl	80040d0 <print_char>
         x_pos += (font_size * 0x06);
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	0052      	lsls	r2, r2, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4413      	add	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
     }while((*ch >= 0x20) && (*ch <= 0x7F));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b1f      	cmp	r3, #31
 8004204:	d904      	bls.n	8004210 <print_str+0x60>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b25b      	sxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	dade      	bge.n	80041ce <print_str+0x1e>
     
     print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
 8004210:	883c      	ldrh	r4, [r7, #0]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	88b9      	ldrh	r1, [r7, #4]
 8004216:	88f8      	ldrh	r0, [r7, #6]
 8004218:	2320      	movs	r3, #32
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	8b3b      	ldrh	r3, [r7, #24]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4623      	mov	r3, r4
 8004222:	f7ff ff55 	bl	80040d0 <print_char>
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}
	...

08004230 <print_I>:
     print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
}


void print_I(uint16_t x_pos, uint16_t y_pos, uint8_t font_size, uint16_t colour, uint16_t back_colour, int16_t value)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b087      	sub	sp, #28
 8004234:	af02      	add	r7, sp, #8
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	80fb      	strh	r3, [r7, #6]
 8004242:	4603      	mov	r3, r0
 8004244:	80bb      	strh	r3, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
 800424a:	4613      	mov	r3, r2
 800424c:	803b      	strh	r3, [r7, #0]
    char ch[7] = {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, '\r'};
 800424e:	4abe      	ldr	r2, [pc, #760]	; (8004548 <print_I+0x318>)
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004258:	6018      	str	r0, [r3, #0]
 800425a:	3304      	adds	r3, #4
 800425c:	8019      	strh	r1, [r3, #0]
 800425e:	3302      	adds	r3, #2
 8004260:	0c0a      	lsrs	r2, r1, #16
 8004262:	701a      	strb	r2, [r3, #0]

    if(value < 0)
 8004264:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	da06      	bge.n	800427a <print_I+0x4a>
    {
        ch[0] = 0x2D;
 800426c:	232d      	movs	r3, #45	; 0x2d
 800426e:	723b      	strb	r3, [r7, #8]
        value = -value;
 8004270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004272:	425b      	negs	r3, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004278:	e001      	b.n	800427e <print_I+0x4e>
    }
    else
    {
        ch[0] = 0x20;
 800427a:	2320      	movs	r3, #32
 800427c:	723b      	strb	r3, [r7, #8]
    }

    if(value > 9999)
 800427e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004282:	f242 720f 	movw	r2, #9999	; 0x270f
 8004286:	4293      	cmp	r3, r2
 8004288:	dd69      	ble.n	800435e <print_I+0x12e>
    {
        ch[1] = ((value / 10000) + 0x30);
 800428a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800428e:	4aaf      	ldr	r2, [pc, #700]	; (800454c <print_I+0x31c>)
 8004290:	fb82 1203 	smull	r1, r2, r2, r3
 8004294:	1312      	asrs	r2, r2, #12
 8004296:	17db      	asrs	r3, r3, #31
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b21b      	sxth	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3330      	adds	r3, #48	; 0x30
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 10000)/ 1000) + 0x30);
 80042a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80042a8:	4aa8      	ldr	r2, [pc, #672]	; (800454c <print_I+0x31c>)
 80042aa:	fb82 1203 	smull	r1, r2, r2, r3
 80042ae:	1311      	asrs	r1, r2, #12
 80042b0:	17da      	asrs	r2, r3, #31
 80042b2:	1a8a      	subs	r2, r1, r2
 80042b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80042b8:	fb01 f202 	mul.w	r2, r1, r2
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	b21b      	sxth	r3, r3
 80042c0:	4aa3      	ldr	r2, [pc, #652]	; (8004550 <print_I+0x320>)
 80042c2:	fb82 1203 	smull	r1, r2, r2, r3
 80042c6:	1192      	asrs	r2, r2, #6
 80042c8:	17db      	asrs	r3, r3, #31
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3330      	adds	r3, #48	; 0x30
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	72bb      	strb	r3, [r7, #10]
        ch[3] = (((value % 1000) / 100) + 0x30);
 80042d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80042da:	4a9d      	ldr	r2, [pc, #628]	; (8004550 <print_I+0x320>)
 80042dc:	fb82 1203 	smull	r1, r2, r2, r3
 80042e0:	1191      	asrs	r1, r2, #6
 80042e2:	17da      	asrs	r2, r3, #31
 80042e4:	1a8a      	subs	r2, r1, r2
 80042e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042ea:	fb01 f202 	mul.w	r2, r1, r2
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	b21b      	sxth	r3, r3
 80042f2:	4a98      	ldr	r2, [pc, #608]	; (8004554 <print_I+0x324>)
 80042f4:	fb82 1203 	smull	r1, r2, r2, r3
 80042f8:	1152      	asrs	r2, r2, #5
 80042fa:	17db      	asrs	r3, r3, #31
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b21b      	sxth	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3330      	adds	r3, #48	; 0x30
 8004304:	b2db      	uxtb	r3, r3
 8004306:	72fb      	strb	r3, [r7, #11]
        ch[4] = (((value % 100) / 10) + 0x30);
 8004308:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800430c:	4a91      	ldr	r2, [pc, #580]	; (8004554 <print_I+0x324>)
 800430e:	fb82 1203 	smull	r1, r2, r2, r3
 8004312:	1151      	asrs	r1, r2, #5
 8004314:	17da      	asrs	r2, r3, #31
 8004316:	1a8a      	subs	r2, r1, r2
 8004318:	2164      	movs	r1, #100	; 0x64
 800431a:	fb01 f202 	mul.w	r2, r1, r2
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	b21b      	sxth	r3, r3
 8004322:	4a8d      	ldr	r2, [pc, #564]	; (8004558 <print_I+0x328>)
 8004324:	fb82 1203 	smull	r1, r2, r2, r3
 8004328:	1092      	asrs	r2, r2, #2
 800432a:	17db      	asrs	r3, r3, #31
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	b21b      	sxth	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	3330      	adds	r3, #48	; 0x30
 8004334:	b2db      	uxtb	r3, r3
 8004336:	733b      	strb	r3, [r7, #12]
        ch[5] = ((value % 10) + 0x30);
 8004338:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800433c:	4b86      	ldr	r3, [pc, #536]	; (8004558 <print_I+0x328>)
 800433e:	fb83 1302 	smull	r1, r3, r3, r2
 8004342:	1099      	asrs	r1, r3, #2
 8004344:	17d3      	asrs	r3, r2, #31
 8004346:	1ac9      	subs	r1, r1, r3
 8004348:	460b      	mov	r3, r1
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	b21b      	sxth	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	3330      	adds	r3, #48	; 0x30
 8004358:	b2db      	uxtb	r3, r3
 800435a:	737b      	strb	r3, [r7, #13]
 800435c:	e118      	b.n	8004590 <print_I+0x360>
    }

    else if((value > 999) && (value <= 9999))
 800435e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004366:	db64      	blt.n	8004432 <print_I+0x202>
 8004368:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800436c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004370:	4293      	cmp	r3, r2
 8004372:	dc5e      	bgt.n	8004432 <print_I+0x202>
    {
        ch[1] = (((value % 10000)/ 1000) + 0x30);
 8004374:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004378:	4a74      	ldr	r2, [pc, #464]	; (800454c <print_I+0x31c>)
 800437a:	fb82 1203 	smull	r1, r2, r2, r3
 800437e:	1311      	asrs	r1, r2, #12
 8004380:	17da      	asrs	r2, r3, #31
 8004382:	1a8a      	subs	r2, r1, r2
 8004384:	f242 7110 	movw	r1, #10000	; 0x2710
 8004388:	fb01 f202 	mul.w	r2, r1, r2
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	b21b      	sxth	r3, r3
 8004390:	4a6f      	ldr	r2, [pc, #444]	; (8004550 <print_I+0x320>)
 8004392:	fb82 1203 	smull	r1, r2, r2, r3
 8004396:	1192      	asrs	r2, r2, #6
 8004398:	17db      	asrs	r3, r3, #31
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	b21b      	sxth	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3330      	adds	r3, #48	; 0x30
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 1000) / 100) + 0x30);
 80043a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80043aa:	4a69      	ldr	r2, [pc, #420]	; (8004550 <print_I+0x320>)
 80043ac:	fb82 1203 	smull	r1, r2, r2, r3
 80043b0:	1191      	asrs	r1, r2, #6
 80043b2:	17da      	asrs	r2, r3, #31
 80043b4:	1a8a      	subs	r2, r1, r2
 80043b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043ba:	fb01 f202 	mul.w	r2, r1, r2
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	b21b      	sxth	r3, r3
 80043c2:	4a64      	ldr	r2, [pc, #400]	; (8004554 <print_I+0x324>)
 80043c4:	fb82 1203 	smull	r1, r2, r2, r3
 80043c8:	1152      	asrs	r2, r2, #5
 80043ca:	17db      	asrs	r3, r3, #31
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3330      	adds	r3, #48	; 0x30
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	72bb      	strb	r3, [r7, #10]
        ch[3] = (((value % 100) / 10) + 0x30);
 80043d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80043dc:	4a5d      	ldr	r2, [pc, #372]	; (8004554 <print_I+0x324>)
 80043de:	fb82 1203 	smull	r1, r2, r2, r3
 80043e2:	1151      	asrs	r1, r2, #5
 80043e4:	17da      	asrs	r2, r3, #31
 80043e6:	1a8a      	subs	r2, r1, r2
 80043e8:	2164      	movs	r1, #100	; 0x64
 80043ea:	fb01 f202 	mul.w	r2, r1, r2
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	b21b      	sxth	r3, r3
 80043f2:	4a59      	ldr	r2, [pc, #356]	; (8004558 <print_I+0x328>)
 80043f4:	fb82 1203 	smull	r1, r2, r2, r3
 80043f8:	1092      	asrs	r2, r2, #2
 80043fa:	17db      	asrs	r3, r3, #31
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	b21b      	sxth	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	3330      	adds	r3, #48	; 0x30
 8004404:	b2db      	uxtb	r3, r3
 8004406:	72fb      	strb	r3, [r7, #11]
        ch[4] = ((value % 10) + 0x30);
 8004408:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800440c:	4b52      	ldr	r3, [pc, #328]	; (8004558 <print_I+0x328>)
 800440e:	fb83 1302 	smull	r1, r3, r3, r2
 8004412:	1099      	asrs	r1, r3, #2
 8004414:	17d3      	asrs	r3, r2, #31
 8004416:	1ac9      	subs	r1, r1, r3
 8004418:	460b      	mov	r3, r1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	b21b      	sxth	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3330      	adds	r3, #48	; 0x30
 8004428:	b2db      	uxtb	r3, r3
 800442a:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 800442c:	2320      	movs	r3, #32
 800442e:	737b      	strb	r3, [r7, #13]
 8004430:	e0ae      	b.n	8004590 <print_I+0x360>
    }
    else if((value > 99) && (value <= 999))
 8004432:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004436:	2b63      	cmp	r3, #99	; 0x63
 8004438:	dd4c      	ble.n	80044d4 <print_I+0x2a4>
 800443a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800443e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004442:	da47      	bge.n	80044d4 <print_I+0x2a4>
    {
        ch[1] = (((value % 1000) / 100) + 0x30);
 8004444:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004448:	4a41      	ldr	r2, [pc, #260]	; (8004550 <print_I+0x320>)
 800444a:	fb82 1203 	smull	r1, r2, r2, r3
 800444e:	1191      	asrs	r1, r2, #6
 8004450:	17da      	asrs	r2, r3, #31
 8004452:	1a8a      	subs	r2, r1, r2
 8004454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004458:	fb01 f202 	mul.w	r2, r1, r2
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	b21b      	sxth	r3, r3
 8004460:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <print_I+0x324>)
 8004462:	fb82 1203 	smull	r1, r2, r2, r3
 8004466:	1152      	asrs	r2, r2, #5
 8004468:	17db      	asrs	r3, r3, #31
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	b21b      	sxth	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3330      	adds	r3, #48	; 0x30
 8004472:	b2db      	uxtb	r3, r3
 8004474:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 100) / 10) + 0x30);
 8004476:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800447a:	4a36      	ldr	r2, [pc, #216]	; (8004554 <print_I+0x324>)
 800447c:	fb82 1203 	smull	r1, r2, r2, r3
 8004480:	1151      	asrs	r1, r2, #5
 8004482:	17da      	asrs	r2, r3, #31
 8004484:	1a8a      	subs	r2, r1, r2
 8004486:	2164      	movs	r1, #100	; 0x64
 8004488:	fb01 f202 	mul.w	r2, r1, r2
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	b21b      	sxth	r3, r3
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <print_I+0x328>)
 8004492:	fb82 1203 	smull	r1, r2, r2, r3
 8004496:	1092      	asrs	r2, r2, #2
 8004498:	17db      	asrs	r3, r3, #31
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	b21b      	sxth	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3330      	adds	r3, #48	; 0x30
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	72bb      	strb	r3, [r7, #10]
        ch[3] = ((value % 10) + 0x30);
 80044a6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80044aa:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <print_I+0x328>)
 80044ac:	fb83 1302 	smull	r1, r3, r3, r2
 80044b0:	1099      	asrs	r1, r3, #2
 80044b2:	17d3      	asrs	r3, r2, #31
 80044b4:	1ac9      	subs	r1, r1, r3
 80044b6:	460b      	mov	r3, r1
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b21b      	sxth	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3330      	adds	r3, #48	; 0x30
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 80044ca:	2320      	movs	r3, #32
 80044cc:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 80044ce:	2320      	movs	r3, #32
 80044d0:	737b      	strb	r3, [r7, #13]
 80044d2:	e05d      	b.n	8004590 <print_I+0x360>
    }
    else if((value > 9) && (value <= 99))
 80044d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044d8:	2b09      	cmp	r3, #9
 80044da:	dd3f      	ble.n	800455c <print_I+0x32c>
 80044dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044e0:	2b63      	cmp	r3, #99	; 0x63
 80044e2:	dc3b      	bgt.n	800455c <print_I+0x32c>
    {
        ch[1] = (((value % 100) / 10) + 0x30);
 80044e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044e8:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <print_I+0x324>)
 80044ea:	fb82 1203 	smull	r1, r2, r2, r3
 80044ee:	1151      	asrs	r1, r2, #5
 80044f0:	17da      	asrs	r2, r3, #31
 80044f2:	1a8a      	subs	r2, r1, r2
 80044f4:	2164      	movs	r1, #100	; 0x64
 80044f6:	fb01 f202 	mul.w	r2, r1, r2
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <print_I+0x328>)
 8004500:	fb82 1203 	smull	r1, r2, r2, r3
 8004504:	1092      	asrs	r2, r2, #2
 8004506:	17db      	asrs	r3, r3, #31
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b21b      	sxth	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	3330      	adds	r3, #48	; 0x30
 8004510:	b2db      	uxtb	r3, r3
 8004512:	727b      	strb	r3, [r7, #9]
        ch[2] = ((value % 10) + 0x30);
 8004514:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <print_I+0x328>)
 800451a:	fb83 1302 	smull	r1, r3, r3, r2
 800451e:	1099      	asrs	r1, r3, #2
 8004520:	17d3      	asrs	r3, r2, #31
 8004522:	1ac9      	subs	r1, r1, r3
 8004524:	460b      	mov	r3, r1
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	b21b      	sxth	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	3330      	adds	r3, #48	; 0x30
 8004534:	b2db      	uxtb	r3, r3
 8004536:	72bb      	strb	r3, [r7, #10]
        ch[3] = 0x20;
 8004538:	2320      	movs	r3, #32
 800453a:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 800453c:	2320      	movs	r3, #32
 800453e:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 8004540:	2320      	movs	r3, #32
 8004542:	737b      	strb	r3, [r7, #13]
 8004544:	e024      	b.n	8004590 <print_I+0x360>
 8004546:	bf00      	nop
 8004548:	080049fc 	.word	0x080049fc
 800454c:	68db8bad 	.word	0x68db8bad
 8004550:	10624dd3 	.word	0x10624dd3
 8004554:	51eb851f 	.word	0x51eb851f
 8004558:	66666667 	.word	0x66666667
    }
    else
    {
        ch[1] = ((value % 10) + 0x30);
 800455c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <print_I+0x380>)
 8004562:	fb83 1302 	smull	r1, r3, r3, r2
 8004566:	1099      	asrs	r1, r3, #2
 8004568:	17d3      	asrs	r3, r2, #31
 800456a:	1ac9      	subs	r1, r1, r3
 800456c:	460b      	mov	r3, r1
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	b21b      	sxth	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3330      	adds	r3, #48	; 0x30
 800457c:	b2db      	uxtb	r3, r3
 800457e:	727b      	strb	r3, [r7, #9]
        ch[2] = 0x20;
 8004580:	2320      	movs	r3, #32
 8004582:	72bb      	strb	r3, [r7, #10]
        ch[3] = 0x20;
 8004584:	2320      	movs	r3, #32
 8004586:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 8004588:	2320      	movs	r3, #32
 800458a:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 800458c:	2320      	movs	r3, #32
 800458e:	737b      	strb	r3, [r7, #13]
    }

    print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
 8004590:	883c      	ldrh	r4, [r7, #0]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	88b9      	ldrh	r1, [r7, #4]
 8004596:	88f8      	ldrh	r0, [r7, #6]
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	8c3b      	ldrh	r3, [r7, #32]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	4623      	mov	r3, r4
 80045a4:	f7ff fe04 	bl	80041b0 <print_str>
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	66666667 	.word	0x66666667

080045b4 <print_D>:


void print_D(uint16_t x_pos, uint16_t y_pos, uint8_t font_size, uint16_t colour, uint16_t back_colour, uint16_t value, uint8_t points)
{
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	4604      	mov	r4, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	80fb      	strh	r3, [r7, #6]
 80045c6:	4603      	mov	r3, r0
 80045c8:	80bb      	strh	r3, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	70fb      	strb	r3, [r7, #3]
 80045ce:	4613      	mov	r3, r2
 80045d0:	803b      	strh	r3, [r7, #0]
    char ch[5] = {0x2E, 0x20, 0x20, 0x20, '\r'};
 80045d2:	4a32      	ldr	r2, [pc, #200]	; (800469c <print_D+0xe8>)
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045dc:	6018      	str	r0, [r3, #0]
 80045de:	3304      	adds	r3, #4
 80045e0:	7019      	strb	r1, [r3, #0]

    ch[1] = ((value / 1000) + 0x30);
 80045e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045e4:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <print_D+0xec>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3330      	adds	r3, #48	; 0x30
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	727b      	strb	r3, [r7, #9]

    if(points > 1)
 80045f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d93d      	bls.n	800467a <print_D+0xc6>
    {
        ch[2] = (((value % 1000) / 100) + 0x30);
 80045fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <print_D+0xec>)
 8004602:	fba2 1203 	umull	r1, r2, r2, r3
 8004606:	0992      	lsrs	r2, r2, #6
 8004608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800460c:	fb01 f202 	mul.w	r2, r1, r2
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <print_D+0xf0>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	b29b      	uxth	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3330      	adds	r3, #48	; 0x30
 8004622:	b2db      	uxtb	r3, r3
 8004624:	72bb      	strb	r3, [r7, #10]

        if(points > 2)
 8004626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800462a:	2b02      	cmp	r3, #2
 800462c:	d925      	bls.n	800467a <print_D+0xc6>
        {
            ch[3] = (((value % 100) / 10) + 0x30);
 800462e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004630:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <print_D+0xf0>)
 8004632:	fba2 1203 	umull	r1, r2, r2, r3
 8004636:	0952      	lsrs	r2, r2, #5
 8004638:	2164      	movs	r1, #100	; 0x64
 800463a:	fb01 f202 	mul.w	r2, r1, r2
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	b29b      	uxth	r3, r3
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <print_D+0xf4>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	b29b      	uxth	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3330      	adds	r3, #48	; 0x30
 8004650:	b2db      	uxtb	r3, r3
 8004652:	72fb      	strb	r3, [r7, #11]

            if(points > 3)
 8004654:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004658:	2b03      	cmp	r3, #3
 800465a:	d90e      	bls.n	800467a <print_D+0xc6>
            {
                ch[4] = ((value % 10) + 0x30);
 800465c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <print_D+0xf4>)
 8004660:	fba3 1302 	umull	r1, r3, r3, r2
 8004664:	08d9      	lsrs	r1, r3, #3
 8004666:	460b      	mov	r3, r1
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3330      	adds	r3, #48	; 0x30
 8004676:	b2db      	uxtb	r3, r3
 8004678:	733b      	strb	r3, [r7, #12]
            }
        }
    }

    print_str(x_pos, y_pos, font_size, colour, back_colour, ch);
 800467a:	883c      	ldrh	r4, [r7, #0]
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	88b9      	ldrh	r1, [r7, #4]
 8004680:	88f8      	ldrh	r0, [r7, #6]
 8004682:	f107 0308 	add.w	r3, r7, #8
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	8c3b      	ldrh	r3, [r7, #32]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4623      	mov	r3, r4
 800468e:	f7ff fd8f 	bl	80041b0 <print_str>
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bd90      	pop	{r4, r7, pc}
 800469a:	bf00      	nop
 800469c:	08004a04 	.word	0x08004a04
 80046a0:	10624dd3 	.word	0x10624dd3
 80046a4:	51eb851f 	.word	0x51eb851f
 80046a8:	cccccccd 	.word	0xcccccccd

080046ac <print_F>:


void print_F(uint16_t x_pos, uint16_t y_pos, uint8_t font_size, uint16_t colour, uint16_t back_colour, float value, uint8_t points)
{
 80046ac:	b5b0      	push	{r4, r5, r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80046be:	4623      	mov	r3, r4
 80046c0:	81fb      	strh	r3, [r7, #14]
 80046c2:	4603      	mov	r3, r0
 80046c4:	81bb      	strh	r3, [r7, #12]
 80046c6:	460b      	mov	r3, r1
 80046c8:	72fb      	strb	r3, [r7, #11]
 80046ca:	4613      	mov	r3, r2
 80046cc:	813b      	strh	r3, [r7, #8]
    signed long tmp = 0x0000;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

    tmp = value;
 80046d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80046d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046da:	ee17 3a90 	vmov	r3, s15
 80046de:	617b      	str	r3, [r7, #20]
    print_I(x_pos, y_pos, font_size, colour, back_colour, tmp);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	893c      	ldrh	r4, [r7, #8]
 80046e6:	7afa      	ldrb	r2, [r7, #11]
 80046e8:	89b9      	ldrh	r1, [r7, #12]
 80046ea:	89f8      	ldrh	r0, [r7, #14]
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4623      	mov	r3, r4
 80046f4:	f7ff fd9c 	bl	8004230 <print_I>
    tmp = ((value - tmp) * 10000);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004702:	ed97 7a01 	vldr	s14, [r7, #4]
 8004706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800470a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004914 <print_F+0x268>
 800470e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004716:	ee17 3a90 	vmov	r3, s15
 800471a:	617b      	str	r3, [r7, #20]

    if(tmp < 0)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	da02      	bge.n	8004728 <print_F+0x7c>
    {
       tmp = -tmp;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	425b      	negs	r3, r3
 8004726:	617b      	str	r3, [r7, #20]
    }

    if((value >= 10000) && (value < 100000))
 8004728:	edd7 7a01 	vldr	s15, [r7, #4]
 800472c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004914 <print_F+0x268>
 8004730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	db22      	blt.n	8004780 <print_F+0xd4>
 800473a:	edd7 7a01 	vldr	s15, [r7, #4]
 800473e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004918 <print_F+0x26c>
 8004742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	d519      	bpl.n	8004780 <print_F+0xd4>
    {
        print_D((x_pos + (font_size * 36)), y_pos, font_size, colour, back_colour, tmp, points);
 800474c:	7afb      	ldrb	r3, [r7, #11]
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	00d2      	lsls	r2, r2, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	b29a      	uxth	r2, r3
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	4413      	add	r3, r2
 800475e:	b298      	uxth	r0, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	b29b      	uxth	r3, r3
 8004764:	893d      	ldrh	r5, [r7, #8]
 8004766:	7afc      	ldrb	r4, [r7, #11]
 8004768:	89b9      	ldrh	r1, [r7, #12]
 800476a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800476e:	9202      	str	r2, [sp, #8]
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	462b      	mov	r3, r5
 8004778:	4622      	mov	r2, r4
 800477a:	f7ff ff1b 	bl	80045b4 <print_D>
 800477e:	e0c5      	b.n	800490c <print_F+0x260>
    }
    else if((value >= 1000) && (value < 10000))
 8004780:	edd7 7a01 	vldr	s15, [r7, #4]
 8004784:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800491c <print_F+0x270>
 8004788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	db22      	blt.n	80047d8 <print_F+0x12c>
 8004792:	edd7 7a01 	vldr	s15, [r7, #4]
 8004796:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004914 <print_F+0x268>
 800479a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	d519      	bpl.n	80047d8 <print_F+0x12c>
    {
        print_D((x_pos + (font_size * 30)), y_pos, font_size, colour, back_colour, tmp, points);
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	4413      	add	r3, r2
 80047b6:	b298      	uxth	r0, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	893d      	ldrh	r5, [r7, #8]
 80047be:	7afc      	ldrb	r4, [r7, #11]
 80047c0:	89b9      	ldrh	r1, [r7, #12]
 80047c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80047c6:	9202      	str	r2, [sp, #8]
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	462b      	mov	r3, r5
 80047d0:	4622      	mov	r2, r4
 80047d2:	f7ff feef 	bl	80045b4 <print_D>
 80047d6:	e099      	b.n	800490c <print_F+0x260>
    }
    else if((value >= 100) && (value < 1000))
 80047d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047dc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004920 <print_F+0x274>
 80047e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e8:	db22      	blt.n	8004830 <print_F+0x184>
 80047ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ee:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800491c <print_F+0x270>
 80047f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d519      	bpl.n	8004830 <print_F+0x184>
    {
        print_D((x_pos + (font_size * 24)), y_pos, font_size, colour, back_colour, tmp, points);
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	0052      	lsls	r2, r2, #1
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	b29a      	uxth	r2, r3
 800480a:	89fb      	ldrh	r3, [r7, #14]
 800480c:	4413      	add	r3, r2
 800480e:	b298      	uxth	r0, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	b29b      	uxth	r3, r3
 8004814:	893d      	ldrh	r5, [r7, #8]
 8004816:	7afc      	ldrb	r4, [r7, #11]
 8004818:	89b9      	ldrh	r1, [r7, #12]
 800481a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800481e:	9202      	str	r2, [sp, #8]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	462b      	mov	r3, r5
 8004828:	4622      	mov	r2, r4
 800482a:	f7ff fec3 	bl	80045b4 <print_D>
 800482e:	e06d      	b.n	800490c <print_F+0x260>
    }
    else if((value >= 10) && (value < 100))
 8004830:	edd7 7a01 	vldr	s15, [r7, #4]
 8004834:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	db22      	blt.n	8004888 <print_F+0x1dc>
 8004842:	edd7 7a01 	vldr	s15, [r7, #4]
 8004846:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004920 <print_F+0x274>
 800484a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	d519      	bpl.n	8004888 <print_F+0x1dc>
    {
        print_D((x_pos + (font_size * 18)), y_pos, font_size, colour, back_colour, tmp, points);
 8004854:	7afb      	ldrb	r3, [r7, #11]
 8004856:	b29b      	uxth	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	00d2      	lsls	r2, r2, #3
 800485c:	4413      	add	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	89fb      	ldrh	r3, [r7, #14]
 8004864:	4413      	add	r3, r2
 8004866:	b298      	uxth	r0, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	b29b      	uxth	r3, r3
 800486c:	893d      	ldrh	r5, [r7, #8]
 800486e:	7afc      	ldrb	r4, [r7, #11]
 8004870:	89b9      	ldrh	r1, [r7, #12]
 8004872:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004876:	9202      	str	r2, [sp, #8]
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	462b      	mov	r3, r5
 8004880:	4622      	mov	r2, r4
 8004882:	f7ff fe97 	bl	80045b4 <print_D>
 8004886:	e041      	b.n	800490c <print_F+0x260>
    }
    else if(value < 10)
 8004888:	edd7 7a01 	vldr	s15, [r7, #4]
 800488c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	d400      	bmi.n	800489c <print_F+0x1f0>
        else
        {
            print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
        }
    }
}
 800489a:	e037      	b.n	800490c <print_F+0x260>
        print_D((x_pos + (font_size * 12)), y_pos, font_size, colour, back_colour, tmp, points);
 800489c:	7afb      	ldrb	r3, [r7, #11]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	0052      	lsls	r2, r2, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	89fb      	ldrh	r3, [r7, #14]
 80048ac:	4413      	add	r3, r2
 80048ae:	b298      	uxth	r0, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	893d      	ldrh	r5, [r7, #8]
 80048b6:	7afc      	ldrb	r4, [r7, #11]
 80048b8:	89b9      	ldrh	r1, [r7, #12]
 80048ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80048be:	9202      	str	r2, [sp, #8]
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	462b      	mov	r3, r5
 80048c8:	4622      	mov	r2, r4
 80048ca:	f7ff fe73 	bl	80045b4 <print_D>
        if(value < 0)
 80048ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80048d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	d50b      	bpl.n	80048f4 <print_F+0x248>
            print_char(x_pos, y_pos, font_size, colour, back_colour, 0x2D);
 80048dc:	893c      	ldrh	r4, [r7, #8]
 80048de:	7afa      	ldrb	r2, [r7, #11]
 80048e0:	89b9      	ldrh	r1, [r7, #12]
 80048e2:	89f8      	ldrh	r0, [r7, #14]
 80048e4:	232d      	movs	r3, #45	; 0x2d
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	4623      	mov	r3, r4
 80048ee:	f7ff fbef 	bl	80040d0 <print_char>
}
 80048f2:	e00b      	b.n	800490c <print_F+0x260>
            print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
 80048f4:	893c      	ldrh	r4, [r7, #8]
 80048f6:	7afa      	ldrb	r2, [r7, #11]
 80048f8:	89b9      	ldrh	r1, [r7, #12]
 80048fa:	89f8      	ldrh	r0, [r7, #14]
 80048fc:	2320      	movs	r3, #32
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	4623      	mov	r3, r4
 8004906:	f7ff fbe3 	bl	80040d0 <print_char>
}
 800490a:	e7ff      	b.n	800490c <print_F+0x260>
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bdb0      	pop	{r4, r5, r7, pc}
 8004914:	461c4000 	.word	0x461c4000
 8004918:	47c35000 	.word	0x47c35000
 800491c:	447a0000 	.word	0x447a0000
 8004920:	42c80000 	.word	0x42c80000

08004924 <__libc_init_array>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	4d0d      	ldr	r5, [pc, #52]	; (800495c <__libc_init_array+0x38>)
 8004928:	4c0d      	ldr	r4, [pc, #52]	; (8004960 <__libc_init_array+0x3c>)
 800492a:	1b64      	subs	r4, r4, r5
 800492c:	10a4      	asrs	r4, r4, #2
 800492e:	2600      	movs	r6, #0
 8004930:	42a6      	cmp	r6, r4
 8004932:	d109      	bne.n	8004948 <__libc_init_array+0x24>
 8004934:	4d0b      	ldr	r5, [pc, #44]	; (8004964 <__libc_init_array+0x40>)
 8004936:	4c0c      	ldr	r4, [pc, #48]	; (8004968 <__libc_init_array+0x44>)
 8004938:	f000 f820 	bl	800497c <_init>
 800493c:	1b64      	subs	r4, r4, r5
 800493e:	10a4      	asrs	r4, r4, #2
 8004940:	2600      	movs	r6, #0
 8004942:	42a6      	cmp	r6, r4
 8004944:	d105      	bne.n	8004952 <__libc_init_array+0x2e>
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	f855 3b04 	ldr.w	r3, [r5], #4
 800494c:	4798      	blx	r3
 800494e:	3601      	adds	r6, #1
 8004950:	e7ee      	b.n	8004930 <__libc_init_array+0xc>
 8004952:	f855 3b04 	ldr.w	r3, [r5], #4
 8004956:	4798      	blx	r3
 8004958:	3601      	adds	r6, #1
 800495a:	e7f2      	b.n	8004942 <__libc_init_array+0x1e>
 800495c:	08004c0c 	.word	0x08004c0c
 8004960:	08004c0c 	.word	0x08004c0c
 8004964:	08004c0c 	.word	0x08004c0c
 8004968:	08004c10 	.word	0x08004c10

0800496c <memset>:
 800496c:	4402      	add	r2, r0
 800496e:	4603      	mov	r3, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <_init>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

08004988 <_fini>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr
