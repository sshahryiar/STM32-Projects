_LM75_write_byte:
  begin   (midx: 0)
//lm75.c,14 :: 		void LM75_write_byte(unsigned char pointer, unsigned char value)
_LM75_write_byte:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//lm75.c,16 :: 		unsigned char values[0x02] = {0x00, 0x00};
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	LM75_write_byte_values_L0 <-initialize(0)   (midx: 0)
//lm75.c,18 :: 		values[0] = pointer;
	R2 <4> <- addr(LM75_write_byte_values_L0)   (midx: 0)
   (midx: 0)
	[R2] <1> <- R0   (midx: 0)
//lm75.c,19 :: 		values[1] = value;
	R2 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//lm75.c,21 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//lm75.c,22 :: 		I2C1_Write(LM75_I2C_Address, values, 2, END_MODE_STOP);
	R2 <4> <- addr(LM75_write_byte_values_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R1 <4> <- R2   (midx: 0)
	R2 <4> <- 2   (midx: 0)
	R0 <1> <- 72   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
  end
   (midx: 0)
_LM75_init:
  begin   (midx: 0)
//lm75.c,4 :: 		void LM75_init()
_LM75_init:
  begin   (midx: 0)
//lm75.c,6 :: 		I2C1_Init_Advanced(400000, &_GPIO_MODULE_I2C1_PB89);
	R1 <4> <- #__GPIO_MODULE_I2C1_PB89   (midx: 0)
	R0 <4> <- 400000   (midx: 0)
	CALL _I2C1_Init_Advanced   (midx: 0)
//lm75.c,7 :: 		delay_ms(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//lm75.c,8 :: 		I2C_Set_Active(&I2C1_Start, &I2C1_Read, &I2C1_Write);
	R2 <4> <- #_I2C1_Write   (midx: 0)
	R1 <4> <- #_I2C1_Read   (midx: 0)
	R0 <4> <- #_I2C1_Start   (midx: 0)
	CALL _I2C_Set_Active   (midx: 0)
//lm75.c,10 :: 		LM75_write_byte(pointer_conf_reg, (queue_value_1 | OS_POL_LOW | OS_Comp | normal));
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _LM75_write_byte   (midx: 0)
  end
   (midx: 0)
_LM75_write_bytes:
  begin   (midx: 0)
//lm75.c,26 :: 		void LM75_write_bytes(unsigned char pointer, signed int value)
_LM75_write_bytes:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//lm75.c,28 :: 		unsigned char values[0x03] = {0x00, 0x00, 0x00};
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	LM75_write_bytes_values_L0 <-initialize(0)   (midx: 0)
//lm75.c,30 :: 		values[0] = pointer;
	R4 <4> <- addr(LM75_write_bytes_values_L0)   (midx: 0)
   (midx: 0)
	[R4] <1> <- R0   (midx: 0)
//lm75.c,31 :: 		values[1] = ((value & 0xFF00) >> 8);
	R3 <4> <-  R4 + 1   (midx: 2)
	R2 <2> <-  R1 & 65280   (midx: 1)
	R2 <2> <-  R2 shr 8   (midx: 1)
	[R3] <1> <- R2   (midx: 0)
//lm75.c,32 :: 		values[2] = (value & 0x00FF);
	R3 <4> <-  R4 + 2   (midx: 2)
   (midx: 0)
	R2 <2> <-  R1 & 255   (midx: 5)
	[R3] <1> <- R2   (midx: 0)
//lm75.c,34 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//lm75.c,35 :: 		I2C1_Write(LM75_I2C_Address, values, 3, END_MODE_STOP);
	R2 <4> <- addr(LM75_write_bytes_values_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R1 <4> <- R2   (midx: 0)
	R2 <4> <- 3   (midx: 0)
	R0 <1> <- 72   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
  end
   (midx: 0)
_LM75_read_byte:
  begin   (midx: 0)
//lm75.c,39 :: 		signed int LM75_read_byte(unsigned char pointer)
_LM75_read_byte:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
//lm75.c,41 :: 		unsigned char value_p[0x01] = {0x00};
   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	LM75_read_byte_value_p_L0 <-initialize(0)   (midx: 0)
//lm75.c,42 :: 		unsigned char value_d[0x01] = {0x00};
   (midx: 0)
	LM75_read_byte_value_d_L0 <-initialize(0)   (midx: 0)
//lm75.c,44 :: 		value_p[0] = pointer;
	R1 <4> <- addr(LM75_read_byte_value_p_L0)   (midx: 0)
   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//lm75.c,46 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//lm75.c,47 :: 		I2C1_Write(LM75_I2C_Address, value_p, 1, END_MODE_RESTART);
	R1 <4> <- addr(LM75_read_byte_value_p_L0)   (midx: 0)
	R3 <4> <- 0   (midx: 0)
	R2 <4> <- 1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <1> <- 72   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
//lm75.c,48 :: 		I2C1_Read(LM75_I2C_Address, value_d, 1, END_MODE_STOP);
	R1 <4> <- addr(LM75_read_byte_value_d_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R2 <4> <- 1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <1> <- 72   (midx: 0)
	CALL _I2C1_Read   (midx: 0)
//lm75.c,50 :: 		return (value_d[0x00]);
	R1 <4> <- addr(LM75_read_byte_value_d_L0)   (midx: 0)
	R1 <1> <- *R1   (midx: 0)
	R0 <2> <- R1   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_LM75_read_bytes:
  begin   (midx: 0)
//lm75.c,54 :: 		signed int LM75_read_bytes(unsigned char pointer)
_LM75_read_bytes:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
//lm75.c,56 :: 		unsigned char value_p[0x01] = {0x00};
   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	LM75_read_bytes_value_p_L0 <-initialize(0)   (midx: 0)
//lm75.c,57 :: 		unsigned char value_d[0x02] = {0x00, 0x00};
   (midx: 0)
	LM75_read_bytes_value_d_L0 <-initialize(0)   (midx: 0)
//lm75.c,59 :: 		signed int value = 0x0000;
   (midx: 0)
//lm75.c,61 :: 		value_p[0] = pointer;
	R1 <4> <- addr(LM75_read_bytes_value_p_L0)   (midx: 0)
   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//lm75.c,63 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//lm75.c,64 :: 		I2C1_Write(LM75_I2C_Address, value_p, 1, END_MODE_RESTART);
	R1 <4> <- addr(LM75_read_bytes_value_p_L0)   (midx: 0)
	R3 <4> <- 0   (midx: 0)
	R2 <4> <- 1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <1> <- 72   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
//lm75.c,65 :: 		I2C1_Read(LM75_I2C_Address, value_d, 2, END_MODE_STOP);
	R1 <4> <- addr(LM75_read_bytes_value_d_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R2 <4> <- 2   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <1> <- 72   (midx: 0)
	CALL _I2C1_Read   (midx: 0)
//lm75.c,67 :: 		value = ((signed int)value_d[0x00]);
	R3 <4> <- addr(LM75_read_bytes_value_d_L0)   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <2> <- R1   (midx: 0)
//lm75.c,68 :: 		value <<= 0x08;
	R2 <2> <-  R1 shl 8   (midx: 5)
//lm75.c,69 :: 		value |= ((signed int)value_d[0x01]);
	R1 <4> <-  R3 + 1   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	R1 <2> <-  R2 | R1   (midx: 5)
//lm75.c,71 :: 		return value;
	R0 <2> <- R1   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_get_temp:
  begin   (midx: 0)
//lm75.c,75 :: 		float get_temp()
_get_temp:
  begin   (midx: 0)
//lm75.c,77 :: 		float temp = 0.0;
   (midx: 0)
//lm75.c,79 :: 		temp = (LM75_read_bytes(pointer_temp_reg) >> 5);
	R0 <1> <- 0   (midx: 0)
	CALL _LM75_read_bytes   (midx: 0)
	R0 <2> <-  R0 shr 5   (midx: 5)
	S1 <4> <- (type cast)R0   (midx: 0)
//lm75.c,80 :: 		temp *= 0.125;
	S0 <4> <- 1.250000E-001   (midx: 0)
	S0 <4> <-  S1 * S0   (midx: 9)
//lm75.c,82 :: 		return temp;
	S0 <4> <- S0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_OLED_reset_sequence:
  begin   (midx: 0)
//ssd1306.c,55 :: 		void OLED_reset_sequence()
_OLED_reset_sequence:
  begin   (midx: 0)
//ssd1306.c,57 :: 		delay_ms(40);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ssd1306.c,58 :: 		OLED_RESET = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(GPIOA_ODRbits+0)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//ssd1306.c,59 :: 		delay_ms(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ssd1306.c,60 :: 		OLED_RESET = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(GPIOA_ODRbits+0)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//ssd1306.c,61 :: 		delay_ms(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
  end
   (midx: 0)
_OLED_write:
  begin   (midx: 0)
//ssd1306.c,66 :: 		void OLED_write(unsigned char value, unsigned char control_byte)
_OLED_write:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,68 :: 		unsigned char data_value[2] = {0x00, 0x00};
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	OLED_write_data_value_L0 <-initialize(0)   (midx: 0)
//ssd1306.c,70 :: 		data_value[0] = control_byte;
	R2 <4> <- addr(OLED_write_data_value_L0)   (midx: 0)
   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//ssd1306.c,71 :: 		data_value[1] = value;
	R2 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	[R2] <1> <- R0   (midx: 0)
//ssd1306.c,73 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//ssd1306.c,74 :: 		I2C1_Write(SSD1306_I2C_Address, data_value, 2, END_MODE_STOP);
	R2 <4> <- addr(OLED_write_data_value_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R1 <4> <- R2   (midx: 0)
	R2 <4> <- 2   (midx: 0)
	R0 <1> <- 60   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
  end
   (midx: 0)
_OLED_init:
  begin   (midx: 0)
//ssd1306.c,5 :: 		void OLED_init()
_OLED_init:
  begin   (midx: 0)
//ssd1306.c,7 :: 		GPIO_Clk_Enable(&GPIOA_BASE);
	R0 <4> <- #GPIOA_BASE   (midx: 0)
	CALL _GPIO_Clk_Enable   (midx: 0)
//ssd1306.c,11 :: 		(_GPIO_CFG_MODE_OUTPUT | _GPIO_CFG_SPEED_MAX | _GPIO_CFG_OTYPE_PP));
	R2 <4> <- 524308   (midx: 0)
//ssd1306.c,10 :: 		(_GPIO_PINMASK_8 | _GPIO_PINMASK_9),
	R1 <2> <- 768   (midx: 0)
//ssd1306.c,9 :: 		GPIO_Config(&GPIOA_BASE,
	R0 <4> <- #GPIOA_BASE   (midx: 0)
//ssd1306.c,11 :: 		(_GPIO_CFG_MODE_OUTPUT | _GPIO_CFG_SPEED_MAX | _GPIO_CFG_OTYPE_PP));
	CALL _GPIO_Config   (midx: 0)
//ssd1306.c,13 :: 		OLED_SA0 = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(GPIOA_ODRbits+0)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//ssd1306.c,15 :: 		OLED_reset_sequence();
	CALL _OLED_reset_sequence   (midx: 0)
//ssd1306.c,17 :: 		I2C1_Init_Advanced(400000, &_GPIO_MODULE_I2C1_PB89);
	R1 <4> <- #__GPIO_MODULE_I2C1_PB89   (midx: 0)
	R0 <4> <- 400000   (midx: 0)
	CALL _I2C1_Init_Advanced   (midx: 0)
//ssd1306.c,18 :: 		delay_ms(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ssd1306.c,19 :: 		I2C_Set_Active(&I2C1_Start, &I2C1_Read, &I2C1_Write);
	R2 <4> <- #_I2C1_Write   (midx: 0)
	R1 <4> <- #_I2C1_Read   (midx: 0)
	R0 <4> <- #_I2C1_Start   (midx: 0)
	CALL _I2C_Set_Active   (midx: 0)
//ssd1306.c,21 :: 		OLED_write((Set_Display_ON_or_OFF_CMD | Display_OFF), CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 174   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,22 :: 		OLED_write(Set_Multiplex_Ratio_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 168   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,23 :: 		OLED_write(0x3F, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 63   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,24 :: 		OLED_write(Set_Display_Offset_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 211   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,25 :: 		OLED_write(0x00, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,26 :: 		OLED_write(Set_Display_Start_Line_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 64   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,27 :: 		OLED_write((Set_Segment_Remap_CMD | Column_Address_0_Mapped_to_SEG127), CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 161   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,28 :: 		OLED_write((Set_COM_Output_Scan_Direction_CMD | Scan_from_COM63_to_0), CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 200   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,29 :: 		OLED_write(Set_Common_HW_Config_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 218   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,30 :: 		OLED_write(0x12, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 18   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,31 :: 		OLED_write(Set_Contrast_Control_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 129   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,32 :: 		OLED_write(0xFF, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 255   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,33 :: 		OLED_write(Set_Entire_Display_ON_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 164   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,34 :: 		OLED_write(Set_Normal_or_Inverse_Display_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 166   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,35 :: 		OLED_write(Set_Display_Clock_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 213   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,36 :: 		OLED_write(0x80, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 128   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,37 :: 		OLED_write(Set_Pre_charge_Period_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 217   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,38 :: 		OLED_write(0x25, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 37   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,39 :: 		OLED_write(Set_VCOMH_Level_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 219   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,40 :: 		OLED_write(0x20, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 32   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,41 :: 		OLED_write(Set_Page_Address_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 34   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,42 :: 		OLED_write(0x00, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,43 :: 		OLED_write(0x07, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 7   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,44 :: 		OLED_write(Set_Page_Start_Address_CMD , CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 176   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,45 :: 		OLED_write(Set_Higher_Column_Start_Address_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 16   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,46 :: 		OLED_write(Set_Lower_Column_Start_Address_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,47 :: 		OLED_write(Set_Memory_Addressing_Mode_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 32   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,48 :: 		OLED_write(0x02, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 2   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,49 :: 		OLED_write(Set_Charge_Pump_CMD, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 141   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,50 :: 		OLED_write(0x14, CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 20   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,51 :: 		OLED_write((Set_Display_ON_or_OFF_CMD | Display_ON), CMD);
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 175   (midx: 0)
	CALL _OLED_write   (midx: 0)
  end
   (midx: 0)
_OLED_gotoxy:
  begin   (midx: 0)
//ssd1306.c,78 :: 		void OLED_gotoxy(unsigned char x_pos, unsigned char y_pos)
_OLED_gotoxy:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R10 <1> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,80 :: 		OLED_write((Set_Page_Start_Address_CMD + y_pos), CMD);
   (midx: 0)
	R2 <2> <-  176 + R1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- R2   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,81 :: 		OLED_write(((x_pos & 0x0F) | Set_Lower_Column_Start_Address_CMD), CMD);
	R2 <1> <-  R10 & 15   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- R2   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,82 :: 		OLED_write((((x_pos & 0xF0) >> 0x04) | Set_Higher_Column_Start_Address_CMD), CMD);
   (midx: 0)
	R2 <1> <-  R10 & 240   (midx: 0)
	R2 <1> <-  R2 shr 4   (midx: 0)
	R2 <1> <-  R2 | 16   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- R2   (midx: 0)
	CALL _OLED_write   (midx: 0)
  end
   (midx: 0)
_OLED_fill:
  begin   (midx: 0)
//ssd1306.c,86 :: 		void OLED_fill(unsigned char bmp_data)
_OLED_fill:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
//ssd1306.c,88 :: 		unsigned char page = 0x00;
   (midx: 0)
//ssd1306.c,89 :: 		unsigned char x_value = 0x00;
   (midx: 0)
//ssd1306.c,93 :: 		data_value[0] = DAT;
	R2 <4> <- addr(OLED_fill_data_value_L0)   (midx: 0)
	R1 <1> <- 96   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//ssd1306.c,95 :: 		for(x_value = 1; x_value < (x_max + 1); x_value++)
   (midx: 0)
   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R2 <1> <- R2   (midx: 0)
5:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R2 >= 129) then goto 6   (midx: 0)
//ssd1306.c,97 :: 		data_value[x_value] = bmp_data;
   (midx: 0)
	R1 <4> <- addr(OLED_fill_data_value_L0)   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	[R1] <1> <- R0   (midx: 0)
//ssd1306.c,95 :: 		for(x_value = 1; x_value < (x_max + 1); x_value++)
	R2 <1> <-  R2 + 1   (midx: 0)
	R2 <1> <- R2   (midx: 0)
//ssd1306.c,98 :: 		}
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R2 <1> <- R2   (midx: 0)
	goto	5   (midx: 0)
6:   (midx: 0)
//ssd1306.c,100 :: 		for(page = 0; page < y_max; page++)
   (midx: 0)
   (midx: 0)
	R11 <1> <- 0   (midx: 0)
	R11 <1> <- R11   (midx: 0)
8:   (midx: 0)
   (midx: 0)
	if ( R11 >= 8) then goto 9   (midx: 0)
//ssd1306.c,102 :: 		OLED_gotoxy(x_min, page);
	R1 <1> <- R11   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,104 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//ssd1306.c,105 :: 		I2C1_Write(SSD1306_I2C_Address, data_value, (1 + x_max), END_MODE_STOP);
	R1 <4> <- addr(OLED_fill_data_value_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R2 <4> <- 129   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <1> <- 60   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
//ssd1306.c,100 :: 		for(page = 0; page < y_max; page++)
	R11 <1> <-  R11 + 1   (midx: 0)
	R11 <1> <- R11   (midx: 0)
//ssd1306.c,106 :: 		}
   (midx: 0)
	R11 <1> <- R11   (midx: 0)
	goto	8   (midx: 0)
9:   (midx: 0)
  end
   (midx: 0)
_OLED_print_Image:
  begin   (midx: 0)
//ssd1306.c,110 :: 		void OLED_print_Image(const unsigned char *bmp, unsigned char pixel)
_OLED_print_Image:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,112 :: 		unsigned char page = 0;
   (midx: 0)
//ssd1306.c,113 :: 		unsigned char x_value = 0x00;
   (midx: 0)
//ssd1306.c,117 :: 		data_value[0] = DAT;
	R3 <4> <- addr(OLED_print_Image_data_value_L0)   (midx: 0)
	R2 <1> <- 96   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ssd1306.c,119 :: 		for(x_value = 1; x_value < (x_max + 1); x_value++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <1> <- 1   (midx: 0)
	R1 <1> <- PUSH(R1)   (midx: 254)
	R1 <4> <- R0   (midx: 0)
	R4 <1> <- R4   (midx: 0)
	R0 <1> <- POP   (midx: 254)
11:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 >= 129) then goto 12   (midx: 0)
//ssd1306.c,121 :: 		data_value[x_value] = (bmp[(x_value - 1)] ^ pixel);
   (midx: 0)
	R2 <4> <- addr(OLED_print_Image_data_value_L0)   (midx: 0)
	R3 <4> <-  R2 + R4   (midx: 2)
	R2 <2> <-  R4 - 1   (midx: 0)
	R2 <4> <-  R1 + R2   (midx: 2)
	R2 <1> <- *R2   (midx: 0)
	R2 <1> <-  R2 ^ R0   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ssd1306.c,119 :: 		for(x_value = 1; x_value < (x_max + 1); x_value++)
	R4 <1> <-  R4 + 1   (midx: 0)
	R4 <1> <- R4   (midx: 0)
//ssd1306.c,122 :: 		}
   (midx: 0)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R4 <1> <- R4   (midx: 0)
	goto	11   (midx: 0)
12:   (midx: 0)
//ssd1306.c,124 :: 		if(pixel != OFF)
   (midx: 0)
	if ( R0 = 0) then goto 14   (midx: 0)
//ssd1306.c,127 :: 		}
	goto	15   (midx: 0)
14:   (midx: 0)
//ssd1306.c,131 :: 		}
15:   (midx: 0)
//ssd1306.c,133 :: 		for(page = 0; page < y_max; page++)
   (midx: 0)
   (midx: 0)
	R11 <1> <- 0   (midx: 0)
	R11 <1> <- R11   (midx: 0)
16:   (midx: 0)
   (midx: 0)
	if ( R11 >= 8) then goto 17   (midx: 0)
//ssd1306.c,135 :: 		OLED_gotoxy(x_min, page);
	R1 <1> <- R11   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,137 :: 		I2C1_Start();
	CALL _I2C1_Start   (midx: 0)
//ssd1306.c,138 :: 		I2C1_Write(SSD1306_I2C_Address, data_value, (1 + x_max), END_MODE_STOP);
	R2 <4> <- addr(OLED_print_Image_data_value_L0)   (midx: 0)
	R3 <4> <- 1   (midx: 0)
	R1 <4> <- R2   (midx: 0)
	R2 <4> <- 129   (midx: 0)
	R0 <1> <- 60   (midx: 0)
	CALL _I2C1_Write   (midx: 0)
//ssd1306.c,133 :: 		for(page = 0; page < y_max; page++)
	R11 <1> <-  R11 + 1   (midx: 0)
	R11 <1> <- R11   (midx: 0)
//ssd1306.c,139 :: 		}
   (midx: 0)
	R11 <1> <- R11   (midx: 0)
	goto	16   (midx: 0)
17:   (midx: 0)
  end
   (midx: 0)
_OLED_clear_screen:
  begin   (midx: 0)
//ssd1306.c,143 :: 		void OLED_clear_screen()
_OLED_clear_screen:
  begin   (midx: 0)
//ssd1306.c,145 :: 		OLED_fill(0x00);
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_fill   (midx: 0)
  end
   (midx: 0)
_OLED_clear_buffer:
  begin   (midx: 0)
//ssd1306.c,149 :: 		void OLED_clear_buffer()
_OLED_clear_buffer:
  begin   (midx: 0)
//ssd1306.c,151 :: 		unsigned int s = 0x0000;
   (midx: 0)
//ssd1306.c,153 :: 		for(s = 0; s < buffer_size; s++)
   (midx: 0)
   (midx: 0)
	R2 <2> <- 0   (midx: 0)
	R2 <2> <- R2   (midx: 0)
19:   (midx: 0)
   (midx: 0)
	if ( R2 >= 1024) then goto 20   (midx: 1)
//ssd1306.c,155 :: 		buffer[s] = 0x00;
	R0 <4> <- #_buffer   (midx: 0)
	R1 <4> <-  R0 + R2   (midx: 2)
	R0 <1> <- 0   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//ssd1306.c,153 :: 		for(s = 0; s < buffer_size; s++)
	R2 <2> <-  R2 + 1   (midx: 1)
	R2 <2> <- R2   (midx: 0)
//ssd1306.c,156 :: 		}
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	goto	19   (midx: 0)
20:   (midx: 0)
  end
   (midx: 0)
_OLED_cursor:
  begin   (midx: 0)
//ssd1306.c,160 :: 		void OLED_cursor(unsigned char x_pos, unsigned char y_pos)
_OLED_cursor:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R11 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,162 :: 		unsigned char s = 0x00;
   (midx: 0)
//ssd1306.c,164 :: 		if(y_pos != 0x00)
	if ( R11 = 0) then goto 22   (midx: 0)
//ssd1306.c,166 :: 		if(x_pos == 1)
   (midx: 0)
	if ( R0 != 1) then goto 23   (midx: 0)
//ssd1306.c,168 :: 		OLED_gotoxy(0x00, (y_pos + 0x02));
   (midx: 0)
	R2 <2> <-  R11 + 2   (midx: 0)
	R1 <1> <- R2   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,169 :: 		}
	goto	24   (midx: 0)
23:   (midx: 0)
//ssd1306.c,172 :: 		OLED_gotoxy((0x50 + ((x_pos - 0x02) * 0x06)), (y_pos + 0x02));
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <-  R11 + 2   (midx: 0)
   (midx: 0)
	R3 <2> <-  R0 - 2   (midx: 0)
	R2 <2> <- 6   (midx: 0)
	R2 <2> <-  R3 * R2   (midx: 5)
	R2 <2> <-  80 + R2   (midx: 5)
	R1 <1> <- R4   (midx: 0)
	R0 <1> <- R2   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,173 :: 		}
24:   (midx: 0)
//ssd1306.c,175 :: 		for(s = 0x00; s < 0x06; s++)
   (midx: 0)
   (midx: 0)
	R10 <1> <- 0   (midx: 0)
	R10 <1> <- R10   (midx: 0)
25:   (midx: 0)
   (midx: 0)
	if ( R10 >= 6) then goto 26   (midx: 0)
//ssd1306.c,177 :: 		OLED_write(0xFF, DAT);
	R1 <1> <- 96   (midx: 0)
	R0 <1> <- 255   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,175 :: 		for(s = 0x00; s < 0x06; s++)
	R10 <1> <-  R10 + 1   (midx: 0)
	R10 <1> <- R10   (midx: 0)
//ssd1306.c,178 :: 		}
   (midx: 0)
	R10 <1> <- R10   (midx: 0)
	goto	25   (midx: 0)
26:   (midx: 0)
//ssd1306.c,179 :: 		}
22:   (midx: 0)
  end
   (midx: 0)
_OLED_draw_bitmap:
  begin   (midx: 0)
//ssd1306.c,183 :: 		void OLED_draw_bitmap(unsigned char xb, unsigned char yb, unsigned char xe, unsigned char ye, unsigned char *bmp_img)
_OLED_draw_bitmap:
  begin   (midx: 0)
   (midx: 0)
	FARG_OLED_draw_bitmap_xb <1> <- R0   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	FARG_OLED_draw_bitmap_xe <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_OLED_draw_bitmap_ye <1> <- R3   (midx: 0)
   (midx: 0)
	R4 <4> <- FARG_OLED_draw_bitmap_bmp_img   (midx: 0)
	FARG_OLED_draw_bitmap_bmp_img <4> <- R4   (midx: 0)
//ssd1306.c,185 :: 		unsigned int s = 0x00;
   (midx: 0)
	R4 <4> <- 0   (midx: 0)
	OLED_draw_bitmap_s_L0 <-initialize(0)   (midx: 0)
//ssd1306.c,186 :: 		unsigned char x_pos = 0x00;
   (midx: 0)
//ssd1306.c,187 :: 		unsigned char y_pos = 0x00;
   (midx: 0)
//ssd1306.c,189 :: 		for(y_pos = yb; y_pos <= ye; y_pos++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R11 <1> <- R1   (midx: 0)
	R11 <1> <- R11   (midx: 0)
28:   (midx: 0)
   (midx: 0)
	R4 <1> <- FARG_OLED_draw_bitmap_ye   (midx: 0)
	if ( R11 > R4) then goto 29   (midx: 0)
//ssd1306.c,191 :: 		OLED_gotoxy(xb, y_pos);
	R1 <1> <- R11   (midx: 0)
	R0 <1> <- FARG_OLED_draw_bitmap_xb   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,192 :: 		for(x_pos = xb; x_pos <= xe; x_pos++)
	R4 <1> <- FARG_OLED_draw_bitmap_xb   (midx: 0)
   (midx: 0)
	OLED_draw_bitmap_x_pos_L0 <1> <- R4   (midx: 0)
	R11 <1> <- R11   (midx: 0)
31:   (midx: 0)
   (midx: 0)
	R5 <1> <- FARG_OLED_draw_bitmap_xe   (midx: 0)
	R4 <1> <- OLED_draw_bitmap_x_pos_L0   (midx: 0)
	if ( R4 > R5) then goto 32   (midx: 0)
//ssd1306.c,194 :: 		OLED_write(bmp_img[s++], DAT);
	R5 <4> <- OLED_draw_bitmap_s_L0   (midx: 0)
	R4 <4> <- FARG_OLED_draw_bitmap_bmp_img   (midx: 0)
	R4 <4> <-  R4 + R5   (midx: 2)
	R4 <1> <- *R4   (midx: 0)
	R4 <1> <- R4   (midx: 0)
	R1 <1> <- 96   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_write   (midx: 0)
	R4 <2> <- OLED_draw_bitmap_s_L0   (midx: 0)
	R4 <2> <-  R4 + 1   (midx: 1)
	OLED_draw_bitmap_s_L0 <2> <- R4   (midx: 0)
//ssd1306.c,192 :: 		for(x_pos = xb; x_pos <= xe; x_pos++)
	R4 <1> <- OLED_draw_bitmap_x_pos_L0   (midx: 0)
	R4 <1> <-  R4 + 1   (midx: 0)
	OLED_draw_bitmap_x_pos_L0 <1> <- R4   (midx: 0)
//ssd1306.c,195 :: 		}
	R11 <1> <- R11   (midx: 0)
	goto	31   (midx: 0)
32:   (midx: 0)
//ssd1306.c,189 :: 		for(y_pos = yb; y_pos <= ye; y_pos++)
	R11 <1> <-  R11 + 1   (midx: 0)
	R11 <1> <- R11   (midx: 0)
//ssd1306.c,196 :: 		}
   (midx: 0)
	R11 <1> <- R11   (midx: 0)
	goto	28   (midx: 0)
29:   (midx: 0)
  end
   (midx: 0)
_OLED_print_char:
  begin   (midx: 0)
//ssd1306.c,200 :: 		void OLED_print_char(unsigned char x_pos, unsigned char y_pos, unsigned char ch)
_OLED_print_char:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,202 :: 		unsigned char chr = 0x00;
   (midx: 0)
//ssd1306.c,203 :: 		unsigned char s = 0x00;
   (midx: 0)
//ssd1306.c,205 :: 		chr = (ch - 0x20);
   (midx: 0)
	R3 <2> <-  R2 - 32   (midx: 0)
   (midx: 0)
	R11 <1> <- R3   (midx: 0)
//ssd1306.c,207 :: 		if(x_pos > (x_max - 0x06))
	if ( R0 <= 122) then goto 139   (midx: 0)
//ssd1306.c,209 :: 		x_pos = 0x00;
	R0 <1> <- 0   (midx: 0)
//ssd1306.c,210 :: 		y_pos++;
	R1 <1> <-  R1 + 1   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <1> <- R1   (midx: 0)
//ssd1306.c,211 :: 		}
	goto	34   (midx: 0)
139:   (midx: 0)
//ssd1306.c,207 :: 		if(x_pos > (x_max - 0x06))
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
//ssd1306.c,211 :: 		}
34:   (midx: 0)
//ssd1306.c,212 :: 		OLED_gotoxy(x_pos, y_pos);
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,214 :: 		for(s = 0x00; s < 0x06; s++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	R10 <1> <- R11   (midx: 0)
	R11 <1> <- R0   (midx: 0)
35:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R11 >= 6) then goto 36   (midx: 0)
//ssd1306.c,216 :: 		OLED_write(font_regular[chr][s], DAT);
   (midx: 0)
	R3 <4> <- 6   (midx: 0)
	R4 <4> <-  R3 * R10   (midx: 2)
	R3 <4> <- #_font_regular   (midx: 0)
	R3 <4> <-  R3 + R4   (midx: 2)
	R3 <4> <-  R3 + R11   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R1 <1> <- 96   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_write   (midx: 0)
//ssd1306.c,214 :: 		for(s = 0x00; s < 0x06; s++)
	R11 <1> <-  R11 + 1   (midx: 0)
	R11 <1> <- R11   (midx: 0)
//ssd1306.c,217 :: 		}
   (midx: 0)
   (midx: 0)
	R10 <1> <- R10   (midx: 0)
	R11 <1> <- R11   (midx: 0)
	goto	35   (midx: 0)
36:   (midx: 0)
  end
   (midx: 0)
_OLED_print_string:
  begin   (midx: 0)
//ssd1306.c,221 :: 		void OLED_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch)
_OLED_print_string:
  begin   (midx: 0)
//ssd1306.c,223 :: 		unsigned char s = 0x00;
   (midx: 0)
//ssd1306.c,221 :: 		void OLED_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch)
   (midx: 0)
   (midx: 0)
	FARG_OLED_print_string_y_pos <1> <- R1   (midx: 0)
	R1 <1> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,223 :: 		unsigned char s = 0x00;
   (midx: 0)
//ssd1306.c,221 :: 		void OLED_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch)
	R0 <4> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,223 :: 		unsigned char s = 0x00;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <-initialize(0)   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R12 <1> <- R2   (midx: 0)
//ssd1306.c,225 :: 		do
38:   (midx: 0)
//ssd1306.c,227 :: 		OLED_print_char(x_pos, y_pos, ch[s++]);
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 + R12   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R1 <1> <- PUSH(R1)   (midx: 255)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R3   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	R1 <1> <- FARG_OLED_print_string_y_pos   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
	R1 <1> <- POP   (midx: 255)
   (midx: 0)
	R4 <1> <-  R12 + 1   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- R4   (midx: 0)
//ssd1306.c,228 :: 		x_pos += 0x06;
	R3 <2> <-  R1 + 6   (midx: 0)
   (midx: 0)
	R1 <1> <- R3   (midx: 0)
//ssd1306.c,229 :: 		}while((ch[s] >= 0x20) && (ch[s] <= 0x7F));
	R3 <4> <-  R0 + R4   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 < 32) then goto 142   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 + R2   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	if ( R3 > 127) then goto 141   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R12 <1> <- R2   (midx: 0)
	goto	38   (midx: 0)
142:   (midx: 0)
141:   (midx: 0)
  end
   (midx: 0)
_OLED_print_chr:
  begin   (midx: 0)
//ssd1306.c,233 :: 		void OLED_print_chr(unsigned char x_pos, unsigned char y_pos, signed int value)
_OLED_print_chr:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R12 <1> <- R0   (midx: 0)
	R0 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,235 :: 		unsigned char ch = 0x00;
   (midx: 0)
//ssd1306.c,237 :: 		if(value < 0x00)
	if ( R1 >= 0) then goto 43   (midx: 5)
//ssd1306.c,239 :: 		OLED_print_char(x_pos, y_pos, '-');
	R1 <2> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- 45   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R12   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <2> <- POP   (midx: 255)
//ssd1306.c,240 :: 		value = -value;
	R1 <2> <-  0 - R1   (midx: 5)
	R1 <2> <- R1   (midx: 0)
//ssd1306.c,241 :: 		}
	R1 <2> <- R1   (midx: 0)
	goto	44   (midx: 0)
43:   (midx: 0)
//ssd1306.c,244 :: 		OLED_print_char(x_pos, y_pos,' ');
	R1 <2> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R12   (midx: 0)
   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <2> <- POP   (midx: 255)
	R1 <2> <- R1   (midx: 0)
//ssd1306.c,245 :: 		}
44:   (midx: 0)
//ssd1306.c,247 :: 		if((value > 99) && (value <= 999))
   (midx: 0)
	if ( R1 <= 99) then goto 147   (midx: 5)
	R3 <4> <- 999   (midx: 0)
	if ( R1 > R3) then goto 146   (midx: 5)
145:   (midx: 0)
//ssd1306.c,249 :: 		ch = (value / 100);
	R3 <2> <- 100   (midx: 0)
	R3 <2> <-  R1 / R3   (midx: 5)
//ssd1306.c,250 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R1 <2> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <2> <- POP   (midx: 255)
//ssd1306.c,251 :: 		ch = ((value % 100) / 10);
	R3 <2> <- 100   (midx: 0)
	R4 <2> <-  R1 mod R3   (midx: 5)
	R3 <2> <- 10   (midx: 0)
	R3 <2> <-  R4 / R3   (midx: 5)
//ssd1306.c,252 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 12   (midx: 0)
	R1 <2> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <2> <- POP   (midx: 255)
//ssd1306.c,253 :: 		ch = (value % 10);
	R4 <2> <- 10   (midx: 0)
   (midx: 0)
	R3 <2> <-  R1 mod R4   (midx: 5)
//ssd1306.c,254 :: 		OLED_print_char((x_pos + 18), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
   (midx: 0)
	R3 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- R4   (midx: 0)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,255 :: 		}
	goto	48   (midx: 0)
//ssd1306.c,247 :: 		if((value > 99) && (value <= 999))
147:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
146:   (midx: 0)
//ssd1306.c,256 :: 		else if((value > 9) && (value <= 99))
	if ( R1 <= 9) then goto 149   (midx: 5)
	if ( R1 > 99) then goto 148   (midx: 5)
144:   (midx: 0)
//ssd1306.c,258 :: 		ch = ((value % 100) / 10);
	R3 <2> <- 100   (midx: 0)
	R4 <2> <-  R1 mod R3   (midx: 5)
	R3 <2> <- 10   (midx: 0)
	R3 <2> <-  R4 / R3   (midx: 5)
//ssd1306.c,259 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R1 <2> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <2> <- POP   (midx: 255)
//ssd1306.c,260 :: 		ch = (value % 10);
	R4 <2> <- 10   (midx: 0)
   (midx: 0)
	R3 <2> <-  R1 mod R4   (midx: 5)
//ssd1306.c,261 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 12   (midx: 0)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
//ssd1306.c,262 :: 		OLED_print_char((x_pos + 18), y_pos , 32);
   (midx: 0)
	R3 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- 32   (midx: 0)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,263 :: 		}
	goto	52   (midx: 0)
//ssd1306.c,256 :: 		else if((value > 9) && (value <= 99))
149:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
148:   (midx: 0)
//ssd1306.c,264 :: 		else if((value >= 0) && (value <= 9))
	if ( R1 < 0) then goto 151   (midx: 5)
	if ( R1 > 9) then goto 150   (midx: 5)
143:   (midx: 0)
//ssd1306.c,266 :: 		ch = (value % 10);
	R4 <2> <- 10   (midx: 0)
   (midx: 0)
	R3 <2> <-  R1 mod R4   (midx: 5)
//ssd1306.c,267 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
//ssd1306.c,268 :: 		OLED_print_char((x_pos + 12), y_pos , 32);
	R3 <2> <-  R12 + 12   (midx: 0)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <1> <- POP   (midx: 255)
//ssd1306.c,269 :: 		OLED_print_char((x_pos + 18), y_pos , 32);
   (midx: 0)
	R3 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- 32   (midx: 0)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,264 :: 		else if((value >= 0) && (value <= 9))
151:   (midx: 0)
150:   (midx: 0)
//ssd1306.c,270 :: 		}
52:   (midx: 0)
48:   (midx: 0)
  end
   (midx: 0)
_OLED_print_int:
  begin   (midx: 0)
//ssd1306.c,274 :: 		void OLED_print_int(unsigned char x_pos, unsigned char y_pos, signed long value)
_OLED_print_int:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R12 <1> <- R0   (midx: 0)
	R0 <4> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_OLED_print_int_y_pos <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,276 :: 		unsigned char ch = 0x00;
   (midx: 0)
//ssd1306.c,278 :: 		if(value < 0)
	if ( R0 >= 0) then goto 56   (midx: 6)
//ssd1306.c,280 :: 		OLED_print_char(x_pos, y_pos, '-');
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- 45   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R12   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,281 :: 		value = -value;
   (midx: 0)
	R3 <4> <-  0 - R0   (midx: 6)
   (midx: 0)
	R1 <4> <- R3   (midx: 0)
//ssd1306.c,282 :: 		}
   (midx: 0)
	R0 <4> <- R1   (midx: 0)
	goto	57   (midx: 0)
56:   (midx: 0)
//ssd1306.c,285 :: 		OLED_print_char(x_pos, y_pos,' ');
   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R12   (midx: 0)
   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
	R0 <4> <- R0   (midx: 0)
//ssd1306.c,286 :: 		}
57:   (midx: 0)
//ssd1306.c,288 :: 		if(value > 9999)
   (midx: 0)
	R3 <4> <- 9999   (midx: 0)
	if ( R0 <= R3) then goto 58   (midx: 6)
//ssd1306.c,290 :: 		ch = (value / 10000);
	R3 <4> <- 10000   (midx: 0)
	R3 <4> <-  R0 / R3   (midx: 6)
//ssd1306.c,291 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,293 :: 		ch = ((value % 10000)/ 1000);
	R3 <4> <- 10000   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 1000   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,294 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 12   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,296 :: 		ch = ((value % 1000) / 100);
	R3 <4> <- 1000   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 100   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,297 :: 		OLED_print_char((x_pos + 18), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 18   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,299 :: 		ch = ((value % 100) / 10);
	R3 <4> <- 100   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 10   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,300 :: 		OLED_print_char((x_pos + 24), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 24   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,302 :: 		ch = (value % 10);
	R4 <4> <- 10   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 mod R4   (midx: 6)
//ssd1306.c,303 :: 		OLED_print_char((x_pos + 30), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
   (midx: 0)
	R3 <2> <-  R12 + 30   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,304 :: 		}
	goto	59   (midx: 0)
58:   (midx: 0)
//ssd1306.c,306 :: 		else if((value > 999) && (value <= 9999))
   (midx: 0)
   (midx: 0)
	R3 <4> <- 999   (midx: 0)
	if ( R0 <= R3) then goto 156   (midx: 6)
	R3 <4> <- 9999   (midx: 0)
	if ( R0 > R3) then goto 155   (midx: 6)
154:   (midx: 0)
//ssd1306.c,308 :: 		ch = ((value % 10000)/ 1000);
	R3 <4> <- 10000   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 1000   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,309 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,311 :: 		ch = ((value % 1000) / 100);
	R3 <4> <- 1000   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 100   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,312 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 12   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,314 :: 		ch = ((value % 100) / 10);
	R3 <4> <- 100   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 10   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,315 :: 		OLED_print_char((x_pos + 18), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 18   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,317 :: 		ch = (value % 10);
	R4 <4> <- 10   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 mod R4   (midx: 6)
//ssd1306.c,318 :: 		OLED_print_char((x_pos + 24), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 24   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,319 :: 		OLED_print_char((x_pos + 30), y_pos , 32);
   (midx: 0)
	R3 <2> <-  R12 + 30   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,320 :: 		}
	goto	63   (midx: 0)
//ssd1306.c,306 :: 		else if((value > 999) && (value <= 9999))
156:   (midx: 0)
   (midx: 0)
   (midx: 0)
155:   (midx: 0)
//ssd1306.c,321 :: 		else if((value > 99) && (value <= 999))
	if ( R0 <= 99) then goto 158   (midx: 6)
	R3 <4> <- 999   (midx: 0)
	if ( R0 > R3) then goto 157   (midx: 6)
153:   (midx: 0)
//ssd1306.c,323 :: 		ch = ((value % 1000) / 100);
	R3 <4> <- 1000   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 100   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,324 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,326 :: 		ch = ((value % 100) / 10);
	R3 <4> <- 100   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 10   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,327 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 12   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,329 :: 		ch = (value % 10);
	R4 <4> <- 10   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 mod R4   (midx: 6)
//ssd1306.c,330 :: 		OLED_print_char((x_pos + 18), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,331 :: 		OLED_print_char((x_pos + 24), y_pos , 32);
	R3 <2> <-  R12 + 24   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,332 :: 		OLED_print_char((x_pos + 30), y_pos , 32);
   (midx: 0)
	R3 <2> <-  R12 + 30   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,333 :: 		}
	goto	67   (midx: 0)
//ssd1306.c,321 :: 		else if((value > 99) && (value <= 999))
158:   (midx: 0)
   (midx: 0)
   (midx: 0)
157:   (midx: 0)
//ssd1306.c,334 :: 		else if((value > 9) && (value <= 99))
	if ( R0 <= 9) then goto 160   (midx: 6)
	if ( R0 > 99) then goto 159   (midx: 6)
152:   (midx: 0)
//ssd1306.c,336 :: 		ch = ((value % 100) / 10);
	R3 <4> <- 100   (midx: 0)
	R4 <4> <-  R0 mod R3   (midx: 6)
	R3 <4> <- 10   (midx: 0)
	R3 <4> <-  R4 / R3   (midx: 6)
//ssd1306.c,337 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//ssd1306.c,339 :: 		ch = (value % 10);
	R4 <4> <- 10   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 mod R4   (midx: 6)
//ssd1306.c,340 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 12   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,342 :: 		OLED_print_char((x_pos + 18), y_pos , 32);
	R3 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,343 :: 		OLED_print_char((x_pos + 24), y_pos , 32);
	R3 <2> <-  R12 + 24   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,344 :: 		OLED_print_char((x_pos + 30), y_pos , 32);
   (midx: 0)
	R3 <2> <-  R12 + 30   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,345 :: 		}
	goto	71   (midx: 0)
//ssd1306.c,334 :: 		else if((value > 9) && (value <= 99))
160:   (midx: 0)
   (midx: 0)
   (midx: 0)
159:   (midx: 0)
//ssd1306.c,348 :: 		ch = (value % 10);
	R4 <4> <- 10   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 mod R4   (midx: 6)
//ssd1306.c,349 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R3 <2> <- R3   (midx: 0)
	R4 <2> <-  48 + R3   (midx: 0)
	R3 <2> <-  R12 + 6   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,350 :: 		OLED_print_char((x_pos + 12), y_pos , 32);
	R3 <2> <-  R12 + 12   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,351 :: 		OLED_print_char((x_pos + 18), y_pos , 32);
	R3 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,352 :: 		OLED_print_char((x_pos + 24), y_pos , 32);
	R3 <2> <-  R12 + 24   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,353 :: 		OLED_print_char((x_pos + 30), y_pos , 32);
   (midx: 0)
	R3 <2> <-  R12 + 30   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_int_y_pos   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,354 :: 		}
71:   (midx: 0)
67:   (midx: 0)
63:   (midx: 0)
59:   (midx: 0)
  end
   (midx: 0)
_OLED_print_decimal:
  begin   (midx: 0)
//ssd1306.c,358 :: 		void OLED_print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points)
_OLED_print_decimal:
  begin   (midx: 0)
   (midx: 0)
	R12 <1> <- R0   (midx: 0)
	FARG_OLED_print_decimal_y_pos <1> <- R1   (midx: 0)
	FARG_OLED_print_decimal_value <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_OLED_print_decimal_points <1> <- R3   (midx: 0)
   (midx: 0)
//ssd1306.c,360 :: 		unsigned char ch = 0x00;
   (midx: 0)
//ssd1306.c,362 :: 		OLED_print_char(x_pos, y_pos, '.');
	R2 <1> <- 46   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R12   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,364 :: 		ch = (value / 1000);
	R5 <2> <- FARG_OLED_print_decimal_value   (midx: 0)
	R4 <2> <- 1000   (midx: 0)
	R4 <2> <-  R5 / R4   (midx: 1)
//ssd1306.c,365 :: 		OLED_print_char((x_pos + 6), y_pos , (48 + ch));
	R4 <2> <- R4   (midx: 0)
	R5 <2> <-  48 + R4   (midx: 0)
	R4 <2> <-  R12 + 6   (midx: 0)
	R2 <1> <- R5   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,367 :: 		if(points > 1)
	R4 <1> <- FARG_OLED_print_decimal_points   (midx: 0)
	if ( R4 <= 1) then goto 72   (midx: 0)
//ssd1306.c,369 :: 		ch = ((value % 1000) / 100);
	R6 <2> <- FARG_OLED_print_decimal_value   (midx: 0)
	R4 <2> <- 1000   (midx: 0)
	R5 <2> <-  R6 mod R4   (midx: 1)
	R4 <2> <- 100   (midx: 0)
	R4 <2> <-  R5 / R4   (midx: 1)
//ssd1306.c,370 :: 		OLED_print_char((x_pos + 12), y_pos , (48 + ch));
	R4 <2> <- R4   (midx: 0)
	R5 <2> <-  48 + R4   (midx: 0)
	R4 <2> <-  R12 + 12   (midx: 0)
	R2 <1> <- R5   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,371 :: 		OLED_print_char((x_pos + 18), y_pos , 0x20);
	R4 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,373 :: 		if(points > 2)
	R4 <1> <- FARG_OLED_print_decimal_points   (midx: 0)
	if ( R4 <= 2) then goto 73   (midx: 0)
//ssd1306.c,375 :: 		ch = ((value % 100) / 10);
	R6 <2> <- FARG_OLED_print_decimal_value   (midx: 0)
	R4 <2> <- 100   (midx: 0)
	R5 <2> <-  R6 mod R4   (midx: 1)
	R4 <2> <- 10   (midx: 0)
	R4 <2> <-  R5 / R4   (midx: 1)
//ssd1306.c,376 :: 		OLED_print_char((x_pos + 18), y_pos , (48 + ch));
	R4 <2> <- R4   (midx: 0)
	R5 <2> <-  48 + R4   (midx: 0)
	R4 <2> <-  R12 + 18   (midx: 0)
	R2 <1> <- R5   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,377 :: 		OLED_print_char((x_pos + 24), y_pos , 0x20);
	R4 <2> <-  R12 + 24   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,379 :: 		if(points > 3)
	R4 <1> <- FARG_OLED_print_decimal_points   (midx: 0)
	if ( R4 <= 3) then goto 74   (midx: 0)
//ssd1306.c,381 :: 		ch = (value % 10);
	R6 <2> <- FARG_OLED_print_decimal_value   (midx: 0)
	R5 <2> <- 10   (midx: 0)
	R4 <2> <-  R6 mod R5   (midx: 1)
//ssd1306.c,382 :: 		OLED_print_char((x_pos + 24), y_pos , (48 + ch));
	R4 <2> <- R4   (midx: 0)
	R5 <2> <-  48 + R4   (midx: 0)
	R4 <2> <-  R12 + 24   (midx: 0)
	R2 <1> <- R5   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,383 :: 		OLED_print_char((x_pos + 30), y_pos , 0x20);
   (midx: 0)
	R4 <2> <-  R12 + 30   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	R1 <1> <- FARG_OLED_print_decimal_y_pos   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,384 :: 		}
74:   (midx: 0)
//ssd1306.c,385 :: 		}
73:   (midx: 0)
//ssd1306.c,386 :: 		}
72:   (midx: 0)
  end
   (midx: 0)
_OLED_print_float:
  begin   (midx: 0)
//ssd1306.c,390 :: 		void OLED_print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points)
_OLED_print_float:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	S2 <4> <- S0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,392 :: 		signed long tmp = 0x00;
   (midx: 0)
//ssd1306.c,394 :: 		tmp = value;
	S0 <4> <- (type cast)S2   (midx: 0)
	R3 <4> <- S0   (midx: 0)
   (midx: 0)
	R4 <4> <- R3   (midx: 0)
//ssd1306.c,395 :: 		OLED_print_int(x_pos, y_pos, tmp);
	R4 <4> <- PUSH(R4)   (midx: 255)
	R2 <1> <- PUSH(R2)   (midx: 255)
	R1 <1> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <4> <- R3   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _OLED_print_int   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <1> <- POP   (midx: 255)
	R2 <1> <- POP   (midx: 255)
	R4 <4> <- POP   (midx: 255)
//ssd1306.c,396 :: 		tmp = ((value - tmp) * 10000);
   (midx: 0)
	S0 <4> <- (type cast)R4   (midx: 0)
	S1 <4> <-  S2 - S0   (midx: 8)
	R3 <4> <- 1.000000E+004   (midx: 0)
	S0 <4> <- R3   (midx: 0)
	S0 <4> <-  S1 * S0   (midx: 9)
	S0 <4> <- (type cast)S0   (midx: 0)
	R3 <4> <- S0   (midx: 0)
   (midx: 0)
	R4 <4> <- R3   (midx: 0)
//ssd1306.c,398 :: 		if(tmp < 0)
	if ( R3 >= 0) then goto 173   (midx: 6)
//ssd1306.c,400 :: 		tmp = -tmp;
	R4 <4> <-  0 - R4   (midx: 6)
   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R4 <4> <- R4   (midx: 0)
//ssd1306.c,401 :: 		}
	goto	75   (midx: 0)
173:   (midx: 0)
//ssd1306.c,398 :: 		if(tmp < 0)
	R4 <4> <- R4   (midx: 0)
//ssd1306.c,401 :: 		}
75:   (midx: 0)
//ssd1306.c,403 :: 		if((value >= 10000) && (value < 100000))
   (midx: 0)
	R3 <4> <- 1.000000E+004   (midx: 0)
	S0 <4> <- R3   (midx: 0)
	if ( S2 < S0) then goto 166   (midx: 9)
	R3 <4> <- 1.000000E+005   (midx: 0)
	S0 <4> <- R3   (midx: 0)
   (midx: 0)
	if ( S2 >= S0) then goto 165   (midx: 9)
164:   (midx: 0)
//ssd1306.c,405 :: 		OLED_print_decimal((x_pos + 36), y_pos, tmp, points);
   (midx: 0)
	R3 <2> <-  R0 + 36   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <1> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	CALL _OLED_print_decimal   (midx: 0)
//ssd1306.c,406 :: 		}
	goto	79   (midx: 0)
//ssd1306.c,403 :: 		if((value >= 10000) && (value < 100000))
166:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
165:   (midx: 0)
//ssd1306.c,407 :: 		else if((value >= 1000) && (value < 10000))
	R3 <4> <- 1.000000E+003   (midx: 0)
	S0 <4> <- R3   (midx: 0)
	if ( S2 < S0) then goto 168   (midx: 9)
	R3 <4> <- 1.000000E+004   (midx: 0)
	S0 <4> <- R3   (midx: 0)
   (midx: 0)
	if ( S2 >= S0) then goto 167   (midx: 9)
163:   (midx: 0)
//ssd1306.c,409 :: 		OLED_print_decimal((x_pos + 30), y_pos, tmp, points);
   (midx: 0)
	R3 <2> <-  R0 + 30   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <1> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	CALL _OLED_print_decimal   (midx: 0)
//ssd1306.c,410 :: 		}
	goto	83   (midx: 0)
//ssd1306.c,407 :: 		else if((value >= 1000) && (value < 10000))
168:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
167:   (midx: 0)
//ssd1306.c,411 :: 		else if((value >= 100) && (value < 1000))
	R3 <4> <- 1.000000E+002   (midx: 0)
	S0 <4> <- R3   (midx: 0)
	if ( S2 < S0) then goto 170   (midx: 9)
	R3 <4> <- 1.000000E+003   (midx: 0)
	S0 <4> <- R3   (midx: 0)
   (midx: 0)
	if ( S2 >= S0) then goto 169   (midx: 9)
162:   (midx: 0)
//ssd1306.c,413 :: 		OLED_print_decimal((x_pos + 24), y_pos, tmp, points);
   (midx: 0)
	R3 <2> <-  R0 + 24   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <1> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	CALL _OLED_print_decimal   (midx: 0)
//ssd1306.c,414 :: 		}
	goto	87   (midx: 0)
//ssd1306.c,411 :: 		else if((value >= 100) && (value < 1000))
170:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
169:   (midx: 0)
//ssd1306.c,415 :: 		else if((value >= 10) && (value < 100))
	S0 <4> <- 1.000000E+001   (midx: 0)
	if ( S2 < S0) then goto 172   (midx: 9)
	R3 <4> <- 1.000000E+002   (midx: 0)
	S0 <4> <- R3   (midx: 0)
   (midx: 0)
	if ( S2 >= S0) then goto 171   (midx: 9)
161:   (midx: 0)
//ssd1306.c,417 :: 		OLED_print_decimal((x_pos + 18), y_pos, tmp, points);
   (midx: 0)
	R3 <2> <-  R0 + 18   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <1> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	CALL _OLED_print_decimal   (midx: 0)
//ssd1306.c,418 :: 		}
	goto	91   (midx: 0)
//ssd1306.c,415 :: 		else if((value >= 10) && (value < 100))
172:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
171:   (midx: 0)
//ssd1306.c,419 :: 		else if(value < 10)
	S0 <4> <- 1.000000E+001   (midx: 0)
	if ( S2 >= S0) then goto 92   (midx: 9)
//ssd1306.c,421 :: 		OLED_print_decimal((x_pos + 12), y_pos, tmp, points);
	R3 <2> <-  R0 + 12   (midx: 0)
   (midx: 0)
	R1 <1> <- PUSH(R1)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	R3 <1> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	CALL _OLED_print_decimal   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R1 <1> <- POP   (midx: 255)
//ssd1306.c,422 :: 		if(value < 0)
   (midx: 0)
	if ( S2 >= 0.000000E+000) then goto 93   (midx: 9)
//ssd1306.c,424 :: 		OLED_print_char(x_pos, y_pos, '-');
	R2 <1> <- 45   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,425 :: 		}
	goto	94   (midx: 0)
93:   (midx: 0)
//ssd1306.c,428 :: 		OLED_print_char(x_pos, y_pos, ' ');
   (midx: 0)
   (midx: 0)
	R2 <1> <- 32   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _OLED_print_char   (midx: 0)
//ssd1306.c,429 :: 		}
94:   (midx: 0)
//ssd1306.c,430 :: 		}
92:   (midx: 0)
91:   (midx: 0)
87:   (midx: 0)
83:   (midx: 0)
79:   (midx: 0)
  end
   (midx: 0)
_Draw_Pixel:
  begin   (midx: 0)
//ssd1306.c,434 :: 		void Draw_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned char colour)
_Draw_Pixel:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R5 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//ssd1306.c,436 :: 		unsigned char value = 0x00;
   (midx: 0)
//ssd1306.c,437 :: 		unsigned char page = 0x00;
   (midx: 0)
//ssd1306.c,438 :: 		unsigned char bit_pos = 0x00;
   (midx: 0)
//ssd1306.c,440 :: 		page = (y_pos / y_max);
	R4 <1> <-  R5 shr 3   (midx: 0)
   (midx: 0)
	R1 <1> <- R4   (midx: 0)
//ssd1306.c,441 :: 		bit_pos = (y_pos - (page * y_max));
	R3 <2> <-  R4 shl 3   (midx: 0)
   (midx: 0)
	R3 <2> <-  R5 - R3   (midx: 5)
   (midx: 0)
	R5 <1> <- R3   (midx: 0)
//ssd1306.c,442 :: 		value = buffer[((page * x_max) + x_pos)];
	R3 <2> <-  R4 shl 7   (midx: 0)
	R4 <2> <-  R3 + R0   (midx: 5)
	R3 <4> <- #_buffer   (midx: 0)
	R3 <4> <-  R3 + R4   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
   (midx: 0)
	R4 <1> <- R3   (midx: 0)
//ssd1306.c,444 :: 		if((colour & YES) != NO)
   (midx: 0)
	R3 <1> <-  R2 & 1   (midx: 0)
	if ( R3 = 0) then goto 95   (midx: 0)
//ssd1306.c,446 :: 		value |= (1 << bit_pos);
	R3 <2> <- 1   (midx: 0)
   (midx: 0)
	R3 <2> <-  R3 shl R5   (midx: 5)
   (midx: 0)
	R3 <2> <-  R4 | R3   (midx: 5)
   (midx: 0)
	R11 <1> <- R3   (midx: 0)
//ssd1306.c,447 :: 		}
   (midx: 0)
	R11 <1> <- R11   (midx: 0)
	goto	96   (midx: 0)
95:   (midx: 0)
//ssd1306.c,450 :: 		value &= (~(1 << bit_pos));
   (midx: 0)
   (midx: 0)
	R3 <2> <- 1   (midx: 0)
   (midx: 0)
	R3 <2> <-  R3 shl R5   (midx: 5)
	R3 <2> <- ~R3   (midx: 5)
   (midx: 0)
	R3 <2> <-  R4 & R3   (midx: 5)
   (midx: 0)
   (midx: 0)
	R11 <1> <- R3   (midx: 0)
	R11 <1> <- R11   (midx: 0)
//ssd1306.c,451 :: 		}
96:   (midx: 0)
//ssd1306.c,453 :: 		buffer[((page * x_max) + x_pos)] = value;
   (midx: 0)
	R3 <2> <-  R1 shl 7   (midx: 0)
	R4 <2> <-  R3 + R0   (midx: 5)
	R3 <4> <- #_buffer   (midx: 0)
	R3 <4> <-  R3 + R4   (midx: 2)
	[R3] <1> <- R11   (midx: 0)
//ssd1306.c,454 :: 		OLED_gotoxy(x_pos, page);
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _OLED_gotoxy   (midx: 0)
//ssd1306.c,455 :: 		OLED_write(value, DAT);
	R1 <1> <- 96   (midx: 0)
   (midx: 0)
	R0 <1> <- R11   (midx: 0)
	CALL _OLED_write   (midx: 0)
  end
   (midx: 0)
_Draw_Line:
  begin   (midx: 0)
//ssd1306.c,459 :: 		void Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char colour)
_Draw_Line:
  begin   (midx: 0)
   (midx: 0)
	R12 <2> <- R0   (midx: 0)
	FARG_Draw_Line_y1 <2> <- R1   (midx: 0)
	FARG_Draw_Line_x2 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_Draw_Line_y2 <2> <- R3   (midx: 0)
   (midx: 0)
	R4 <1> <- FARG_Draw_Line_colour   (midx: 0)
	FARG_Draw_Line_colour <1> <- R4   (midx: 0)
//ssd1306.c,461 :: 		signed int dx = 0x0000;
   (midx: 0)
//ssd1306.c,462 :: 		signed int dy = 0x0000;
   (midx: 0)
//ssd1306.c,463 :: 		signed int stepx = 0x0000;
   (midx: 0)
//ssd1306.c,464 :: 		signed int stepy = 0x0000;
   (midx: 0)
//ssd1306.c,465 :: 		signed int fraction = 0x0000;
   (midx: 0)
//ssd1306.c,467 :: 		dy = (y2 - y1);
	R5 <2> <- FARG_Draw_Line_y1   (midx: 0)
	R4 <2> <- FARG_Draw_Line_y2   (midx: 0)
	R5 <2> <-  R4 - R5   (midx: 5)
   (midx: 0)
	R8 <2> <- R5   (midx: 0)
//ssd1306.c,468 :: 		dx = (x2 - x1);
	R4 <2> <- FARG_Draw_Line_x2   (midx: 0)
	R4 <2> <-  R4 - R12   (midx: 5)
	Draw_Line_dx_L0 <2> <- R4   (midx: 0)
//ssd1306.c,470 :: 		if (dy < 0)
	if ( R5 >= 0) then goto 97   (midx: 5)
//ssd1306.c,472 :: 		dy = -dy;
   (midx: 0)
	R0 <2> <-  0 - R8   (midx: 5)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
//ssd1306.c,473 :: 		stepy = -1;
	R4 <2> <- -1   (midx: 0)
	Draw_Line_stepy_L0 <2> <- R4   (midx: 0)
//ssd1306.c,474 :: 		}
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	goto	98   (midx: 0)
97:   (midx: 0)
//ssd1306.c,477 :: 		stepy = 1;
   (midx: 0)
	R4 <2> <- 1   (midx: 0)
   (midx: 0)
	Draw_Line_stepy_L0 <2> <- R4   (midx: 0)
	R0 <2> <- R8   (midx: 0)
//ssd1306.c,478 :: 		}
98:   (midx: 0)
//ssd1306.c,480 :: 		if (dx < 0)
   (midx: 0)
	R4 <2> <- Draw_Line_dx_L0   (midx: 0)
	if ( R4 >= 0) then goto 99   (midx: 5)
//ssd1306.c,482 :: 		dx = -dx;
	R4 <2> <- Draw_Line_dx_L0   (midx: 0)
	R4 <2> <-  0 - R4   (midx: 5)
	Draw_Line_dx_L0 <2> <- R4   (midx: 0)
//ssd1306.c,483 :: 		stepx = -1;
	R4 <2> <- -1   (midx: 0)
	Draw_Line_stepx_L0 <2> <- R4   (midx: 0)
//ssd1306.c,484 :: 		}
	goto	100   (midx: 0)
99:   (midx: 0)
//ssd1306.c,487 :: 		stepx = 1;
	R4 <2> <- 1   (midx: 0)
	Draw_Line_stepx_L0 <2> <- R4   (midx: 0)
//ssd1306.c,488 :: 		}
100:   (midx: 0)
//ssd1306.c,490 :: 		dx <<= 1;
	R4 <2> <- Draw_Line_dx_L0   (midx: 0)
	R4 <2> <-  R4 shl 1   (midx: 5)
	Draw_Line_dx_L0 <2> <- R4   (midx: 0)
//ssd1306.c,491 :: 		dy <<= 1;
	R0 <2> <-  R0 shl 1   (midx: 5)
	R0 <2> <- R0   (midx: 0)
//ssd1306.c,493 :: 		Draw_Pixel(x1, y1, colour);
	R0 <2> <- PUSH(R0)   (midx: 255)
	R2 <1> <- FARG_Draw_Line_colour   (midx: 0)
	R1 <1> <- FARG_Draw_Line_y1   (midx: 0)
	R0 <1> <- R12   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
	R0 <2> <- POP   (midx: 255)
//ssd1306.c,495 :: 		if(dx > dy)
	R4 <2> <- Draw_Line_dx_L0   (midx: 0)
	if ( R4 <= R0) then goto 101   (midx: 5)
//ssd1306.c,497 :: 		fraction = (dy - (dx >> 1));
	R4 <2> <- Draw_Line_dx_L0   (midx: 0)
	R4 <2> <-  R4 shr 1   (midx: 5)
	R4 <2> <-  R0 - R4   (midx: 5)
   (midx: 0)
	Draw_Line_fraction_L0 <2> <- R4   (midx: 0)
	R1 <2> <- R12   (midx: 0)
	R0 <2> <- R0   (midx: 0)
//ssd1306.c,498 :: 		while (x1 != x2)
102:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- FARG_Draw_Line_x2   (midx: 0)
   (midx: 0)
	if ( R1 = R4) then goto 103   (midx: 5)
//ssd1306.c,500 :: 		if(fraction >= 0)
   (midx: 0)
	R4 <2> <- Draw_Line_fraction_L0   (midx: 0)
	if ( R4 < 0) then goto 104   (midx: 5)
//ssd1306.c,502 :: 		y1 += stepy;
	R5 <2> <- Draw_Line_stepy_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Line_y1   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	FARG_Draw_Line_y1 <2> <- R4   (midx: 0)
//ssd1306.c,503 :: 		fraction -= dx;
	R5 <2> <- Draw_Line_dx_L0   (midx: 0)
	R4 <2> <- Draw_Line_fraction_L0   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	Draw_Line_fraction_L0 <2> <- R4   (midx: 0)
//ssd1306.c,504 :: 		}
104:   (midx: 0)
//ssd1306.c,506 :: 		x1 += stepx;
	R4 <2> <- Draw_Line_stepx_L0   (midx: 0)
   (midx: 0)
	R5 <2> <-  R1 + R4   (midx: 5)
   (midx: 0)
	R12 <2> <- R5   (midx: 0)
//ssd1306.c,507 :: 		fraction += dy;
	R4 <2> <- Draw_Line_fraction_L0   (midx: 0)
	R4 <2> <-  R4 + R0   (midx: 5)
	Draw_Line_fraction_L0 <2> <- R4   (midx: 0)
//ssd1306.c,509 :: 		Draw_Pixel(x1, y1, colour);
	R0 <2> <- PUSH(R0)   (midx: 255)
	R2 <1> <- FARG_Draw_Line_colour   (midx: 0)
	R1 <1> <- FARG_Draw_Line_y1   (midx: 0)
	R0 <1> <- R5   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
	R0 <2> <- POP   (midx: 255)
//ssd1306.c,510 :: 		}
   (midx: 0)
   (midx: 0)
	R1 <2> <- R12   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	goto	102   (midx: 0)
103:   (midx: 0)
//ssd1306.c,511 :: 		}
	goto	105   (midx: 0)
101:   (midx: 0)
//ssd1306.c,514 :: 		fraction = (dx - (dy >> 1));
   (midx: 0)
   (midx: 0)
	R5 <2> <-  R0 shr 1   (midx: 5)
	R4 <2> <- Draw_Line_dx_L0   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
   (midx: 0)
	Draw_Line_fraction_L0 <2> <- R4   (midx: 0)
	R12 <2> <- R12   (midx: 0)
	R0 <2> <- R0   (midx: 0)
//ssd1306.c,515 :: 		while (y1 != y2)
106:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <2> <- FARG_Draw_Line_y2   (midx: 0)
	R4 <2> <- FARG_Draw_Line_y1   (midx: 0)
   (midx: 0)
	if ( R4 = R5) then goto 107   (midx: 5)
//ssd1306.c,517 :: 		if (fraction >= 0)
   (midx: 0)
	R4 <2> <- Draw_Line_fraction_L0   (midx: 0)
	if ( R4 < 0) then goto 174   (midx: 5)
//ssd1306.c,519 :: 		x1 += stepx;
	R4 <2> <- Draw_Line_stepx_L0   (midx: 0)
   (midx: 0)
	R4 <2> <-  R12 + R4   (midx: 5)
   (midx: 0)
	R9 <2> <- R4   (midx: 0)
//ssd1306.c,520 :: 		fraction -= dy;
	R4 <2> <- Draw_Line_fraction_L0   (midx: 0)
	R4 <2> <-  R4 - R0   (midx: 5)
   (midx: 0)
	Draw_Line_fraction_L0 <2> <- R4   (midx: 0)
	R1 <2> <- R9   (midx: 0)
//ssd1306.c,521 :: 		}
	goto	108   (midx: 0)
174:   (midx: 0)
//ssd1306.c,517 :: 		if (fraction >= 0)
	R1 <2> <- R12   (midx: 0)
//ssd1306.c,521 :: 		}
108:   (midx: 0)
//ssd1306.c,523 :: 		y1 += stepy;
   (midx: 0)
	R5 <2> <- Draw_Line_stepy_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Line_y1   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	FARG_Draw_Line_y1 <2> <- R6   (midx: 0)
//ssd1306.c,524 :: 		fraction += dx;
	R5 <2> <- Draw_Line_dx_L0   (midx: 0)
	R4 <2> <- Draw_Line_fraction_L0   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	Draw_Line_fraction_L0 <2> <- R4   (midx: 0)
//ssd1306.c,526 :: 		Draw_Pixel(x1, y1, colour);
	R1 <2> <- PUSH(R1)   (midx: 255)
	R0 <2> <- PUSH(R0)   (midx: 255)
	R2 <1> <- FARG_Draw_Line_colour   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
	R0 <2> <- POP   (midx: 255)
	R1 <2> <- POP   (midx: 255)
//ssd1306.c,527 :: 		}
   (midx: 0)
   (midx: 0)
	R12 <2> <- R1   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	goto	106   (midx: 0)
107:   (midx: 0)
//ssd1306.c,528 :: 		}
105:   (midx: 0)
  end
   (midx: 0)
_Draw_Rectangle:
  begin   (midx: 0)
//ssd1306.c,532 :: 		void Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char colour, unsigned char type)
_Draw_Rectangle:
  begin   (midx: 0)
   (midx: 0)
	FARG_Draw_Rectangle_x1 <2> <- R0   (midx: 0)
	FARG_Draw_Rectangle_y1 <2> <- R1   (midx: 0)
	FARG_Draw_Rectangle_x2 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_Draw_Rectangle_y2 <2> <- R3   (midx: 0)
   (midx: 0)
	R0 <1> <- FARG_Draw_Rectangle_fill   (midx: 0)
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	FARG_Draw_Rectangle_colour <1> <- R4   (midx: 0)
	R4 <1> <- FARG_Draw_Rectangle_type   (midx: 0)
	FARG_Draw_Rectangle_type <1> <- R4   (midx: 0)
//ssd1306.c,534 :: 		unsigned short i = 0x00;
   (midx: 0)
//ssd1306.c,535 :: 		unsigned short xmin = 0x00;
   (midx: 0)
//ssd1306.c,536 :: 		unsigned short xmax = 0x00;
   (midx: 0)
//ssd1306.c,537 :: 		unsigned short ymin = 0x00;
   (midx: 0)
//ssd1306.c,538 :: 		unsigned short ymax = 0x00;
   (midx: 0)
//ssd1306.c,540 :: 		if(fill != NO)
   (midx: 0)
	if ( R0 = 0) then goto 109   (midx: 0)
//ssd1306.c,542 :: 		if(x1 < x2)
	R5 <2> <- FARG_Draw_Rectangle_x2   (midx: 0)
	R4 <2> <- FARG_Draw_Rectangle_x1   (midx: 0)
	if ( R4 >= R5) then goto 110   (midx: 5)
//ssd1306.c,544 :: 		xmin = x1;
	R4 <1> <- FARG_Draw_Rectangle_x1   (midx: 0)
	Draw_Rectangle_xmin_L0 <1> <- R4   (midx: 0)
//ssd1306.c,545 :: 		xmax = x2;
	R4 <1> <- FARG_Draw_Rectangle_x2   (midx: 0)
	Draw_Rectangle_xmax_L0 <1> <- R4   (midx: 0)
//ssd1306.c,546 :: 		}
	goto	111   (midx: 0)
110:   (midx: 0)
//ssd1306.c,549 :: 		xmin = x2;
	R4 <1> <- FARG_Draw_Rectangle_x2   (midx: 0)
	Draw_Rectangle_xmin_L0 <1> <- R4   (midx: 0)
//ssd1306.c,550 :: 		xmax = x1;
	R4 <1> <- FARG_Draw_Rectangle_x1   (midx: 0)
	Draw_Rectangle_xmax_L0 <1> <- R4   (midx: 0)
//ssd1306.c,551 :: 		}
111:   (midx: 0)
//ssd1306.c,553 :: 		if(y1 < y2)
	R5 <2> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R4 <2> <- FARG_Draw_Rectangle_y1   (midx: 0)
	if ( R4 >= R5) then goto 112   (midx: 5)
//ssd1306.c,555 :: 		ymin = y1;
	R4 <1> <- FARG_Draw_Rectangle_y1   (midx: 0)
	Draw_Rectangle_ymin_L0 <1> <- R4   (midx: 0)
//ssd1306.c,556 :: 		ymax = y2;
	R4 <1> <- FARG_Draw_Rectangle_y2   (midx: 0)
	Draw_Rectangle_ymax_L0 <1> <- R4   (midx: 0)
//ssd1306.c,557 :: 		}
	goto	113   (midx: 0)
112:   (midx: 0)
//ssd1306.c,560 :: 		ymin = y2;
	R4 <1> <- FARG_Draw_Rectangle_y2   (midx: 0)
	Draw_Rectangle_ymin_L0 <1> <- R4   (midx: 0)
//ssd1306.c,561 :: 		ymax = y1;
	R4 <1> <- FARG_Draw_Rectangle_y1   (midx: 0)
	Draw_Rectangle_ymax_L0 <1> <- R4   (midx: 0)
//ssd1306.c,562 :: 		}
113:   (midx: 0)
//ssd1306.c,564 :: 		for(; xmin <= xmax; ++xmin)
114:   (midx: 0)
	R5 <1> <- Draw_Rectangle_xmax_L0   (midx: 0)
	R4 <1> <- Draw_Rectangle_xmin_L0   (midx: 0)
	if ( R4 > R5) then goto 115   (midx: 0)
//ssd1306.c,566 :: 		for(i = ymin; i <= ymax; ++i)
   (midx: 0)
   (midx: 0)
	R12 <1> <- Draw_Rectangle_ymin_L0   (midx: 0)
	R12 <1> <- R12   (midx: 0)
117:   (midx: 0)
   (midx: 0)
	R4 <1> <- Draw_Rectangle_ymax_L0   (midx: 0)
	if ( R12 > R4) then goto 118   (midx: 0)
//ssd1306.c,568 :: 		Draw_Pixel(xmin, i, colour);
	R2 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R1 <1> <- R12   (midx: 0)
	R0 <1> <- Draw_Rectangle_xmin_L0   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,566 :: 		for(i = ymin; i <= ymax; ++i)
   (midx: 0)
	R4 <1> <-  R12 + 1   (midx: 0)
   (midx: 0)
	R0 <1> <- R4   (midx: 0)
//ssd1306.c,569 :: 		}
   (midx: 0)
	R12 <1> <- R0   (midx: 0)
	goto	117   (midx: 0)
118:   (midx: 0)
//ssd1306.c,564 :: 		for(; xmin <= xmax; ++xmin)
	R4 <1> <- Draw_Rectangle_xmin_L0   (midx: 0)
	R4 <1> <-  R4 + 1   (midx: 0)
	Draw_Rectangle_xmin_L0 <1> <- R4   (midx: 0)
//ssd1306.c,570 :: 		}
	goto	114   (midx: 0)
115:   (midx: 0)
//ssd1306.c,571 :: 		}
	goto	120   (midx: 0)
109:   (midx: 0)
//ssd1306.c,575 :: 		Draw_Line(x1, y1, x2, y1, colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R3 <2> <- FARG_Draw_Rectangle_y1   (midx: 0)
	R2 <2> <- FARG_Draw_Rectangle_x2   (midx: 0)
	R1 <2> <- FARG_Draw_Rectangle_y1   (midx: 0)
	R0 <2> <- FARG_Draw_Rectangle_x1   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R4)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,576 :: 		Draw_Line(x1, y2, x2, y2, colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R3 <2> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R2 <2> <- FARG_Draw_Rectangle_x2   (midx: 0)
	R1 <2> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R0 <2> <- FARG_Draw_Rectangle_x1   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R4)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,577 :: 		Draw_Line(x1, y1, x1, y2, colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R3 <2> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R2 <2> <- FARG_Draw_Rectangle_x1   (midx: 0)
	R1 <2> <- FARG_Draw_Rectangle_y1   (midx: 0)
	R0 <2> <- FARG_Draw_Rectangle_x1   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R4)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,578 :: 		Draw_Line(x2, y1, x2, y2, colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R3 <2> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R2 <2> <- FARG_Draw_Rectangle_x2   (midx: 0)
	R1 <2> <- FARG_Draw_Rectangle_y1   (midx: 0)
	R0 <2> <- FARG_Draw_Rectangle_x2   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R4)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,579 :: 		}
120:   (midx: 0)
//ssd1306.c,581 :: 		if(type != SQUARE)
	R4 <1> <- FARG_Draw_Rectangle_type   (midx: 0)
	if ( R4 = 0) then goto 121   (midx: 0)
//ssd1306.c,583 :: 		Draw_Pixel(x1, y1, ~colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R4 <1> <- ~R4   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_Draw_Rectangle_y1   (midx: 0)
	R0 <1> <- FARG_Draw_Rectangle_x1   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,584 :: 		Draw_Pixel(x1, y2, ~colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R4 <1> <- ~R4   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R0 <1> <- FARG_Draw_Rectangle_x1   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,585 :: 		Draw_Pixel(x2, y1, ~colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R4 <1> <- ~R4   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_Draw_Rectangle_y1   (midx: 0)
	R0 <1> <- FARG_Draw_Rectangle_x2   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,586 :: 		Draw_Pixel(x2, y2, ~colour);
	R4 <1> <- FARG_Draw_Rectangle_colour   (midx: 0)
	R4 <1> <- ~R4   (midx: 0)
	R2 <1> <- R4   (midx: 0)
	R1 <1> <- FARG_Draw_Rectangle_y2   (midx: 0)
	R0 <1> <- FARG_Draw_Rectangle_x2   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,587 :: 		}
121:   (midx: 0)
  end
   (midx: 0)
_Draw_Circle:
  begin   (midx: 0)
//ssd1306.c,591 :: 		void Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned char colour)
_Draw_Circle:
  begin   (midx: 0)
   (midx: 0)
	FARG_Draw_Circle_xc <2> <- R0   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	FARG_Draw_Circle_yc <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_Draw_Circle_fill <1> <- R3   (midx: 0)
   (midx: 0)
	R4 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	FARG_Draw_Circle_colour <1> <- R4   (midx: 0)
//ssd1306.c,593 :: 		signed int a = 0x0000;
   (midx: 0)
	R4 <4> <- 0   (midx: 0)
	Draw_Circle_a_L0 <-initialize(0)   (midx: 0)
//ssd1306.c,594 :: 		signed int b = 0x0000;
   (midx: 0)
//ssd1306.c,595 :: 		signed int P = 0x0000;
   (midx: 0)
//ssd1306.c,597 :: 		b = radius;
	Draw_Circle_b_L0 <2> <- R0   (midx: 0)
//ssd1306.c,598 :: 		P = (1 - b);
   (midx: 0)
	R4 <2> <-  1 - R0   (midx: 5)
	Draw_Circle_P_L0 <2> <- R4   (midx: 0)
//ssd1306.c,600 :: 		do
122:   (midx: 0)
//ssd1306.c,602 :: 		if(fill != NO)
	R4 <1> <- FARG_Draw_Circle_fill   (midx: 0)
	if ( R4 = 0) then goto 125   (midx: 0)
//ssd1306.c,604 :: 		Draw_Line((xc - a), (yc + b), (xc + a), (yc + b), colour);
	R8 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R7 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R3 <2> <- R7   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R8)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,605 :: 		Draw_Line((xc - a), (yc - b), (xc + a), (yc - b), colour);
	R8 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R7 <2> <-  R4 - R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R3 <2> <- R7   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R8)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,606 :: 		Draw_Line((xc - b), (yc + a), (xc + b), (yc + a), colour);
	R8 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R7 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R3 <2> <- R7   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R8)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,607 :: 		Draw_Line((xc - b), (yc - a), (xc + b), (yc - a), colour);
	R8 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R7 <2> <-  R4 - R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R3 <2> <- R7   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R8)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//ssd1306.c,608 :: 		}
	goto	126   (midx: 0)
125:   (midx: 0)
//ssd1306.c,611 :: 		Draw_Pixel((xc + a), (yc + b), colour);
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,612 :: 		Draw_Pixel((xc + b), (yc + a), colour);
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,613 :: 		Draw_Pixel((xc - a), (yc + b), colour);
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,614 :: 		Draw_Pixel((xc - b), (yc + a), colour);
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 + R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,615 :: 		Draw_Pixel((xc + b), (yc - a), colour);
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 - R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,616 :: 		Draw_Pixel((xc + a), (yc - b), colour);
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 - R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,617 :: 		Draw_Pixel((xc - a), (yc - b), colour);
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 - R5   (midx: 5)
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,618 :: 		Draw_Pixel((xc - b), (yc - a), colour);
	R5 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_yc   (midx: 0)
	R6 <2> <-  R4 - R5   (midx: 5)
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- FARG_Draw_Circle_xc   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R2 <1> <- FARG_Draw_Circle_colour   (midx: 0)
	R1 <1> <- R6   (midx: 0)
	R0 <1> <- R4   (midx: 0)
	CALL _Draw_Pixel   (midx: 0)
//ssd1306.c,619 :: 		}
126:   (midx: 0)
//ssd1306.c,621 :: 		if(P < 0)
	R4 <2> <- Draw_Circle_P_L0   (midx: 0)
	if ( R4 >= 0) then goto 127   (midx: 5)
//ssd1306.c,623 :: 		P += (3 + (2 * a++));
	R4 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <-  R4 shl 1   (midx: 5)
	R5 <2> <-  3 + R4   (midx: 5)
	R4 <2> <- Draw_Circle_P_L0   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	Draw_Circle_P_L0 <2> <- R4   (midx: 0)
	R4 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <-  R4 + 1   (midx: 1)
	Draw_Circle_a_L0 <2> <- R4   (midx: 0)
//ssd1306.c,624 :: 		}
	goto	128   (midx: 0)
127:   (midx: 0)
//ssd1306.c,627 :: 		P += (5 + (2 * ((a++) - (b--))));
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <-  R4 - R5   (midx: 5)
	R4 <2> <-  R4 shl 1   (midx: 5)
	R5 <2> <-  5 + R4   (midx: 5)
	R4 <2> <- Draw_Circle_P_L0   (midx: 0)
	R4 <2> <-  R4 + R5   (midx: 5)
	Draw_Circle_P_L0 <2> <- R4   (midx: 0)
	R4 <2> <- Draw_Circle_a_L0   (midx: 0)
	R4 <2> <-  R4 + 1   (midx: 1)
	Draw_Circle_a_L0 <2> <- R4   (midx: 0)
	R4 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <-  R4 - 1   (midx: 1)
	Draw_Circle_b_L0 <2> <- R4   (midx: 0)
//ssd1306.c,628 :: 		}
128:   (midx: 0)
//ssd1306.c,629 :: 		}while(a <= b);
	R5 <2> <- Draw_Circle_b_L0   (midx: 0)
	R4 <2> <- Draw_Circle_a_L0   (midx: 0)
	if ( R4 <= R5) then goto 122   (midx: 5)
  end
   (midx: 0)
_setup_mcu:
  begin   (midx: 0)
//Temp.c,53 :: 		void setup_mcu()
_setup_mcu:
  begin   (midx: 0)
//Temp.c,55 :: 		GPIO_Clk_Enable(&GPIOA_BASE);
	R0 <4> <- #GPIOA_BASE   (midx: 0)
	CALL _GPIO_Clk_Enable   (midx: 0)
//Temp.c,56 :: 		GPIO_Clk_Enable(&GPIOB_BASE);
	R0 <4> <- #GPIOB_BASE   (midx: 0)
	CALL _GPIO_Clk_Enable   (midx: 0)
//Temp.c,60 :: 		(_GPIO_CFG_MODE_OUTPUT | _GPIO_CFG_SPEED_MAX | _GPIO_CFG_OTYPE_PP));
	R2 <4> <- 524308   (midx: 0)
//Temp.c,59 :: 		_GPIO_PINMASK_5,
	R1 <2> <- 32   (midx: 0)
//Temp.c,58 :: 		GPIO_Config(&GPIOA_BASE,
	R0 <4> <- #GPIOA_BASE   (midx: 0)
//Temp.c,60 :: 		(_GPIO_CFG_MODE_OUTPUT | _GPIO_CFG_SPEED_MAX | _GPIO_CFG_OTYPE_PP));
	CALL _GPIO_Config   (midx: 0)
//Temp.c,62 :: 		OLED_init();
	CALL _OLED_init   (midx: 0)
//Temp.c,63 :: 		LM75_init();
	CALL _LM75_init   (midx: 0)
  end
   (midx: 0)
_background_layer:
  begin   (midx: 0)
//Temp.c,67 :: 		void background_layer()
_background_layer:
  begin   (midx: 0)
//Temp.c,69 :: 		OLED_draw_bitmap(0, 0, 127, 7, (unsigned char *)image);
	R0 <4> <- #_image   (midx: 0)
	FARG_OLED_draw_bitmap_bmp_img <4> <- PUSH(R0)   (midx: 0)
	R3 <1> <- 7   (midx: 0)
	R2 <1> <- 127   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _OLED_draw_bitmap   (midx: 0)
//Temp.c,70 :: 		OLED_print_string(15, 0, "LM75 Thermometer");
	?lstr2_Temp <-initialize(0)   (midx: 0)
	R0 <4> <- addr(?lstr2_Temp)   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R2 <4> <- R0   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <1> <- 15   (midx: 0)
	CALL _OLED_print_string   (midx: 0)
//Temp.c,71 :: 		OLED_print_string(24, 7, "T/'C: ");
	R0 <4> <- 0   (midx: 0)
	?lstr3_Temp <-initialize(0)   (midx: 0)
	R0 <4> <- addr(?lstr3_Temp)   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R2 <4> <- R0   (midx: 0)
	R1 <1> <- 7   (midx: 0)
	R0 <1> <- 24   (midx: 0)
	CALL _OLED_print_string   (midx: 0)
  end
   (midx: 0)
_main:
  begin   (midx: 0)
//Temp.c,13 :: 		void main()
_main:
  begin   (midx: 0)
//Temp.c,15 :: 		float t_diff = 0.0;
   (midx: 0)
//Temp.c,16 :: 		float t_new = 0.0;
   (midx: 0)
//Temp.c,17 :: 		float t_old = 0.0;
   (midx: 0)
	R0 <4> <- 0   (midx: 0)
   (midx: 0)
	S2 <-initialize(0.000000E+000)   (midx: 0)
//Temp.c,19 :: 		setup_mcu();
	CALL _setup_mcu   (midx: 0)
//Temp.c,20 :: 		background_layer();
   (midx: 0)
	CALL _background_layer   (midx: 0)
	S2 <4> <- S2   (midx: 0)
//Temp.c,22 :: 		while(1)
129:   (midx: 0)
//Temp.c,24 :: 		t_new = get_temp();
   (midx: 0)
	CALL _get_temp   (midx: 0)
   (midx: 0)
	S3 <4> <- S0   (midx: 0)
//Temp.c,26 :: 		if((t_new != t_old) && ((t_new >= 0) && (t_new <= 100)))
	if ( S0 = S2) then goto 182   (midx: 8)
	if ( S3 < 0.000000E+000) then goto 180   (midx: 9)
	R0 <4> <- 1.000000E+002   (midx: 0)
	S0 <4> <- R0   (midx: 0)
	if ( S3 > S0) then goto 181   (midx: 9)
176:   (midx: 0)
175:   (midx: 0)
//Temp.c,28 :: 		t_diff = (t_new - t_old);
	S0 <4> <-  S3 - S2   (midx: 8)
   (midx: 0)
	S4 <4> <- S0   (midx: 0)
//Temp.c,29 :: 		Draw_Line(20, 25, 122, 25, ON);
	R0 <1> <- 1   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R0)   (midx: 0)
	R3 <2> <- 25   (midx: 0)
	R2 <2> <- 122   (midx: 0)
	R1 <2> <- 25   (midx: 0)
	R0 <2> <- 20   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//Temp.c,30 :: 		Draw_Line(20, 32, 122, 32, ON);
	R0 <1> <- 1   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R0)   (midx: 0)
	R3 <2> <- 32   (midx: 0)
	R2 <2> <- 122   (midx: 0)
	R1 <2> <- 32   (midx: 0)
	R0 <2> <- 20   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//Temp.c,32 :: 		if(t_old <= t_new)
	if ( S2 > S3) then goto 136   (midx: 8)
//Temp.c,34 :: 		Draw_Rectangle(bar_offset, 27, (t_old + t_diff + bar_offset - 1), 30, YES, ON, SQUARE);
	R3 <1> <- 0   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 1   (midx: 0)
	S1 <4> <-  S2 + S4   (midx: 8)
	S0 <4> <- 2.000000E+001   (midx: 0)
	S1 <4> <-  S1 + S0   (midx: 9)
	S0 <4> <- 1.000000E+000   (midx: 0)
	S0 <4> <-  S1 - S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R0 <2> <- S0   (midx: 0)
	FARG_Draw_Rectangle_type <1> <- PUSH(R3)   (midx: 0)
	FARG_Draw_Rectangle_colour <1> <- PUSH(R2)   (midx: 0)
	FARG_Draw_Rectangle_fill <1> <- PUSH(R1)   (midx: 0)
	R3 <2> <- 30   (midx: 0)
	R2 <2> <- R0   (midx: 0)
	R1 <2> <- 27   (midx: 0)
	R0 <2> <- 20   (midx: 0)
	CALL _Draw_Rectangle   (midx: 0)
//Temp.c,35 :: 		Draw_Line((t_old + t_diff + bar_offset), 28, (t_old + t_diff + bar_offset), 29, ON);
	R2 <1> <- 1   (midx: 0)
   (midx: 0)
   (midx: 0)
	S1 <4> <-  S2 + S4   (midx: 8)
	S0 <4> <- 2.000000E+001   (midx: 0)
	S0 <4> <-  S1 + S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R1 <2> <- S0   (midx: 0)
	S0 <4> <- 2.000000E+001   (midx: 0)
	S0 <4> <-  S1 + S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R0 <2> <- S0   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R2)   (midx: 0)
	R3 <2> <- 29   (midx: 0)
	R2 <2> <- R1   (midx: 0)
	R1 <2> <- 28   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//Temp.c,36 :: 		}
	goto	137   (midx: 0)
136:   (midx: 0)
//Temp.c,39 :: 		Draw_Rectangle((t_new + bar_offset), 27, (t_old + bar_offset + 2), 30, YES, OFF, SQUARE);
   (midx: 0)
	R4 <1> <- 0   (midx: 0)
	R3 <1> <- 0   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	S0 <4> <- 2.000000E+001   (midx: 0)
   (midx: 0)
	S1 <4> <-  S2 + S0   (midx: 9)
	S0 <4> <- 2.000000E+000   (midx: 0)
	S0 <4> <-  S1 + S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R1 <2> <- S0   (midx: 0)
	S0 <4> <- 2.000000E+001   (midx: 0)
	S0 <4> <-  S3 + S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R0 <2> <- S0   (midx: 0)
	FARG_Draw_Rectangle_type <1> <- PUSH(R4)   (midx: 0)
	FARG_Draw_Rectangle_colour <1> <- PUSH(R3)   (midx: 0)
	FARG_Draw_Rectangle_fill <1> <- PUSH(R2)   (midx: 0)
	R3 <2> <- 30   (midx: 0)
	R2 <2> <- R1   (midx: 0)
	R1 <2> <- 27   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _Draw_Rectangle   (midx: 0)
//Temp.c,40 :: 		Draw_Line((t_new + bar_offset), 28, (t_new + bar_offset), 29, ON);
	R2 <1> <- 1   (midx: 0)
	S0 <4> <- 2.000000E+001   (midx: 0)
	S0 <4> <-  S3 + S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R1 <2> <- S0   (midx: 0)
	S0 <4> <- 2.000000E+001   (midx: 0)
	S0 <4> <-  S3 + S0   (midx: 9)
	S0 <2> <- (type cast)S0   (midx: 0)
	R0 <2> <- S0   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R2)   (midx: 0)
	R3 <2> <- 29   (midx: 0)
	R2 <2> <- R1   (midx: 0)
	R1 <2> <- 28   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _Draw_Line   (midx: 0)
//Temp.c,41 :: 		}
137:   (midx: 0)
//Temp.c,43 :: 		OLED_print_string(56, 7, "          ");
	?lstr1_Temp <-initialize(0)   (midx: 0)
	R0 <4> <- addr(?lstr1_Temp)   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R2 <4> <- R0   (midx: 0)
	R1 <1> <- 7   (midx: 0)
	R0 <1> <- 56   (midx: 0)
	CALL _OLED_print_string   (midx: 0)
//Temp.c,44 :: 		OLED_print_float(56, 7, t_new, 3);
	R2 <1> <- 3   (midx: 0)
	S0 <4> <- S3   (midx: 0)
	R1 <1> <- 7   (midx: 0)
	R0 <1> <- 56   (midx: 0)
	CALL _OLED_print_float   (midx: 0)
//Temp.c,45 :: 		t_old = t_new;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	S0 <4> <- S3   (midx: 0)
	S0 <4> <- S0   (midx: 0)
//Temp.c,26 :: 		if((t_new != t_old) && ((t_new >= 0) && (t_new <= 100)))
	goto	179   (midx: 0)
180:   (midx: 0)
	S0 <4> <- S2   (midx: 0)
179:   (midx: 0)
   (midx: 0)
   (midx: 0)
	S0 <4> <- S0   (midx: 0)
	goto	178   (midx: 0)
181:   (midx: 0)
	S0 <4> <- S2   (midx: 0)
178:   (midx: 0)
   (midx: 0)
   (midx: 0)
	S2 <4> <- S0   (midx: 0)
	goto	177   (midx: 0)
182:   (midx: 0)
	S2 <4> <- S2   (midx: 0)
177:   (midx: 0)
//Temp.c,48 :: 		delay_ms(600);
   (midx: 0)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Temp.c,49 :: 		};
   (midx: 0)
	S2 <4> <- S2   (midx: 0)
	goto	129   (midx: 0)
  end
   (midx: 0)
_draw_bar:
  begin   (midx: 0)
//Temp.c,75 :: 		void draw_bar(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char on_off)
_draw_bar:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <1> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <1> <- FARG_draw_bar_on_off   (midx: 0)
//Temp.c,77 :: 		Draw_Rectangle(x1, y1, x2, y2, YES, on_off, SQUARE);
	R6 <1> <- 0   (midx: 0)
   (midx: 0)
	R5 <1> <- R4   (midx: 0)
	R4 <1> <- 1   (midx: 0)
   (midx: 0)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	FARG_Draw_Rectangle_type <1> <- PUSH(R6)   (midx: 0)
	FARG_Draw_Rectangle_colour <1> <- PUSH(R5)   (midx: 0)
	FARG_Draw_Rectangle_fill <1> <- PUSH(R4)   (midx: 0)
	CALL _Draw_Rectangle   (midx: 0)
	R0 <1> <- POP   (midx: 255)
//Temp.c,78 :: 		Draw_Line(x1, 28, x1, 29, ON);
	R4 <1> <- 1   (midx: 0)
	R3 <2> <- 29   (midx: 0)
	R2 <2> <- R0   (midx: 0)
	R1 <2> <- 28   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	FARG_Draw_Line_colour <1> <- PUSH(R4)   (midx: 0)
	CALL _Draw_Line   (midx: 0)
  end
   (midx: 0)
