#line 1 "C:/Users/Shawon/Desktop/Nucleo 401 LM75 OLED Thermometer/Temp.c"
#line 1 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/lm75.c"
#line 1 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/lm75.h"
#line 24 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/lm75.h"
void LM75_init();
void LM75_write_byte(unsigned char pointer, unsigned char value);
void LM75_write_bytes(unsigned char pointer, signed int value);
signed int LM75_read_byte(unsigned char pointer);
signed int LM75_read_bytes(unsigned char pointer);
float get_temp();
#line 4 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/lm75.c"
void LM75_init()
{
 I2C1_Init_Advanced(400000, &_GPIO_MODULE_I2C1_PB89);
 delay_ms(10);
 I2C_Set_Active(&I2C1_Start, &I2C1_Read, &I2C1_Write);

 LM75_write_byte( 0x01 , ( 0x00  |  0x00  |  0x00  |  0x00 ));
}


void LM75_write_byte(unsigned char pointer, unsigned char value)
{
 unsigned char values[0x02] = {0x00, 0x00};

 values[0] = pointer;
 values[1] = value;

 I2C1_Start();
 I2C1_Write( 0x48 , values, 2, END_MODE_STOP);
}


void LM75_write_bytes(unsigned char pointer, signed int value)
{
 unsigned char values[0x03] = {0x00, 0x00, 0x00};

 values[0] = pointer;
 values[1] = ((value & 0xFF00) >> 8);
 values[2] = (value & 0x00FF);

 I2C1_Start();
 I2C1_Write( 0x48 , values, 3, END_MODE_STOP);
}


signed int LM75_read_byte(unsigned char pointer)
{
 unsigned char value_p[0x01] = {0x00};
 unsigned char value_d[0x01] = {0x00};

 value_p[0] = pointer;

 I2C1_Start();
 I2C1_Write( 0x48 , value_p, 1, END_MODE_RESTART);
 I2C1_Read( 0x48 , value_d, 1, END_MODE_STOP);

 return (value_d[0x00]);
}


signed int LM75_read_bytes(unsigned char pointer)
{
 unsigned char value_p[0x01] = {0x00};
 unsigned char value_d[0x02] = {0x00, 0x00};

 signed int value = 0x0000;

 value_p[0] = pointer;

 I2C1_Start();
 I2C1_Write( 0x48 , value_p, 1, END_MODE_RESTART);
 I2C1_Read( 0x48 , value_d, 2, END_MODE_STOP);

 value = ((signed int)value_d[0x00]);
 value <<= 0x08;
 value |= ((signed int)value_d[0x01]);

 return value;
}


float get_temp()
{
 float temp = 0.0;

 temp = (LM75_read_bytes( 0x00 ) >> 5);
 temp *= 0.125;

 return temp;
}
#line 1 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/ssd1306.c"
#line 1 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/fonts.c"
const unsigned char font_regular[92][6] =
{
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,
 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,
 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,
 0x00, 0x62, 0x64, 0x08, 0x13, 0x23,
 0x00, 0x36, 0x49, 0x55, 0x22, 0x50,
 0x00, 0x00, 0x05, 0x03, 0x00, 0x00,
 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,
 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,
 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,
 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,
 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,
 0x00, 0x08, 0x08, 0x08, 0x08, 0x08,
 0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
 0x00, 0x20, 0x10, 0x08, 0x04, 0x02,
 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,
 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,
 0x00, 0x42, 0x61, 0x51, 0x49, 0x46,
 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,
 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,
 0x00, 0x27, 0x45, 0x45, 0x45, 0x39,
 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,
 0x00, 0x01, 0x71, 0x09, 0x05, 0x03,
 0x00, 0x36, 0x49, 0x49, 0x49, 0x36,
 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,
 0x00, 0x00, 0x36, 0x36, 0x00, 0x00,
 0x00, 0x00, 0x56, 0x36, 0x00, 0x00,
 0x00, 0x08, 0x14, 0x22, 0x41, 0x00,
 0x00, 0x14, 0x14, 0x14, 0x14, 0x14,
 0x00, 0x00, 0x41, 0x22, 0x14, 0x08,
 0x00, 0x02, 0x01, 0x51, 0x09, 0x06,
 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,
 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,
 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,
 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,
 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,
 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,
 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,
 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,
 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,
 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,
 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,
 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,
 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,
 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,
 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,
 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,
 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,
 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,
 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,
 0x00, 0x46, 0x49, 0x49, 0x49, 0x31,
 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,
 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,
 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,
 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,
 0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
 0x00, 0x07, 0x08, 0x70, 0x08, 0x07,
 0x00, 0x61, 0x51, 0x49, 0x45, 0x43,
 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,
 0x00, 0x02, 0x04 , 0x08, 0x10, 0x20,
 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,
 0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
 0x00, 0x40, 0x40, 0x40, 0x40, 0x40,
 0x00, 0x00, 0x01, 0x02, 0x04, 0x00,
 0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,
 0x00, 0x38, 0x44, 0x44, 0x44, 0x20,
 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,
 0x00, 0x38, 0x54, 0x54, 0x54, 0x18,
 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,
 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,
 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,
 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,
 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,
 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,
 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,
 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,
 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,
 0x00, 0x38, 0x44, 0x44, 0x44, 0x38,
 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,
 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,
 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,
 0x00, 0x48, 0x54, 0x54, 0x54, 0x20,
 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,
 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,
 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,
 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,
 0x00, 0x44, 0x28, 0x10, 0x28, 0x44,
 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,
 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,
 0x14, 0x14, 0x14, 0x14, 0x14, 0x14
};
#line 1 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/ssd1306.h"
#line 72 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/ssd1306.h"
unsigned char buffer[ 1024 ];


void OLED_init();
void OLED_reset_sequence();
void OLED_write(unsigned char value, unsigned char control_byte);
void OLED_gotoxy(unsigned char x_pos, unsigned char y_pos);
void OLED_fill(unsigned char bmp_data);
void OLED_print_Image(const unsigned char *bmp, unsigned char pixel);
void OLED_clear_screen();
void OLED_clear_buffer();
void OLED_cursor(unsigned char x_pos, unsigned char y_pos);
void OLED_draw_bitmap(unsigned char xb, unsigned char yb, unsigned char xe, unsigned char ye, unsigned char *bmp_img);
void OLED_print_char(unsigned char x_pos, unsigned char y_pos, unsigned char ch);
void OLED_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch);
void OLED_print_chr(unsigned char x_pos, unsigned char y_pos, signed int value);
void OLED_print_int(unsigned char x_pos, unsigned char y_pos, signed long value);
void OLED_print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points);
void OLED_print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points);
void Draw_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned char colour);
void Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char colour);
void Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char colour, unsigned char type);
void Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned char colour);
#line 5 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/ssd1306.c"
void OLED_init()
{
 GPIO_Clk_Enable(&GPIOA_BASE);

 GPIO_Config(&GPIOA_BASE,
 (_GPIO_PINMASK_8 | _GPIO_PINMASK_9),
 (_GPIO_CFG_MODE_OUTPUT | _GPIO_CFG_SPEED_MAX | _GPIO_CFG_OTYPE_PP));

  GPIOA_ODRbits.ODR9  = 0;

 OLED_reset_sequence();

 I2C1_Init_Advanced(400000, &_GPIO_MODULE_I2C1_PB89);
 delay_ms(10);
 I2C_Set_Active(&I2C1_Start, &I2C1_Read, &I2C1_Write);

 OLED_write(( 0xAE  |  0x00 ),  0x00 );
 OLED_write( 0xA8 ,  0x00 );
 OLED_write(0x3F,  0x00 );
 OLED_write( 0xD3 ,  0x00 );
 OLED_write(0x00,  0x00 );
 OLED_write( 0x40 ,  0x00 );
 OLED_write(( 0xA0  |  0x01 ),  0x00 );
 OLED_write(( 0xC0  |  0x08 ),  0x00 );
 OLED_write( 0xDA ,  0x00 );
 OLED_write(0x12,  0x00 );
 OLED_write( 0x81 ,  0x00 );
 OLED_write(0xFF,  0x00 );
 OLED_write( 0xA4 ,  0x00 );
 OLED_write( 0xA6 ,  0x00 );
 OLED_write( 0xD5 ,  0x00 );
 OLED_write(0x80,  0x00 );
 OLED_write( 0xD9 ,  0x00 );
 OLED_write(0x25,  0x00 );
 OLED_write( 0xDB ,  0x00 );
 OLED_write(0x20,  0x00 );
 OLED_write( 0x22 ,  0x00 );
 OLED_write(0x00,  0x00 );
 OLED_write(0x07,  0x00 );
 OLED_write( 0xB0  ,  0x00 );
 OLED_write( 0x10 ,  0x00 );
 OLED_write( 0x00 ,  0x00 );
 OLED_write( 0x20 ,  0x00 );
 OLED_write(0x02,  0x00 );
 OLED_write( 0x8D ,  0x00 );
 OLED_write(0x14,  0x00 );
 OLED_write(( 0xAE  |  0x01 ),  0x00 );
}


void OLED_reset_sequence()
{
 delay_ms(40);
  GPIOA_ODRbits.ODR8  = 0;
 delay_ms(1);
  GPIOA_ODRbits.ODR8  = 1;
 delay_ms(10);
}



void OLED_write(unsigned char value, unsigned char control_byte)
{
 unsigned char data_value[2] = {0x00, 0x00};

 data_value[0] = control_byte;
 data_value[1] = value;

 I2C1_Start();
 I2C1_Write( 0x3C , data_value, 2, END_MODE_STOP);
}


void OLED_gotoxy(unsigned char x_pos, unsigned char y_pos)
{
 OLED_write(( 0xB0  + y_pos),  0x00 );
 OLED_write(((x_pos & 0x0F) |  0x00 ),  0x00 );
 OLED_write((((x_pos & 0xF0) >> 0x04) |  0x10 ),  0x00 );
}


void OLED_fill(unsigned char bmp_data)
{
 unsigned char page = 0x00;
 unsigned char x_value = 0x00;

 unsigned char data_value[( 128  + 1)];

 data_value[0] =  0x60 ;

 for(x_value = 1; x_value < ( 128  + 1); x_value++)
 {
 data_value[x_value] = bmp_data;
 }

 for(page = 0; page <  8 ; page++)
 {
 OLED_gotoxy( 0 , page);

 I2C1_Start();
 I2C1_Write( 0x3C , data_value, (1 +  128 ), END_MODE_STOP);
 }
}


void OLED_print_Image(const unsigned char *bmp, unsigned char pixel)
{
 unsigned char page = 0;
 unsigned char x_value = 0x00;

 unsigned char data_value[( 128  + 1)];

 data_value[0] =  0x60 ;

 for(x_value = 1; x_value < ( 128  + 1); x_value++)
 {
 data_value[x_value] = (bmp[(x_value - 1)] ^ pixel);
 }

 if(pixel !=  0 )
 {
 pixel = 0xFF;
 }
 else
 {
 pixel = 0x00;
 }

 for(page = 0; page <  8 ; page++)
 {
 OLED_gotoxy( 0 , page);

 I2C1_Start();
 I2C1_Write( 0x3C , data_value, (1 +  128 ), END_MODE_STOP);
 }
}


void OLED_clear_screen()
{
 OLED_fill(0x00);
}


void OLED_clear_buffer()
{
 unsigned int s = 0x0000;

 for(s = 0; s <  1024 ; s++)
 {
 buffer[s] = 0x00;
 }
}


void OLED_cursor(unsigned char x_pos, unsigned char y_pos)
{
 unsigned char s = 0x00;

 if(y_pos != 0x00)
 {
 if(x_pos == 1)
 {
 OLED_gotoxy(0x00, (y_pos + 0x02));
 }
 else
 {
 OLED_gotoxy((0x50 + ((x_pos - 0x02) * 0x06)), (y_pos + 0x02));
 }

 for(s = 0x00; s < 0x06; s++)
 {
 OLED_write(0xFF,  0x60 );
 }
 }
}


void OLED_draw_bitmap(unsigned char xb, unsigned char yb, unsigned char xe, unsigned char ye, unsigned char *bmp_img)
{
 unsigned int s = 0x00;
 unsigned char x_pos = 0x00;
 unsigned char y_pos = 0x00;

 for(y_pos = yb; y_pos <= ye; y_pos++)
 {
 OLED_gotoxy(xb, y_pos);
 for(x_pos = xb; x_pos <= xe; x_pos++)
 {
 OLED_write(bmp_img[s++],  0x60 );
 }
 }
}


void OLED_print_char(unsigned char x_pos, unsigned char y_pos, unsigned char ch)
{
 unsigned char chr = 0x00;
 unsigned char s = 0x00;

 chr = (ch - 0x20);

 if(x_pos > ( 128  - 0x06))
 {
 x_pos = 0x00;
 y_pos++;
 }
 OLED_gotoxy(x_pos, y_pos);

 for(s = 0x00; s < 0x06; s++)
 {
 OLED_write(font_regular[chr][s],  0x60 );
 }
}


void OLED_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch)
{
 unsigned char s = 0x00;

 do
 {
 OLED_print_char(x_pos, y_pos, ch[s++]);
 x_pos += 0x06;
 }while((ch[s] >= 0x20) && (ch[s] <= 0x7F));
}


void OLED_print_chr(unsigned char x_pos, unsigned char y_pos, signed int value)
{
 unsigned char ch = 0x00;

 if(value < 0x00)
 {
 OLED_print_char(x_pos, y_pos, '-');
 value = -value;
 }
 else
 {
 OLED_print_char(x_pos, y_pos,' ');
 }

 if((value > 99) && (value <= 999))
 {
 ch = (value / 100);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));
 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));
 ch = (value % 10);
 OLED_print_char((x_pos + 18), y_pos , (48 + ch));
 }
 else if((value > 9) && (value <= 99))
 {
 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));
 ch = (value % 10);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));
 OLED_print_char((x_pos + 18), y_pos , 32);
 }
 else if((value >= 0) && (value <= 9))
 {
 ch = (value % 10);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));
 OLED_print_char((x_pos + 12), y_pos , 32);
 OLED_print_char((x_pos + 18), y_pos , 32);
 }
}


void OLED_print_int(unsigned char x_pos, unsigned char y_pos, signed long value)
{
 unsigned char ch = 0x00;

 if(value < 0)
 {
 OLED_print_char(x_pos, y_pos, '-');
 value = -value;
 }
 else
 {
 OLED_print_char(x_pos, y_pos,' ');
 }

 if(value > 9999)
 {
 ch = (value / 10000);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));

 ch = ((value % 10000)/ 1000);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));

 ch = ((value % 1000) / 100);
 OLED_print_char((x_pos + 18), y_pos , (48 + ch));

 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 24), y_pos , (48 + ch));

 ch = (value % 10);
 OLED_print_char((x_pos + 30), y_pos , (48 + ch));
 }

 else if((value > 999) && (value <= 9999))
 {
 ch = ((value % 10000)/ 1000);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));

 ch = ((value % 1000) / 100);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));

 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 18), y_pos , (48 + ch));

 ch = (value % 10);
 OLED_print_char((x_pos + 24), y_pos , (48 + ch));
 OLED_print_char((x_pos + 30), y_pos , 32);
 }
 else if((value > 99) && (value <= 999))
 {
 ch = ((value % 1000) / 100);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));

 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));

 ch = (value % 10);
 OLED_print_char((x_pos + 18), y_pos , (48 + ch));
 OLED_print_char((x_pos + 24), y_pos , 32);
 OLED_print_char((x_pos + 30), y_pos , 32);
 }
 else if((value > 9) && (value <= 99))
 {
 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));

 ch = (value % 10);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));

 OLED_print_char((x_pos + 18), y_pos , 32);
 OLED_print_char((x_pos + 24), y_pos , 32);
 OLED_print_char((x_pos + 30), y_pos , 32);
 }
 else
 {
 ch = (value % 10);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));
 OLED_print_char((x_pos + 12), y_pos , 32);
 OLED_print_char((x_pos + 18), y_pos , 32);
 OLED_print_char((x_pos + 24), y_pos , 32);
 OLED_print_char((x_pos + 30), y_pos , 32);
 }
}


void OLED_print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points)
{
 unsigned char ch = 0x00;

 OLED_print_char(x_pos, y_pos, '.');

 ch = (value / 1000);
 OLED_print_char((x_pos + 6), y_pos , (48 + ch));

 if(points > 1)
 {
 ch = ((value % 1000) / 100);
 OLED_print_char((x_pos + 12), y_pos , (48 + ch));
 OLED_print_char((x_pos + 18), y_pos , 0x20);

 if(points > 2)
 {
 ch = ((value % 100) / 10);
 OLED_print_char((x_pos + 18), y_pos , (48 + ch));
 OLED_print_char((x_pos + 24), y_pos , 0x20);

 if(points > 3)
 {
 ch = (value % 10);
 OLED_print_char((x_pos + 24), y_pos , (48 + ch));
 OLED_print_char((x_pos + 30), y_pos , 0x20);
 }
 }
 }
}


void OLED_print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points)
{
 signed long tmp = 0x00;

 tmp = value;
 OLED_print_int(x_pos, y_pos, tmp);
 tmp = ((value - tmp) * 10000);

 if(tmp < 0)
 {
 tmp = -tmp;
 }

 if((value >= 10000) && (value < 100000))
 {
 OLED_print_decimal((x_pos + 36), y_pos, tmp, points);
 }
 else if((value >= 1000) && (value < 10000))
 {
 OLED_print_decimal((x_pos + 30), y_pos, tmp, points);
 }
 else if((value >= 100) && (value < 1000))
 {
 OLED_print_decimal((x_pos + 24), y_pos, tmp, points);
 }
 else if((value >= 10) && (value < 100))
 {
 OLED_print_decimal((x_pos + 18), y_pos, tmp, points);
 }
 else if(value < 10)
 {
 OLED_print_decimal((x_pos + 12), y_pos, tmp, points);
 if(value < 0)
 {
 OLED_print_char(x_pos, y_pos, '-');
 }
 else
 {
 OLED_print_char(x_pos, y_pos, ' ');
 }
 }
}


void Draw_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned char colour)
{
 unsigned char value = 0x00;
 unsigned char page = 0x00;
 unsigned char bit_pos = 0x00;

 page = (y_pos /  8 );
 bit_pos = (y_pos - (page *  8 ));
 value = buffer[((page *  128 ) + x_pos)];

 if((colour &  1 ) !=  0 )
 {
 value |= (1 << bit_pos);
 }
 else
 {
 value &= (~(1 << bit_pos));
 }

 buffer[((page *  128 ) + x_pos)] = value;
 OLED_gotoxy(x_pos, page);
 OLED_write(value,  0x60 );
}


void Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char colour)
{
 signed int dx = 0x0000;
 signed int dy = 0x0000;
 signed int stepx = 0x0000;
 signed int stepy = 0x0000;
 signed int fraction = 0x0000;

 dy = (y2 - y1);
 dx = (x2 - x1);

 if (dy < 0)
 {
 dy = -dy;
 stepy = -1;
 }
 else
 {
 stepy = 1;
 }

 if (dx < 0)
 {
 dx = -dx;
 stepx = -1;
 }
 else
 {
 stepx = 1;
 }

 dx <<= 1;
 dy <<= 1;

 Draw_Pixel(x1, y1, colour);

 if(dx > dy)
 {
 fraction = (dy - (dx >> 1));
 while (x1 != x2)
 {
 if(fraction >= 0)
 {
 y1 += stepy;
 fraction -= dx;
 }

 x1 += stepx;
 fraction += dy;

 Draw_Pixel(x1, y1, colour);
 }
 }
 else
 {
 fraction = (dx - (dy >> 1));
 while (y1 != y2)
 {
 if (fraction >= 0)
 {
 x1 += stepx;
 fraction -= dy;
 }

 y1 += stepy;
 fraction += dx;

 Draw_Pixel(x1, y1, colour);
 }
 }
}


void Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char colour, unsigned char type)
{
 unsigned short i = 0x00;
 unsigned short xmin = 0x00;
 unsigned short xmax = 0x00;
 unsigned short ymin = 0x00;
 unsigned short ymax = 0x00;

 if(fill !=  0 )
 {
 if(x1 < x2)
 {
 xmin = x1;
 xmax = x2;
 }
 else
 {
 xmin = x2;
 xmax = x1;
 }

 if(y1 < y2)
 {
 ymin = y1;
 ymax = y2;
 }
 else
 {
 ymin = y2;
 ymax = y1;
 }

 for(; xmin <= xmax; ++xmin)
 {
 for(i = ymin; i <= ymax; ++i)
 {
 Draw_Pixel(xmin, i, colour);
 }
 }
 }

 else
 {
 Draw_Line(x1, y1, x2, y1, colour);
 Draw_Line(x1, y2, x2, y2, colour);
 Draw_Line(x1, y1, x1, y2, colour);
 Draw_Line(x2, y1, x2, y2, colour);
 }

 if(type !=  0 )
 {
 Draw_Pixel(x1, y1, ~colour);
 Draw_Pixel(x1, y2, ~colour);
 Draw_Pixel(x2, y1, ~colour);
 Draw_Pixel(x2, y2, ~colour);
 }
}


void Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned char colour)
{
 signed int a = 0x0000;
 signed int b = 0x0000;
 signed int P = 0x0000;

 b = radius;
 P = (1 - b);

 do
 {
 if(fill !=  0 )
 {
 Draw_Line((xc - a), (yc + b), (xc + a), (yc + b), colour);
 Draw_Line((xc - a), (yc - b), (xc + a), (yc - b), colour);
 Draw_Line((xc - b), (yc + a), (xc + b), (yc + a), colour);
 Draw_Line((xc - b), (yc - a), (xc + b), (yc - a), colour);
 }
 else
 {
 Draw_Pixel((xc + a), (yc + b), colour);
 Draw_Pixel((xc + b), (yc + a), colour);
 Draw_Pixel((xc - a), (yc + b), colour);
 Draw_Pixel((xc - b), (yc + a), colour);
 Draw_Pixel((xc + b), (yc - a), colour);
 Draw_Pixel((xc + a), (yc - b), colour);
 Draw_Pixel((xc - a), (yc - b), colour);
 Draw_Pixel((xc - b), (yc - a), colour);
 }

 if(P < 0)
 {
 P += (3 + (2 * a++));
 }
 else
 {
 P += (5 + (2 * ((a++) - (b--))));
 }
 }while(a <= b);
}
#line 1 "c:/users/shawon/desktop/nucleo 401 lm75 oled thermometer/background.c"
const unsigned char image[1024] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x01, 0x01, 0x01, 0x01, 0x81, 0x41, 0xA1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xA1,
0x41, 0x81, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,
0xFF, 0x00, 0x00, 0xFE, 0x01, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0xFD, 0x7A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00, 0xFF,
0xFF, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0B, 0x17, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x17,
0x0B, 0x05, 0x02, 0x01, 0xF9, 0x01, 0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01,
0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01, 0x01, 0x01, 0x01, 0x39, 0x01, 0x01,
0x01, 0x01, 0xF9, 0x01, 0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01, 0x01, 0x01,
0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01, 0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01,
0xF9, 0x01, 0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01, 0x01, 0x01, 0x01, 0x39,
0x01, 0x01, 0x01, 0x01, 0xF9, 0x01, 0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01,
0x01, 0x01, 0x01, 0x39, 0x01, 0x01, 0x01, 0x01, 0xF9, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF8, 0x89, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xA8, 0xB8, 0x01, 0xF8, 0x88, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x20, 0xF8, 0x01, 0xF8, 0x88, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xA8, 0xE8,
0x01, 0xF8, 0x88, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xF8, 0xA8, 0xF8, 0x01, 0xF8, 0x88, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x88, 0xF8, 0x80, 0x00, 0xF8, 0x89, 0xF8, 0x00, 0xF8, 0x88, 0xF8, 0x00, 0xFF,
0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#line 8 "C:/Users/Shawon/Desktop/Nucleo 401 LM75 OLED Thermometer/Temp.c"
void setup_mcu();
void background_layer();
void draw_bar(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char on_off);


void main()
{
 float t_diff = 0.0;
 float t_new = 0.0;
 float t_old = 0.0;

 setup_mcu();
 background_layer();

 while(1)
 {
 t_new = get_temp();

 if((t_new != t_old) && ((t_new >= 0) && (t_new <= 100)))
 {
 t_diff = (t_new - t_old);
 Draw_Line(20, 25, 122, 25,  1 );
 Draw_Line(20, 32, 122, 32,  1 );

 if(t_old <= t_new)
 {
 Draw_Rectangle( 20 , 27, (t_old + t_diff +  20  - 1), 30,  1 ,  1 ,  0 );
 Draw_Line((t_old + t_diff +  20 ), 28, (t_old + t_diff +  20 ), 29,  1 );
 }
 else
 {
 Draw_Rectangle((t_new +  20 ), 27, (t_old +  20  + 2), 30,  1 ,  0 ,  0 );
 Draw_Line((t_new +  20 ), 28, (t_new +  20 ), 29,  1 );
 }

 OLED_print_string(56, 7, "          ");
 OLED_print_float(56, 7, t_new, 3);
 t_old = t_new;
 }

 delay_ms(600);
 };
}


void setup_mcu()
{
 GPIO_Clk_Enable(&GPIOA_BASE);
 GPIO_Clk_Enable(&GPIOB_BASE);

 GPIO_Config(&GPIOA_BASE,
 _GPIO_PINMASK_5,
 (_GPIO_CFG_MODE_OUTPUT | _GPIO_CFG_SPEED_MAX | _GPIO_CFG_OTYPE_PP));

 OLED_init();
 LM75_init();
}


void background_layer()
{
 OLED_draw_bitmap(0, 0, 127, 7, (unsigned char *)image);
 OLED_print_string(15, 0, "LM75 Thermometer");
 OLED_print_string(24, 7, "T/'C: ");
}


void draw_bar(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char on_off)
{
 Draw_Rectangle(x1, y1, x2, y2,  1 , on_off,  0 );
 Draw_Line(x1, 28, x1, 29,  1 );
}
