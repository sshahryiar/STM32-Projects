
ALS_Prox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000369c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003840  08003840  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003840  08003840  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003840  08003840  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003854  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003854  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072c0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161b  00000000  00000000  000272f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00028910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00029078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164ad  00000000  00000000  00029740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000989a  00000000  00000000  0003fbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee51  00000000  00000000  00049487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c82d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f20  00000000  00000000  000c832c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003794 	.word	0x08003794

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003794 	.word	0x08003794

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__gesf2>:
 8000ba8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bac:	e006      	b.n	8000bbc <__cmpsf2+0x4>
 8000bae:	bf00      	nop

08000bb0 <__lesf2>:
 8000bb0:	f04f 0c01 	mov.w	ip, #1
 8000bb4:	e002      	b.n	8000bbc <__cmpsf2+0x4>
 8000bb6:	bf00      	nop

08000bb8 <__cmpsf2>:
 8000bb8:	f04f 0c01 	mov.w	ip, #1
 8000bbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d011      	beq.n	8000bf8 <__cmpsf2+0x40>
 8000bd4:	b001      	add	sp, #4
 8000bd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bda:	bf18      	it	ne
 8000bdc:	ea90 0f01 	teqne	r0, r1
 8000be0:	bf58      	it	pl
 8000be2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000be6:	bf88      	it	hi
 8000be8:	17c8      	asrhi	r0, r1, #31
 8000bea:	bf38      	it	cc
 8000bec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bf0:	bf18      	it	ne
 8000bf2:	f040 0001 	orrne.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	d102      	bne.n	8000c04 <__cmpsf2+0x4c>
 8000bfe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c02:	d105      	bne.n	8000c10 <__cmpsf2+0x58>
 8000c04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c08:	d1e4      	bne.n	8000bd4 <__cmpsf2+0x1c>
 8000c0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c0e:	d0e1      	beq.n	8000bd4 <__cmpsf2+0x1c>
 8000c10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_cfrcmple>:
 8000c18:	4684      	mov	ip, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4661      	mov	r1, ip
 8000c1e:	e7ff      	b.n	8000c20 <__aeabi_cfcmpeq>

08000c20 <__aeabi_cfcmpeq>:
 8000c20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c22:	f7ff ffc9 	bl	8000bb8 <__cmpsf2>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	bf48      	it	mi
 8000c2a:	f110 0f00 	cmnmi.w	r0, #0
 8000c2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c30 <__aeabi_fcmpeq>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff fff4 	bl	8000c20 <__aeabi_cfcmpeq>
 8000c38:	bf0c      	ite	eq
 8000c3a:	2001      	moveq	r0, #1
 8000c3c:	2000      	movne	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_fcmplt>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff ffea 	bl	8000c20 <__aeabi_cfcmpeq>
 8000c4c:	bf34      	ite	cc
 8000c4e:	2001      	movcc	r0, #1
 8000c50:	2000      	movcs	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_fcmple>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffe0 	bl	8000c20 <__aeabi_cfcmpeq>
 8000c60:	bf94      	ite	ls
 8000c62:	2001      	movls	r0, #1
 8000c64:	2000      	movhi	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_fcmpge>:
 8000c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c70:	f7ff ffd2 	bl	8000c18 <__aeabi_cfrcmple>
 8000c74:	bf94      	ite	ls
 8000c76:	2001      	movls	r0, #1
 8000c78:	2000      	movhi	r0, #0
 8000c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fcmpgt>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff ffc8 	bl	8000c18 <__aeabi_cfrcmple>
 8000c88:	bf34      	ite	cc
 8000c8a:	2001      	movcc	r0, #1
 8000c8c:	2000      	movcs	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_f2uiz>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	d20e      	bcs.n	8000cb6 <__aeabi_f2uiz+0x22>
 8000c98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c9c:	d30b      	bcc.n	8000cb6 <__aeabi_f2uiz+0x22>
 8000c9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ca2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ca6:	d409      	bmi.n	8000cbc <__aeabi_f2uiz+0x28>
 8000ca8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb4:	4770      	bx	lr
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	4770      	bx	lr
 8000cbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cc0:	d101      	bne.n	8000cc6 <__aeabi_f2uiz+0x32>
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	d102      	bne.n	8000ccc <__aeabi_f2uiz+0x38>
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cca:	4770      	bx	lr
 8000ccc:	f04f 0000 	mov.w	r0, #0
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t val1 = 0x0000;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	80fb      	strh	r3, [r7, #6]
  uint16_t val2 = 0x0000;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f000 f9f7 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f861 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f000 f8d3 	bl	8000e94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cee:	f000 f8a3 	bl	8000e38 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  LCD_init();
 8000cf2:	f002 f8c9 	bl	8002e88 <LCD_init>
  LCD_clear_home();
 8000cf6:	f002 f9e0 	bl	80030ba <LCD_clear_home>

  LCD_goto(0, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f002 f9e8 	bl	80030d2 <LCD_goto>
  LCD_putstr("Device ID:");
 8000d02:	4824      	ldr	r0, [pc, #144]	; (8000d94 <main+0xc0>)
 8000d04:	f002 f9c4 	bl	8003090 <LCD_putstr>

  val1 = (uint16_t)TMD2771x_init();
 8000d08:	f002 fa1a 	bl	8003140 <TMD2771x_init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	80fb      	strh	r3, [r7, #6]

  LCD_goto(0, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2000      	movs	r0, #0
 8000d16:	f002 f9dc 	bl	80030d2 <LCD_goto>

  switch(val1)
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d002      	beq.n	8000d26 <main+0x52>
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d004      	beq.n	8000d2e <main+0x5a>
 8000d24:	e007      	b.n	8000d36 <main+0x62>
  {
		case 1:
		{
			LCD_putstr("TMD27711");
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <main+0xc4>)
 8000d28:	f002 f9b2 	bl	8003090 <LCD_putstr>
			break;
 8000d2c:	e007      	b.n	8000d3e <main+0x6a>
		}

		case 2:
		{
			LCD_putstr("TMD27713");
 8000d2e:	481b      	ldr	r0, [pc, #108]	; (8000d9c <main+0xc8>)
 8000d30:	f002 f9ae 	bl	8003090 <LCD_putstr>
			break;
 8000d34:	e003      	b.n	8000d3e <main+0x6a>
		}

		default:
		{
			LCD_putstr("Unknown Device!");
 8000d36:	481a      	ldr	r0, [pc, #104]	; (8000da0 <main+0xcc>)
 8000d38:	f002 f9aa 	bl	8003090 <LCD_putstr>
		    break;
 8000d3c:	bf00      	nop
		}
  }

  HAL_Delay(1600);
 8000d3e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8000d42:	f000 fa29 	bl	8001198 <HAL_Delay>

  LCD_clear_home();
 8000d46:	f002 f9b8 	bl	80030ba <LCD_clear_home>
  LCD_goto(0, 0);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f002 f9c0 	bl	80030d2 <LCD_goto>
  LCD_putstr("A.L.S/lux:");
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <main+0xd0>)
 8000d54:	f002 f99c 	bl	8003090 <LCD_putstr>
  LCD_goto(0, 1);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f002 f9b9 	bl	80030d2 <LCD_goto>
  LCD_putstr("Proximity:");
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <main+0xd4>)
 8000d62:	f002 f995 	bl	8003090 <LCD_putstr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TMD2771x_get_readings(&val1, &val2);
 8000d66:	1d3a      	adds	r2, r7, #4
 8000d68:	1dbb      	adds	r3, r7, #6
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fa7f 	bl	8003270 <TMD2771x_get_readings>

	  print_I(11, 0, val1);
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	461a      	mov	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	200b      	movs	r0, #11
 8000d7a:	f002 fb57 	bl	800342c <print_I>
	  print_I(11, 1, val2);
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	461a      	mov	r2, r3
 8000d82:	2101      	movs	r1, #1
 8000d84:	200b      	movs	r0, #11
 8000d86:	f002 fb51 	bl	800342c <print_I>

	  HAL_Delay(400);
 8000d8a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d8e:	f000 fa03 	bl	8001198 <HAL_Delay>
	  TMD2771x_get_readings(&val1, &val2);
 8000d92:	e7e8      	b.n	8000d66 <main+0x92>
 8000d94:	080037ac 	.word	0x080037ac
 8000d98:	080037b8 	.word	0x080037b8
 8000d9c:	080037c4 	.word	0x080037c4
 8000da0:	080037d0 	.word	0x080037d0
 8000da4:	080037e0 	.word	0x080037e0
 8000da8:	080037ec 	.word	0x080037ec

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fce2 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de0:	2302      	movs	r3, #2
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fc41 	bl	800267c <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e00:	f000 f89e 	bl	8000f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 feac 	bl	8002b7c <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2a:	f000 f889 	bl	8000f40 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <MX_I2C1_Init+0x58>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 20000;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e44:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e48:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e78:	f000 fc32 	bl	80016e0 <HAL_I2C_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000e82:	f000 f85d 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000028 	.word	0x20000028
 8000e90:	40005400 	.word	0x40005400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000f08:	2200      	movs	r2, #0
 8000f0a:	21fc      	movs	r1, #252	; 0xfc
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000f0e:	f000 fbcf 	bl	80016b0 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000f12:	23fc      	movs	r3, #252	; 0xfc
 8000f14:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000f2a:	f000 fa3d 	bl	80013a8 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x60>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_MspInit+0x60>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_I2C_MspInit+0x70>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d123      	bne.n	8001018 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_I2C_MspInit+0x74>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_I2C_MspInit+0x74>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_I2C_MspInit+0x74>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fec:	2312      	movs	r3, #18
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <HAL_I2C_MspInit+0x78>)
 8000ffc:	f000 f9d4 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_I2C_MspInit+0x74>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_I2C_MspInit+0x74>)
 8001006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100a:	61d3      	str	r3, [r2, #28]
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_I2C_MspInit+0x74>)
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40005400 	.word	0x40005400
 8001024:	40021000 	.word	0x40021000
 8001028:	40010c00 	.word	0x40010c00

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001072:	f000 f875 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}

0800107a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ae:	f7ff ffe4 	bl	800107a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 fb43 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff fe0d 	bl	8000cd4 <main>
  bx lr
 80010ba:	4770      	bx	lr
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c4:	08003848 	.word	0x08003848
  ldr r2, =_sbss
 80010c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010cc:	20000080 	.word	0x20000080

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x28>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x28>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f92b 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff ff2c 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f935 	bl	800138e <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f90b 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000008 	.word	0x20000008
 8001180:	2000007c 	.word	0x2000007c

08001184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	2000007c 	.word	0x2000007c

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff fff0 	bl	8001184 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffe0 	bl	8001184 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff90 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff49 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff5e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffb0 	bl	80012fc <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e169      	b.n	8001690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013bc:	2201      	movs	r2, #1
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8158 	bne.w	800168a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a9a      	ldr	r2, [pc, #616]	; (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d05e      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013e4:	4a98      	ldr	r2, [pc, #608]	; (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d875      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013ea:	4a98      	ldr	r2, [pc, #608]	; (800164c <HAL_GPIO_Init+0x2a4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d058      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013f0:	4a96      	ldr	r2, [pc, #600]	; (800164c <HAL_GPIO_Init+0x2a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d86f      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013f6:	4a96      	ldr	r2, [pc, #600]	; (8001650 <HAL_GPIO_Init+0x2a8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d052      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013fc:	4a94      	ldr	r2, [pc, #592]	; (8001650 <HAL_GPIO_Init+0x2a8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d869      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001402:	4a94      	ldr	r2, [pc, #592]	; (8001654 <HAL_GPIO_Init+0x2ac>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d04c      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001408:	4a92      	ldr	r2, [pc, #584]	; (8001654 <HAL_GPIO_Init+0x2ac>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d863      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800140e:	4a92      	ldr	r2, [pc, #584]	; (8001658 <HAL_GPIO_Init+0x2b0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d046      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001414:	4a90      	ldr	r2, [pc, #576]	; (8001658 <HAL_GPIO_Init+0x2b0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d85d      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d82a      	bhi.n	8001474 <HAL_GPIO_Init+0xcc>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d859      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <HAL_GPIO_Init+0x80>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014a3 	.word	0x080014a3
 800142c:	0800147d 	.word	0x0800147d
 8001430:	0800148f 	.word	0x0800148f
 8001434:	080014d1 	.word	0x080014d1
 8001438:	080014d7 	.word	0x080014d7
 800143c:	080014d7 	.word	0x080014d7
 8001440:	080014d7 	.word	0x080014d7
 8001444:	080014d7 	.word	0x080014d7
 8001448:	080014d7 	.word	0x080014d7
 800144c:	080014d7 	.word	0x080014d7
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014d7 	.word	0x080014d7
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014d7 	.word	0x080014d7
 800146c:	08001485 	.word	0x08001485
 8001470:	08001499 	.word	0x08001499
 8001474:	4a79      	ldr	r2, [pc, #484]	; (800165c <HAL_GPIO_Init+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e029      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e024      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01f      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e01a      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e013      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e009      	b.n	80014d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e003      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          break;
 80014d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	d801      	bhi.n	80014e2 <HAL_GPIO_Init+0x13a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_Init+0x13e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	; 0xff
 80014ec:	d802      	bhi.n	80014f4 <HAL_GPIO_Init+0x14c>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x152>
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	3b08      	subs	r3, #8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	210f      	movs	r1, #15
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80b1 	beq.w	800168a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001528:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x2b8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x2b8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001540:	4a48      	ldr	r2, [pc, #288]	; (8001664 <HAL_GPIO_Init+0x2bc>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_GPIO_Init+0x2c0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d013      	beq.n	8001594 <HAL_GPIO_Init+0x1ec>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <HAL_GPIO_Init+0x2c4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00d      	beq.n	8001590 <HAL_GPIO_Init+0x1e8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3e      	ldr	r2, [pc, #248]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3d      	ldr	r2, [pc, #244]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_GPIO_Init+0x1e0>
 8001584:	2303      	movs	r3, #3
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001588:	2304      	movs	r3, #4
 800158a:	e004      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 800158c:	2302      	movs	r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001594:	2300      	movs	r3, #0
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	f002 0203 	and.w	r2, r2, #3
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	4093      	lsls	r3, r2
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a6:	492f      	ldr	r1, [pc, #188]	; (8001664 <HAL_GPIO_Init+0x2bc>)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	492c      	ldr	r1, [pc, #176]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4928      	ldr	r1, [pc, #160]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4922      	ldr	r1, [pc, #136]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491e      	ldr	r1, [pc, #120]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4918      	ldr	r1, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4914      	ldr	r1, [pc, #80]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d021      	beq.n	800167c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	490e      	ldr	r1, [pc, #56]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
 8001644:	e021      	b.n	800168a <HAL_GPIO_Init+0x2e2>
 8001646:	bf00      	nop
 8001648:	10320000 	.word	0x10320000
 800164c:	10310000 	.word	0x10310000
 8001650:	10220000 	.word	0x10220000
 8001654:	10210000 	.word	0x10210000
 8001658:	10120000 	.word	0x10120000
 800165c:	10110000 	.word	0x10110000
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	40010800 	.word	0x40010800
 800166c:	40010c00 	.word	0x40010c00
 8001670:	40011000 	.word	0x40011000
 8001674:	40011400 	.word	0x40011400
 8001678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_GPIO_Init+0x304>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <HAL_GPIO_Init+0x304>)
 8001686:	4013      	ands	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae8e 	bne.w	80013bc <HAL_GPIO_Init+0x14>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	; 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016cc:	e003      	b.n	80016d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e12b      	b.n	800194a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc52 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001744:	f001 fb6e 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <HAL_I2C_Init+0x274>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d807      	bhi.n	8001764 <HAL_I2C_Init+0x84>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_I2C_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e006      	b.n	8001772 <HAL_I2C_Init+0x92>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a7d      	ldr	r2, [pc, #500]	; (800195c <HAL_I2C_Init+0x27c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0e7      	b.n	800194a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a78      	ldr	r2, [pc, #480]	; (8001960 <HAL_I2C_Init+0x280>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_I2C_Init+0x274>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d802      	bhi.n	80017b4 <HAL_I2C_Init+0xd4>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	e009      	b.n	80017c8 <HAL_I2C_Init+0xe8>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_I2C_Init+0x284>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	3301      	adds	r3, #1
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <HAL_I2C_Init+0x274>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d819      	bhi.n	800181c <HAL_I2C_Init+0x13c>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e59      	subs	r1, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017fc:	400b      	ands	r3, r1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_I2C_Init+0x138>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001810:	3301      	adds	r3, #1
 8001812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001816:	e051      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001818:	2304      	movs	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x168>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x18e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x196>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x1bc>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	460b      	mov	r3, r1
 8001976:	817b      	strh	r3, [r7, #10]
 8001978:	4613      	mov	r3, r2
 800197a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fc02 	bl	8001184 <HAL_GetTick>
 8001980:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b20      	cmp	r3, #32
 800198c:	f040 80e0 	bne.w	8001b50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	4970      	ldr	r1, [pc, #448]	; (8001b5c <HAL_I2C_Master_Transmit+0x1f4>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fc92 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0d3      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x50>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0cc      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d007      	beq.n	80019de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2221      	movs	r2, #33	; 0x21
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2210      	movs	r2, #16
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	893a      	ldrh	r2, [r7, #8]
 8001a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fafc 	bl	8002024 <I2C_MasterRequestWrite>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e08d      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a4c:	e066      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fd0c 	bl	8002470 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d11b      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d017      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fcfc 	bl	80024f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01a      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d194      	bne.n	8001a4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e000      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b50:	2302      	movs	r3, #2
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	00100002 	.word	0x00100002
 8001b60:	ffff0000 	.word	0xffff0000

08001b64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	460b      	mov	r3, r1
 8001b72:	817b      	strh	r3, [r7, #10]
 8001b74:	4613      	mov	r3, r2
 8001b76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff fb02 	bl	8001184 <HAL_GetTick>
 8001b80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	f040 823f 	bne.w	800200e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2319      	movs	r3, #25
 8001b96:	2201      	movs	r2, #1
 8001b98:	497f      	ldr	r1, [pc, #508]	; (8001d98 <HAL_I2C_Master_Receive+0x234>)
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fb92 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e232      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_Master_Receive+0x54>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e22b      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d007      	beq.n	8001bde <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2222      	movs	r2, #34	; 0x22
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	893a      	ldrh	r2, [r7, #8]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <HAL_I2C_Master_Receive+0x238>)
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c20:	8979      	ldrh	r1, [r7, #10]
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fa7e 	bl	8002128 <I2C_MasterRequestRead>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1ec      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e1c0      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d11e      	bne.n	8001cac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7e:	b672      	cpsid	i
}
 8001c80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ca8:	b662      	cpsie	i
}
 8001caa:	e035      	b.n	8001d18 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d11e      	bne.n	8001cf2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cee:	b662      	cpsie	i
}
 8001cf0:	e012      	b.n	8001d18 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d18:	e166      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	f200 811f 	bhi.w	8001f62 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d123      	bne.n	8001d74 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fc1f 	bl	8002574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e167      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d72:	e139      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d152      	bne.n	8001e22 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	2200      	movs	r2, #0
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <HAL_I2C_Master_Receive+0x23c>)
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fa9c 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e13c      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
 8001d96:	bf00      	nop
 8001d98:	00100002 	.word	0x00100002
 8001d9c:	ffff0000 	.word	0xffff0000
 8001da0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dea:	b662      	cpsie	i
}
 8001dec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e20:	e0e2      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	2200      	movs	r2, #0
 8001e2a:	497b      	ldr	r1, [pc, #492]	; (8002018 <HAL_I2C_Master_Receive+0x4b4>)
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fa49 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0e9      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e82:	4b66      	ldr	r3, [pc, #408]	; (800201c <HAL_I2C_Master_Receive+0x4b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_I2C_Master_Receive+0x4bc>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a1a      	lsrs	r2, r3, #8
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00da      	lsls	r2, r3, #3
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d118      	bne.n	8001eda <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001eca:	b662      	cpsie	i
}
 8001ecc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e09a      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d1d9      	bne.n	8001e9c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f2a:	b662      	cpsie	i
}
 8001f2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f60:	e042      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fb04 	bl	8002574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e04c      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d118      	bne.n	8001fe8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f ae94 	bne.w	8001d1a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	00010004 	.word	0x00010004
 800201c:	20000000 	.word	0x20000000
 8002020:	14f8b589 	.word	0x14f8b589

08002024 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	460b      	mov	r3, r1
 8002032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d006      	beq.n	800204e <I2C_MasterRequestWrite+0x2a>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d003      	beq.n	800204e <I2C_MasterRequestWrite+0x2a>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800204c:	d108      	bne.n	8002060 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	2b12      	cmp	r3, #18
 8002066:	d107      	bne.n	8002078 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f91d 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209e:	d103      	bne.n	80020a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e035      	b.n	8002118 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b4:	d108      	bne.n	80020c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	e01b      	b.n	8002100 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	11db      	asrs	r3, r3, #7
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f003 0306 	and.w	r3, r3, #6
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f063 030f 	orn	r3, r3, #15
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	490e      	ldr	r1, [pc, #56]	; (8002120 <I2C_MasterRequestWrite+0xfc>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f943 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e010      	b.n	8002118 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020f6:	897b      	ldrh	r3, [r7, #10]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <I2C_MasterRequestWrite+0x100>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f933 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	00010008 	.word	0x00010008
 8002124:	00010002 	.word	0x00010002

08002128 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800214c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d006      	beq.n	8002162 <I2C_MasterRequestRead+0x3a>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d003      	beq.n	8002162 <I2C_MasterRequestRead+0x3a>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002160:	d108      	bne.n	8002174 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e00b      	b.n	800218c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	2b11      	cmp	r3, #17
 800217a:	d107      	bne.n	800218c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f893 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b2:	d103      	bne.n	80021bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e079      	b.n	80022b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021c8:	d108      	bne.n	80021dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e05f      	b.n	800229c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021dc:	897b      	ldrh	r3, [r7, #10]
 80021de:	11db      	asrs	r3, r3, #7
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 0306 	and.w	r3, r3, #6
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f063 030f 	orn	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4930      	ldr	r1, [pc, #192]	; (80022bc <I2C_MasterRequestRead+0x194>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f8b9 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e054      	b.n	80022b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4929      	ldr	r1, [pc, #164]	; (80022c0 <I2C_MasterRequestRead+0x198>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f8a9 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e044      	b.n	80022b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f831 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002276:	d103      	bne.n	8002280 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e017      	b.n	80022b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002284:	897b      	ldrh	r3, [r7, #10]
 8002286:	11db      	asrs	r3, r3, #7
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0306 	and.w	r3, r3, #6
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f063 030e 	orn	r3, r3, #14
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4907      	ldr	r1, [pc, #28]	; (80022c0 <I2C_MasterRequestRead+0x198>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f865 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	00010008 	.word	0x00010008
 80022c0:	00010002 	.word	0x00010002

080022c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d4:	e025      	b.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d021      	beq.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7fe ff51 	bl	8001184 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e023      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10d      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	e00c      	b.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d0b6      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002380:	e051      	b.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d123      	bne.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0204 	orr.w	r2, r3, #4
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e046      	b.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d021      	beq.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7fe fecf 	bl	8001184 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f043 0220 	orr.w	r2, r3, #32
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e020      	b.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10c      	bne.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e00b      	b.n	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d18d      	bne.n	8002382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247c:	e02d      	b.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8ce 	bl	8002620 <I2C_IsAcknowledgeFailed>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e02d      	b.n	80024ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d021      	beq.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7fe fe75 	bl	8001184 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d116      	bne.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e007      	b.n	80024ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d1ca      	bne.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024fe:	e02d      	b.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f88d 	bl	8002620 <I2C_IsAcknowledgeFailed>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e02d      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d021      	beq.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7fe fe34 	bl	8001184 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e007      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d1ca      	bne.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002580:	e042      	b.n	8002608 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b10      	cmp	r3, #16
 800258e:	d119      	bne.n	80025c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0210 	mvn.w	r2, #16
 8002598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e029      	b.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c4:	f7fe fdde 	bl	8001184 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d302      	bcc.n	80025da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d1b5      	bne.n	8002582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002636:	d11b      	bne.n	8002670 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002640:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e26c      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d112      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d10b      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d06c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x12c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d168      	bne.n	80027a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e246      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x76>
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7f      	ldr	r2, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0xbc>
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a67      	ldr	r2, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fd14 	bl	8001184 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fd10 	bl	8001184 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1fa      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xe4>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fd00 	bl	8001184 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fcfc 	bl	8001184 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1e6      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x10c>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1ba      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4939      	ldr	r1, [pc, #228]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fcb5 	bl	8001184 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fcb1 	bl	8001184 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e19b      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fc94 	bl	8001184 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe fc90 	bl	8001184 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e17a      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03a      	beq.n	8002900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe fc74 	bl	8001184 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe fc70 	bl	8001184 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e15a      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 fac4 	bl	8002e4c <RCC_Delay>
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fc5a 	bl	8001184 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d2:	e00f      	b.n	80028f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fc56 	bl	8001184 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d908      	bls.n	80028f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e140      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	42420000 	.word	0x42420000
 80028f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b9e      	ldr	r3, [pc, #632]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e9      	bne.n	80028d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a6 	beq.w	8002a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b97      	ldr	r3, [pc, #604]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b94      	ldr	r3, [pc, #592]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a93      	ldr	r2, [pc, #588]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b91      	ldr	r3, [pc, #580]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b8b      	ldr	r3, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a8a      	ldr	r2, [pc, #552]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fc17 	bl	8001184 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe fc13 	bl	8001184 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0fd      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x312>
 8002980:	4b7b      	ldr	r3, [pc, #492]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a7a      	ldr	r2, [pc, #488]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e02d      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x334>
 8002996:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a75      	ldr	r2, [pc, #468]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a72      	ldr	r2, [pc, #456]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	e01c      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x356>
 80029b8:	4b6d      	ldr	r3, [pc, #436]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a6c      	ldr	r2, [pc, #432]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a66      	ldr	r2, [pc, #408]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a63      	ldr	r2, [pc, #396]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fbc7 	bl	8001184 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fbc3 	bl	8001184 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0ab      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <HAL_RCC_OscConfig+0x37e>
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fbb1 	bl	8001184 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fbad 	bl	8001184 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e095      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	4b4c      	ldr	r3, [pc, #304]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ee      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b48      	ldr	r3, [pc, #288]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a47      	ldr	r2, [pc, #284]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8081 	beq.w	8002b66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d061      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d146      	bne.n	8002b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_OscConfig+0x4fc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fb81 	bl	8001184 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fb7d 	bl	8001184 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e067      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	492d      	ldr	r1, [pc, #180]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a19      	ldr	r1, [r3, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	4927      	ldr	r1, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x4fc>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fb51 	bl	8001184 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fb4d 	bl	8001184 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e037      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x46a>
 8002b04:	e02f      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <HAL_RCC_OscConfig+0x4fc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fb3a 	bl	8001184 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fb36 	bl	8001184 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e020      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x498>
 8002b32:	e018      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e013      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40007000 	.word	0x40007000
 8002b78:	42420060 	.word	0x42420060

08002b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0d0      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d910      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 0207 	bic.w	r2, r3, #7
 8002ba6:	4965      	ldr	r1, [pc, #404]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b63      	ldr	r3, [pc, #396]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0b8      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd8:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002be2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf0:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	494d      	ldr	r1, [pc, #308]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d040      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d115      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e07f      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e073      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b39      	ldr	r3, [pc, #228]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4936      	ldr	r1, [pc, #216]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fa8a 	bl	8001184 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fa86 	bl	8001184 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e053      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d210      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4922      	ldr	r1, [pc, #136]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e032      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4916      	ldr	r1, [pc, #88]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	490e      	ldr	r1, [pc, #56]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d0a:	f000 f821 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	490a      	ldr	r1, [pc, #40]	; (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	5ccb      	ldrb	r3, [r1, r3]
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1cc>)
 8002d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1d0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe f9e8 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08003828 	.word	0x08003828
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b490      	push	{r4, r7}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d58:	1d3c      	adds	r4, r7, #4
 8002d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d60:	f240 2301 	movw	r3, #513	; 0x201
 8002d64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x40>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x46>
 8002d8e:	e02d      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d92:	623b      	str	r3, [r7, #32]
      break;
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	0c9b      	lsrs	r3, r3, #18
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002da2:	4413      	add	r3, r2
 8002da4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002da8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	0c5b      	lsrs	r3, r3, #17
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dce:	fb02 f203 	mul.w	r2, r2, r3
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	e004      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	623b      	str	r3, [r7, #32]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dee:	623b      	str	r3, [r7, #32]
      break;
 8002df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3728      	adds	r7, #40	; 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc90      	pop	{r4, r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	080037f8 	.word	0x080037f8
 8002e04:	40021000 	.word	0x40021000
 8002e08:	007a1200 	.word	0x007a1200
 8002e0c:	003d0900 	.word	0x003d0900

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20000000 	.word	0x20000000

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff2 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08003838 	.word	0x08003838

08002e4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <RCC_Delay+0x34>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <RCC_Delay+0x38>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a5b      	lsrs	r3, r3, #9
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e68:	bf00      	nop
  }
  while (Delay --);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f9      	bne.n	8002e68 <RCC_Delay+0x1c>
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	20000000 	.word	0x20000000
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <LCD_init>:
#include "LCD.h"


void LCD_init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8002e8c:	200a      	movs	r0, #10
 8002e8e:	f7fe f983 	bl	8001198 <HAL_Delay>

    LCD_RS_LOW;
 8002e92:	2200      	movs	r2, #0
 8002e94:	2104      	movs	r1, #4
 8002e96:	4811      	ldr	r0, [pc, #68]	; (8002edc <LCD_init+0x54>)
 8002e98:	f7fe fc0a 	bl	80016b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f7fe f97b 	bl	8001198 <HAL_Delay>
    toggle_EN_pin();
 8002ea2:	f000 f937 	bl	8003114 <toggle_EN_pin>

    LCD_send(0x33, CMD);
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2033      	movs	r0, #51	; 0x33
 8002eaa:	f000 f819 	bl	8002ee0 <LCD_send>
    LCD_send(0x32, CMD);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2032      	movs	r0, #50	; 0x32
 8002eb2:	f000 f815 	bl	8002ee0 <LCD_send>

    LCD_send((_4_pin_interface | _2_row_display | _5x7_dots), CMD);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2028      	movs	r0, #40	; 0x28
 8002eba:	f000 f811 	bl	8002ee0 <LCD_send>
    LCD_send((display_on | cursor_off | blink_off), CMD);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	200c      	movs	r0, #12
 8002ec2:	f000 f80d 	bl	8002ee0 <LCD_send>
    LCD_send((clear_display), CMD);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f000 f809 	bl	8002ee0 <LCD_send>
    LCD_send((cursor_direction_inc | display_no_shift), CMD);
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2006      	movs	r0, #6
 8002ed2:	f000 f805 	bl	8002ee0 <LCD_send>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40010800 	.word	0x40010800

08002ee0 <LCD_send>:


void LCD_send(unsigned char value, unsigned char mode)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
	switch(mode)
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <LCD_send+0x26>
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d10b      	bne.n	8002f12 <LCD_send+0x32>
	{
		case DAT:
		{
			LCD_RS_HIGH;
 8002efa:	2201      	movs	r2, #1
 8002efc:	2104      	movs	r1, #4
 8002efe:	4809      	ldr	r0, [pc, #36]	; (8002f24 <LCD_send+0x44>)
 8002f00:	f7fe fbd6 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002f04:	e005      	b.n	8002f12 <LCD_send+0x32>
		}
		case CMD:
		{
			LCD_RS_LOW;
 8002f06:	2200      	movs	r2, #0
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4806      	ldr	r0, [pc, #24]	; (8002f24 <LCD_send+0x44>)
 8002f0c:	f7fe fbd0 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002f10:	bf00      	nop
		}
	}

	LCD_4bit_send(value);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f807 	bl	8002f28 <LCD_4bit_send>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40010800 	.word	0x40010800

08002f28 <LCD_4bit_send>:


void LCD_4bit_send(unsigned char lcd_data)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
	unsigned char temp = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
	
	temp = ((lcd_data & 0x80) >> 7);
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	09db      	lsrs	r3, r3, #7
 8002f3a:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <LCD_4bit_send+0x26>
	{
		case 1:
		{ 
			LCD_DB7_HIGH;
 8002f42:	2201      	movs	r2, #1
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	4851      	ldr	r0, [pc, #324]	; (800308c <LCD_4bit_send+0x164>)
 8002f48:	f7fe fbb2 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002f4c:	e005      	b.n	8002f5a <LCD_4bit_send+0x32>
		}
		default:
		{
			LCD_DB7_LOW;
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	484e      	ldr	r0, [pc, #312]	; (800308c <LCD_4bit_send+0x164>)
 8002f54:	f7fe fbac 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002f58:	bf00      	nop
		}
	}
	
	temp = ((lcd_data & 0x40) >> 6);
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	119b      	asrs	r3, r3, #6
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <LCD_4bit_send+0x50>
	{
		case 1:
		{ 
			LCD_DB6_HIGH;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	2140      	movs	r1, #64	; 0x40
 8002f70:	4846      	ldr	r0, [pc, #280]	; (800308c <LCD_4bit_send+0x164>)
 8002f72:	f7fe fb9d 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002f76:	e005      	b.n	8002f84 <LCD_4bit_send+0x5c>
		}
		default:
		{
			LCD_DB6_LOW;
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2140      	movs	r1, #64	; 0x40
 8002f7c:	4843      	ldr	r0, [pc, #268]	; (800308c <LCD_4bit_send+0x164>)
 8002f7e:	f7fe fb97 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002f82:	bf00      	nop
		}
	}
	
	temp = ((lcd_data & 0x20) >> 5);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	115b      	asrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <LCD_4bit_send+0x7a>
	{
		case 1:
		{ 
			LCD_DB5_HIGH;
 8002f96:	2201      	movs	r2, #1
 8002f98:	2120      	movs	r1, #32
 8002f9a:	483c      	ldr	r0, [pc, #240]	; (800308c <LCD_4bit_send+0x164>)
 8002f9c:	f7fe fb88 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002fa0:	e005      	b.n	8002fae <LCD_4bit_send+0x86>
		}
		default:
		{
			LCD_DB5_LOW;
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	4839      	ldr	r0, [pc, #228]	; (800308c <LCD_4bit_send+0x164>)
 8002fa8:	f7fe fb82 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002fac:	bf00      	nop
		}
	}
	
	temp = ((lcd_data & 0x10) >> 4);
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	111b      	asrs	r3, r3, #4
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <LCD_4bit_send+0xa4>
	{
		case 1:
		{ 
			LCD_DB4_HIGH;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	4831      	ldr	r0, [pc, #196]	; (800308c <LCD_4bit_send+0x164>)
 8002fc6:	f7fe fb73 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002fca:	e005      	b.n	8002fd8 <LCD_4bit_send+0xb0>
		}
		default:
		{
			LCD_DB4_LOW;
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2110      	movs	r1, #16
 8002fd0:	482e      	ldr	r0, [pc, #184]	; (800308c <LCD_4bit_send+0x164>)
 8002fd2:	f7fe fb6d 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002fd6:	bf00      	nop
		}
	}

	toggle_EN_pin();
 8002fd8:	f000 f89c 	bl	8003114 <toggle_EN_pin>

	temp = ((lcd_data & 0x08) >> 3);
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	10db      	asrs	r3, r3, #3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <LCD_4bit_send+0xd2>
	{
		case 1:
		{ 
			LCD_DB7_HIGH;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	4826      	ldr	r0, [pc, #152]	; (800308c <LCD_4bit_send+0x164>)
 8002ff4:	f7fe fb5c 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8002ff8:	e005      	b.n	8003006 <LCD_4bit_send+0xde>
		}
		default:
		{
			LCD_DB7_LOW;
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	4823      	ldr	r0, [pc, #140]	; (800308c <LCD_4bit_send+0x164>)
 8003000:	f7fe fb56 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8003004:	bf00      	nop
		}
	}
	
	temp = ((lcd_data & 0x04) >> 2);
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	109b      	asrs	r3, r3, #2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <LCD_4bit_send+0xfc>
	{
		case 1:
		{ 
			LCD_DB6_HIGH;
 8003018:	2201      	movs	r2, #1
 800301a:	2140      	movs	r1, #64	; 0x40
 800301c:	481b      	ldr	r0, [pc, #108]	; (800308c <LCD_4bit_send+0x164>)
 800301e:	f7fe fb47 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8003022:	e005      	b.n	8003030 <LCD_4bit_send+0x108>
		}
		default:
		{
			LCD_DB6_LOW;
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	4818      	ldr	r0, [pc, #96]	; (800308c <LCD_4bit_send+0x164>)
 800302a:	f7fe fb41 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 800302e:	bf00      	nop
		}
	}
	
	temp = ((lcd_data & 0x02) >> 1);
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	105b      	asrs	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <LCD_4bit_send+0x126>
	{
		case 1:
		{ 
			LCD_DB5_HIGH;
 8003042:	2201      	movs	r2, #1
 8003044:	2120      	movs	r1, #32
 8003046:	4811      	ldr	r0, [pc, #68]	; (800308c <LCD_4bit_send+0x164>)
 8003048:	f7fe fb32 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 800304c:	e005      	b.n	800305a <LCD_4bit_send+0x132>
		}
		default:
		{
			LCD_DB5_LOW;
 800304e:	2200      	movs	r2, #0
 8003050:	2120      	movs	r1, #32
 8003052:	480e      	ldr	r0, [pc, #56]	; (800308c <LCD_4bit_send+0x164>)
 8003054:	f7fe fb2c 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8003058:	bf00      	nop
		}
	}
	
	temp = ((lcd_data & 0x01));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
	
	switch(temp)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <LCD_4bit_send+0x14c>
	{
		case 1:
		{ 
			LCD_DB4_HIGH;
 8003068:	2201      	movs	r2, #1
 800306a:	2110      	movs	r1, #16
 800306c:	4807      	ldr	r0, [pc, #28]	; (800308c <LCD_4bit_send+0x164>)
 800306e:	f7fe fb1f 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8003072:	e005      	b.n	8003080 <LCD_4bit_send+0x158>
		}
		default:
		{
			LCD_DB4_LOW;
 8003074:	2200      	movs	r2, #0
 8003076:	2110      	movs	r1, #16
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <LCD_4bit_send+0x164>)
 800307a:	f7fe fb19 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 800307e:	bf00      	nop
		}
	}

	toggle_EN_pin();
 8003080:	f000 f848 	bl	8003114 <toggle_EN_pin>
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40010800 	.word	0x40010800

08003090 <LCD_putstr>:


void LCD_putstr(char *lcd_string)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	do
	{
		LCD_send(*lcd_string++, DAT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff1c 	bl	8002ee0 <LCD_send>
	}while(*lcd_string != '\0');
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f3      	bne.n	8003098 <LCD_putstr+0x8>
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <LCD_clear_home>:
	LCD_send(char_data, DAT);
}


void LCD_clear_home(void)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	af00      	add	r7, sp, #0
	LCD_send(clear_display, CMD);
 80030be:	2100      	movs	r1, #0
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7ff ff0d 	bl	8002ee0 <LCD_send>
	LCD_send(goto_home, CMD);
 80030c6:	2100      	movs	r1, #0
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7ff ff09 	bl	8002ee0 <LCD_send>
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <LCD_goto>:


void LCD_goto(unsigned char x_pos, unsigned char y_pos)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	460a      	mov	r2, r1
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	4613      	mov	r3, r2
 80030e0:	71bb      	strb	r3, [r7, #6]
	if(y_pos == 0)
 80030e2:	79bb      	ldrb	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d108      	bne.n	80030fa <LCD_goto+0x28>
	{
		LCD_send((0x80 | x_pos), CMD);
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fef4 	bl	8002ee0 <LCD_send>
	}
	else
	{
		LCD_send((0x80 | 0x40 | x_pos), CMD);
	}
}
 80030f8:	e007      	b.n	800310a <LCD_goto+0x38>
		LCD_send((0x80 | 0x40 | x_pos), CMD);
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff feeb 	bl	8002ee0 <LCD_send>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <toggle_EN_pin>:


void toggle_EN_pin(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
	LCD_EN_HIGH;
 8003118:	2201      	movs	r2, #1
 800311a:	2108      	movs	r1, #8
 800311c:	4807      	ldr	r0, [pc, #28]	; (800313c <toggle_EN_pin+0x28>)
 800311e:	f7fe fac7 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003122:	2002      	movs	r0, #2
 8003124:	f7fe f838 	bl	8001198 <HAL_Delay>
	LCD_EN_LOW;
 8003128:	2200      	movs	r2, #0
 800312a:	2108      	movs	r1, #8
 800312c:	4803      	ldr	r0, [pc, #12]	; (800313c <toggle_EN_pin+0x28>)
 800312e:	f7fe fabf 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003132:	2002      	movs	r0, #2
 8003134:	f7fe f830 	bl	8001198 <HAL_Delay>
}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40010800 	.word	0x40010800

08003140 <TMD2771x_init>:
#include "TMD2771x.h"


uint8_t TMD2771x_init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
	uint8_t retval = 0x00;
 8003146:	2300      	movs	r3, #0
 8003148:	71fb      	strb	r3, [r7, #7]

	TMD2771x_write_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_ENABLE_REG), 0x0F);
 800314a:	210f      	movs	r1, #15
 800314c:	20a0      	movs	r0, #160	; 0xa0
 800314e:	f000 f847 	bl	80031e0 <TMD2771x_write_byte>
	TMD2771x_write_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_ATIME_REG), 0xDB);
 8003152:	21db      	movs	r1, #219	; 0xdb
 8003154:	20a1      	movs	r0, #161	; 0xa1
 8003156:	f000 f843 	bl	80031e0 <TMD2771x_write_byte>
	TMD2771x_write_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_PTIME_REG), 0xFF);
 800315a:	21ff      	movs	r1, #255	; 0xff
 800315c:	20a2      	movs	r0, #162	; 0xa2
 800315e:	f000 f83f 	bl	80031e0 <TMD2771x_write_byte>
	TMD2771x_write_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_WTIME_REG), 0xFF);
 8003162:	21ff      	movs	r1, #255	; 0xff
 8003164:	20a3      	movs	r0, #163	; 0xa3
 8003166:	f000 f83b 	bl	80031e0 <TMD2771x_write_byte>
	TMD2771x_write_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_PPULSE_REG), 0x04);
 800316a:	2104      	movs	r1, #4
 800316c:	20ae      	movs	r0, #174	; 0xae
 800316e:	f000 f837 	bl	80031e0 <TMD2771x_write_byte>
	TMD2771x_write_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_CONTROL_REG), 0x20);
 8003172:	2120      	movs	r1, #32
 8003174:	20af      	movs	r0, #175	; 0xaf
 8003176:	f000 f833 	bl	80031e0 <TMD2771x_write_byte>

	HAL_Delay(900);
 800317a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800317e:	f7fe f80b 	bl	8001198 <HAL_Delay>

	retval = TMD2771x_read_byte((TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_ID_REG));
 8003182:	20b2      	movs	r0, #178	; 0xb2
 8003184:	f000 f84a 	bl	800321c <TMD2771x_read_byte>
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]

	if(retval == TMD27711_device_ID)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b20      	cmp	r3, #32
 8003190:	d101      	bne.n	8003196 <TMD2771x_init+0x56>
	{
		return 1;
 8003192:	2301      	movs	r3, #1
 8003194:	e005      	b.n	80031a2 <TMD2771x_init+0x62>
	}

	else if(retval == TMD27713_device_ID)
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b29      	cmp	r3, #41	; 0x29
 800319a:	d101      	bne.n	80031a0 <TMD2771x_init+0x60>
	{
		return 2;
 800319c:	2302      	movs	r3, #2
 800319e:	e000      	b.n	80031a2 <TMD2771x_init+0x62>
	}

	else
	{
		return 0;
 80031a0:	2300      	movs	r3, #0
	}
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <make_word>:


uint16_t make_word(uint8_t HB, uint8_t LB)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	460a      	mov	r2, r1
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	4613      	mov	r3, r2
 80031b8:	71bb      	strb	r3, [r7, #6]
	uint16_t retval = 0x0000;
 80031ba:	2300      	movs	r3, #0
 80031bc:	81fb      	strh	r3, [r7, #14]

	retval = (uint16_t)HB;
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	81fb      	strh	r3, [r7, #14]
	retval <<= 8;
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	81fb      	strh	r3, [r7, #14]
	retval |= (uint8_t)LB;
 80031c8:	79bb      	ldrb	r3, [r7, #6]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	81fb      	strh	r3, [r7, #14]

	return retval;
 80031d2:	89fb      	ldrh	r3, [r7, #14]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <TMD2771x_write_byte>:


void TMD2771x_write_byte(uint8_t address, uint8_t value)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	4603      	mov	r3, r0
 80031e8:	460a      	mov	r2, r1
 80031ea:	71fb      	strb	r3, [r7, #7]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71bb      	strb	r3, [r7, #6]
	uint8_t wr_buffer[2] = {0x00, 0x00};
 80031f0:	2300      	movs	r3, #0
 80031f2:	81bb      	strh	r3, [r7, #12]

    wr_buffer[0] = address;
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	733b      	strb	r3, [r7, #12]
	wr_buffer[1] = value;
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, TMD2771x_I2C_ADDR, wr_buffer, 2, 1000);
 80031fc:	f107 020c 	add.w	r2, r7, #12
 8003200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2302      	movs	r3, #2
 8003208:	2172      	movs	r1, #114	; 0x72
 800320a:	4803      	ldr	r0, [pc, #12]	; (8003218 <TMD2771x_write_byte+0x38>)
 800320c:	f7fe fbac 	bl	8001968 <HAL_I2C_Master_Transmit>
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000028 	.word	0x20000028

0800321c <TMD2771x_read_byte>:


uint8_t TMD2771x_read_byte(uint8_t address)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
	uint8_t data_buffer[1] = {0x00};
 8003226:	2300      	movs	r3, #0
 8003228:	733b      	strb	r3, [r7, #12]
    uint8_t retval = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]

    data_buffer[0] = address;
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	733b      	strb	r3, [r7, #12]


	HAL_I2C_Master_Transmit(&hi2c1, TMD2771x_I2C_ADDR, data_buffer, 1, 1000);
 8003232:	f107 020c 	add.w	r2, r7, #12
 8003236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2301      	movs	r3, #1
 800323e:	2172      	movs	r1, #114	; 0x72
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <TMD2771x_read_byte+0x4c>)
 8003242:	f7fe fb91 	bl	8001968 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TMD2771x_I2C_ADDR, data_buffer, 1, 1000);
 8003246:	f107 020c 	add.w	r2, r7, #12
 800324a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2301      	movs	r3, #1
 8003252:	2172      	movs	r1, #114	; 0x72
 8003254:	4804      	ldr	r0, [pc, #16]	; (8003268 <TMD2771x_read_byte+0x4c>)
 8003256:	f7fe fc85 	bl	8001b64 <HAL_I2C_Master_Receive>

	retval = data_buffer[0];
 800325a:	7b3b      	ldrb	r3, [r7, #12]
 800325c:	73fb      	strb	r3, [r7, #15]

	return retval;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000028 	.word	0x20000028
 800326c:	00000000 	.word	0x00000000

08003270 <TMD2771x_get_readings>:


void TMD2771x_get_readings(uint16_t *als_value, uint16_t *prox_value)
{
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af02      	add	r7, sp, #8
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
	uint8_t data_buffer[6];
	uint16_t lum = 0x0000;
 800327a:	2300      	movs	r3, #0
 800327c:	83fb      	strh	r3, [r7, #30]
	uint16_t C0_value = 0x0000;
 800327e:	2300      	movs	r3, #0
 8003280:	83bb      	strh	r3, [r7, #28]
	uint16_t C1_value = 0x0000;
 8003282:	2300      	movs	r3, #0
 8003284:	837b      	strh	r3, [r7, #26]
	uint16_t prx_value = 0x0000;
 8003286:	2300      	movs	r3, #0
 8003288:	833b      	strh	r3, [r7, #24]
	float lum1 = 0.0;
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
	float lum2 = 0.0;
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	613b      	str	r3, [r7, #16]

	data_buffer[0] = (TMD2771x_command_mode | TMD2771x_auto_increment_protocol | TMD2771x_C0DATA_REG);
 8003296:	23b4      	movs	r3, #180	; 0xb4
 8003298:	723b      	strb	r3, [r7, #8]


	HAL_I2C_Master_Transmit(&hi2c1, TMD2771x_I2C_ADDR, data_buffer, 1, 1000);
 800329a:	f107 0208 	add.w	r2, r7, #8
 800329e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2301      	movs	r3, #1
 80032a6:	2172      	movs	r1, #114	; 0x72
 80032a8:	485f      	ldr	r0, [pc, #380]	; (8003428 <TMD2771x_get_readings+0x1b8>)
 80032aa:	f7fe fb5d 	bl	8001968 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TMD2771x_I2C_ADDR, data_buffer, 6, 1000);
 80032ae:	f107 0208 	add.w	r2, r7, #8
 80032b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2306      	movs	r3, #6
 80032ba:	2172      	movs	r1, #114	; 0x72
 80032bc:	485a      	ldr	r0, [pc, #360]	; (8003428 <TMD2771x_get_readings+0x1b8>)
 80032be:	f7fe fc51 	bl	8001b64 <HAL_I2C_Master_Receive>

	C0_value = make_word(data_buffer[1], data_buffer[0]);
 80032c2:	7a7b      	ldrb	r3, [r7, #9]
 80032c4:	7a3a      	ldrb	r2, [r7, #8]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff6e 	bl	80031aa <make_word>
 80032ce:	4603      	mov	r3, r0
 80032d0:	83bb      	strh	r3, [r7, #28]
	C1_value = make_word(data_buffer[3], data_buffer[2]);
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	7aba      	ldrb	r2, [r7, #10]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff66 	bl	80031aa <make_word>
 80032de:	4603      	mov	r3, r0
 80032e0:	837b      	strh	r3, [r7, #26]

	lum1 = ((((float)C0_value * 1.0) - ((float)C1_value * 2.0)) / TMD2771x_CPL);
 80032e2:	8bbb      	ldrh	r3, [r7, #28]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd fc07 	bl	8000af8 <__aeabi_ui2f>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f893 	bl	8000418 <__aeabi_f2d>
 80032f2:	4604      	mov	r4, r0
 80032f4:	460d      	mov	r5, r1
 80032f6:	8b7b      	ldrh	r3, [r7, #26]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fbfd 	bl	8000af8 <__aeabi_ui2f>
 80032fe:	4603      	mov	r3, r0
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f889 	bl	8000418 <__aeabi_f2d>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	f7fc ff27 	bl	800015c <__adddf3>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4620      	mov	r0, r4
 8003314:	4629      	mov	r1, r5
 8003316:	f7fc ff1f 	bl	8000158 <__aeabi_dsub>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	a33d      	add	r3, pc, #244	; (adr r3, 8003418 <TMD2771x_get_readings+0x1a8>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f7fd f9f8 	bl	800071c <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f7fd fada 	bl	80008ec <__aeabi_d2f>
 8003338:	4603      	mov	r3, r0
 800333a:	617b      	str	r3, [r7, #20]
	lum2 = ((((float)C0_value * 0.6)  - ((float)C1_value * 1.0)) / TMD2771x_CPL);
 800333c:	8bbb      	ldrh	r3, [r7, #28]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fbda 	bl	8000af8 <__aeabi_ui2f>
 8003344:	4603      	mov	r3, r0
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f866 	bl	8000418 <__aeabi_f2d>
 800334c:	a334      	add	r3, pc, #208	; (adr r3, 8003420 <TMD2771x_get_readings+0x1b0>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fd f8b9 	bl	80004c8 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	8b7b      	ldrh	r3, [r7, #26]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fbc9 	bl	8000af8 <__aeabi_ui2f>
 8003366:	4603      	mov	r3, r0
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f855 	bl	8000418 <__aeabi_f2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fc feef 	bl	8000158 <__aeabi_dsub>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	a325      	add	r3, pc, #148	; (adr r3, 8003418 <TMD2771x_get_readings+0x1a8>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fd f9c8 	bl	800071c <__aeabi_ddiv>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7fd faaa 	bl	80008ec <__aeabi_d2f>
 8003398:	4603      	mov	r3, r0
 800339a:	613b      	str	r3, [r7, #16]

	if((lum1 > 0) && (lum1 > lum2))
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f7fd fc6d 	bl	8000c80 <__aeabi_fcmpgt>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <TMD2771x_get_readings+0x156>
 80033ac:	6939      	ldr	r1, [r7, #16]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7fd fc66 	bl	8000c80 <__aeabi_fcmpgt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <TMD2771x_get_readings+0x156>
	{
		lum = (uint16_t)lum1;
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7fd fc6a 	bl	8000c94 <__aeabi_f2uiz>
 80033c0:	4603      	mov	r3, r0
 80033c2:	83fb      	strh	r3, [r7, #30]
 80033c4:	e013      	b.n	80033ee <TMD2771x_get_readings+0x17e>
	}

	else if((lum2 > 0) && (lum2 > lum1))
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	6938      	ldr	r0, [r7, #16]
 80033cc:	f7fd fc58 	bl	8000c80 <__aeabi_fcmpgt>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <TMD2771x_get_readings+0x17e>
 80033d6:	6979      	ldr	r1, [r7, #20]
 80033d8:	6938      	ldr	r0, [r7, #16]
 80033da:	f7fd fc51 	bl	8000c80 <__aeabi_fcmpgt>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <TMD2771x_get_readings+0x17e>
	{
		lum = (uint16_t)lum2;
 80033e4:	6938      	ldr	r0, [r7, #16]
 80033e6:	f7fd fc55 	bl	8000c94 <__aeabi_f2uiz>
 80033ea:	4603      	mov	r3, r0
 80033ec:	83fb      	strh	r3, [r7, #30]
	}

	*als_value = lum;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8bfa      	ldrh	r2, [r7, #30]
 80033f2:	801a      	strh	r2, [r3, #0]

	prx_value = make_word(data_buffer[5], data_buffer[4]);
 80033f4:	7b7b      	ldrb	r3, [r7, #13]
 80033f6:	7b3a      	ldrb	r2, [r7, #12]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fed5 	bl	80031aa <make_word>
 8003400:	4603      	mov	r3, r0
 8003402:	833b      	strh	r3, [r7, #24]

	*prox_value = prx_value;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	8b3a      	ldrh	r2, [r7, #24]
 8003408:	801a      	strh	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bdb0      	pop	{r4, r5, r7, pc}
 8003412:	bf00      	nop
 8003414:	f3af 8000 	nop.w
 8003418:	60000000 	.word	0x60000000
 800341c:	4010d555 	.word	0x4010d555
 8003420:	33333333 	.word	0x33333333
 8003424:	3fe33333 	.word	0x3fe33333
 8003428:	20000028 	.word	0x20000028

0800342c <print_I>:
     LCD_putstr(ch);
}


void print_I(unsigned char x_pos, unsigned char y_pos, signed long value)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	603a      	str	r2, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	460b      	mov	r3, r1
 800343a:	71bb      	strb	r3, [r7, #6]
    char ch[7] = {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, '\0'};
 800343c:	4aba      	ldr	r2, [pc, #744]	; (8003728 <print_I+0x2fc>)
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003446:	6018      	str	r0, [r3, #0]
 8003448:	3304      	adds	r3, #4
 800344a:	8019      	strh	r1, [r3, #0]
 800344c:	3302      	adds	r3, #2
 800344e:	0c0a      	lsrs	r2, r1, #16
 8003450:	701a      	strb	r2, [r3, #0]

    if(value < 0)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	da05      	bge.n	8003464 <print_I+0x38>
    {
        ch[0] = 0x2D;
 8003458:	232d      	movs	r3, #45	; 0x2d
 800345a:	723b      	strb	r3, [r7, #8]
        value = -value;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	425b      	negs	r3, r3
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	e001      	b.n	8003468 <print_I+0x3c>
    }
    else
    {
        ch[0] = 0x20;
 8003464:	2320      	movs	r3, #32
 8003466:	723b      	strb	r3, [r7, #8]
    }

    if(value > 9999)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f242 720f 	movw	r2, #9999	; 0x270f
 800346e:	4293      	cmp	r3, r2
 8003470:	dd5c      	ble.n	800352c <print_I+0x100>
    {
        ch[1] = ((value / 10000) + 0x30);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	4aad      	ldr	r2, [pc, #692]	; (800372c <print_I+0x300>)
 8003476:	fb82 1203 	smull	r1, r2, r2, r3
 800347a:	1312      	asrs	r2, r2, #12
 800347c:	17db      	asrs	r3, r3, #31
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3330      	adds	r3, #48	; 0x30
 8003484:	b2db      	uxtb	r3, r3
 8003486:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 10000)/ 1000) + 0x30);
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	4ba8      	ldr	r3, [pc, #672]	; (800372c <print_I+0x300>)
 800348c:	fb83 1302 	smull	r1, r3, r3, r2
 8003490:	1319      	asrs	r1, r3, #12
 8003492:	17d3      	asrs	r3, r2, #31
 8003494:	1acb      	subs	r3, r1, r3
 8003496:	f242 7110 	movw	r1, #10000	; 0x2710
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	4aa3      	ldr	r2, [pc, #652]	; (8003730 <print_I+0x304>)
 80034a2:	fb82 1203 	smull	r1, r2, r2, r3
 80034a6:	1192      	asrs	r2, r2, #6
 80034a8:	17db      	asrs	r3, r3, #31
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	3330      	adds	r3, #48	; 0x30
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	72bb      	strb	r3, [r7, #10]
        ch[3] = (((value % 1000) / 100) + 0x30);
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	4b9e      	ldr	r3, [pc, #632]	; (8003730 <print_I+0x304>)
 80034b8:	fb83 1302 	smull	r1, r3, r3, r2
 80034bc:	1199      	asrs	r1, r3, #6
 80034be:	17d3      	asrs	r3, r2, #31
 80034c0:	1acb      	subs	r3, r1, r3
 80034c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	4a99      	ldr	r2, [pc, #612]	; (8003734 <print_I+0x308>)
 80034ce:	fb82 1203 	smull	r1, r2, r2, r3
 80034d2:	1152      	asrs	r2, r2, #5
 80034d4:	17db      	asrs	r3, r3, #31
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	3330      	adds	r3, #48	; 0x30
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	72fb      	strb	r3, [r7, #11]
        ch[4] = (((value % 100) / 10) + 0x30);
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4b94      	ldr	r3, [pc, #592]	; (8003734 <print_I+0x308>)
 80034e4:	fb83 1302 	smull	r1, r3, r3, r2
 80034e8:	1159      	asrs	r1, r3, #5
 80034ea:	17d3      	asrs	r3, r2, #31
 80034ec:	1acb      	subs	r3, r1, r3
 80034ee:	2164      	movs	r1, #100	; 0x64
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	4a90      	ldr	r2, [pc, #576]	; (8003738 <print_I+0x30c>)
 80034f8:	fb82 1203 	smull	r1, r2, r2, r3
 80034fc:	1092      	asrs	r2, r2, #2
 80034fe:	17db      	asrs	r3, r3, #31
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3330      	adds	r3, #48	; 0x30
 8003506:	b2db      	uxtb	r3, r3
 8003508:	733b      	strb	r3, [r7, #12]
        ch[5] = ((value % 10) + 0x30);
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <print_I+0x30c>)
 800350e:	fb83 1302 	smull	r1, r3, r3, r2
 8003512:	1099      	asrs	r1, r3, #2
 8003514:	17d3      	asrs	r3, r2, #31
 8003516:	1ac9      	subs	r1, r1, r3
 8003518:	460b      	mov	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	1ad1      	subs	r1, r2, r3
 8003522:	b2cb      	uxtb	r3, r1
 8003524:	3330      	adds	r3, #48	; 0x30
 8003526:	b2db      	uxtb	r3, r3
 8003528:	737b      	strb	r3, [r7, #13]
 800352a:	e0ed      	b.n	8003708 <print_I+0x2dc>
    }

    else if((value > 999) && (value <= 9999))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003532:	db58      	blt.n	80035e6 <print_I+0x1ba>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f242 720f 	movw	r2, #9999	; 0x270f
 800353a:	4293      	cmp	r3, r2
 800353c:	dc53      	bgt.n	80035e6 <print_I+0x1ba>
    {
        ch[1] = (((value % 10000)/ 1000) + 0x30);
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4b7a      	ldr	r3, [pc, #488]	; (800372c <print_I+0x300>)
 8003542:	fb83 1302 	smull	r1, r3, r3, r2
 8003546:	1319      	asrs	r1, r3, #12
 8003548:	17d3      	asrs	r3, r2, #31
 800354a:	1acb      	subs	r3, r1, r3
 800354c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	4a76      	ldr	r2, [pc, #472]	; (8003730 <print_I+0x304>)
 8003558:	fb82 1203 	smull	r1, r2, r2, r3
 800355c:	1192      	asrs	r2, r2, #6
 800355e:	17db      	asrs	r3, r3, #31
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3330      	adds	r3, #48	; 0x30
 8003566:	b2db      	uxtb	r3, r3
 8003568:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 1000) / 100) + 0x30);
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4b70      	ldr	r3, [pc, #448]	; (8003730 <print_I+0x304>)
 800356e:	fb83 1302 	smull	r1, r3, r3, r2
 8003572:	1199      	asrs	r1, r3, #6
 8003574:	17d3      	asrs	r3, r2, #31
 8003576:	1acb      	subs	r3, r1, r3
 8003578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <print_I+0x308>)
 8003584:	fb82 1203 	smull	r1, r2, r2, r3
 8003588:	1152      	asrs	r2, r2, #5
 800358a:	17db      	asrs	r3, r3, #31
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3330      	adds	r3, #48	; 0x30
 8003592:	b2db      	uxtb	r3, r3
 8003594:	72bb      	strb	r3, [r7, #10]
        ch[3] = (((value % 100) / 10) + 0x30);
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <print_I+0x308>)
 800359a:	fb83 1302 	smull	r1, r3, r3, r2
 800359e:	1159      	asrs	r1, r3, #5
 80035a0:	17d3      	asrs	r3, r2, #31
 80035a2:	1acb      	subs	r3, r1, r3
 80035a4:	2164      	movs	r1, #100	; 0x64
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	4a62      	ldr	r2, [pc, #392]	; (8003738 <print_I+0x30c>)
 80035ae:	fb82 1203 	smull	r1, r2, r2, r3
 80035b2:	1092      	asrs	r2, r2, #2
 80035b4:	17db      	asrs	r3, r3, #31
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3330      	adds	r3, #48	; 0x30
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	72fb      	strb	r3, [r7, #11]
        ch[4] = ((value % 10) + 0x30);
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <print_I+0x30c>)
 80035c4:	fb83 1302 	smull	r1, r3, r3, r2
 80035c8:	1099      	asrs	r1, r3, #2
 80035ca:	17d3      	asrs	r3, r2, #31
 80035cc:	1ac9      	subs	r1, r1, r3
 80035ce:	460b      	mov	r3, r1
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	1ad1      	subs	r1, r2, r3
 80035d8:	b2cb      	uxtb	r3, r1
 80035da:	3330      	adds	r3, #48	; 0x30
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 80035e0:	2320      	movs	r3, #32
 80035e2:	737b      	strb	r3, [r7, #13]
 80035e4:	e090      	b.n	8003708 <print_I+0x2dc>
    }
    else if((value > 99) && (value <= 999))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b63      	cmp	r3, #99	; 0x63
 80035ea:	dd43      	ble.n	8003674 <print_I+0x248>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f2:	da3f      	bge.n	8003674 <print_I+0x248>
    {
        ch[1] = (((value % 1000) / 100) + 0x30);
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <print_I+0x304>)
 80035f8:	fb83 1302 	smull	r1, r3, r3, r2
 80035fc:	1199      	asrs	r1, r3, #6
 80035fe:	17d3      	asrs	r3, r2, #31
 8003600:	1acb      	subs	r3, r1, r3
 8003602:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	4a49      	ldr	r2, [pc, #292]	; (8003734 <print_I+0x308>)
 800360e:	fb82 1203 	smull	r1, r2, r2, r3
 8003612:	1152      	asrs	r2, r2, #5
 8003614:	17db      	asrs	r3, r3, #31
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3330      	adds	r3, #48	; 0x30
 800361c:	b2db      	uxtb	r3, r3
 800361e:	727b      	strb	r3, [r7, #9]
        ch[2] = (((value % 100) / 10) + 0x30);
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	4b44      	ldr	r3, [pc, #272]	; (8003734 <print_I+0x308>)
 8003624:	fb83 1302 	smull	r1, r3, r3, r2
 8003628:	1159      	asrs	r1, r3, #5
 800362a:	17d3      	asrs	r3, r2, #31
 800362c:	1acb      	subs	r3, r1, r3
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	4a40      	ldr	r2, [pc, #256]	; (8003738 <print_I+0x30c>)
 8003638:	fb82 1203 	smull	r1, r2, r2, r3
 800363c:	1092      	asrs	r2, r2, #2
 800363e:	17db      	asrs	r3, r3, #31
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3330      	adds	r3, #48	; 0x30
 8003646:	b2db      	uxtb	r3, r3
 8003648:	72bb      	strb	r3, [r7, #10]
        ch[3] = ((value % 10) + 0x30);
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <print_I+0x30c>)
 800364e:	fb83 1302 	smull	r1, r3, r3, r2
 8003652:	1099      	asrs	r1, r3, #2
 8003654:	17d3      	asrs	r3, r2, #31
 8003656:	1ac9      	subs	r1, r1, r3
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	1ad1      	subs	r1, r2, r3
 8003662:	b2cb      	uxtb	r3, r1
 8003664:	3330      	adds	r3, #48	; 0x30
 8003666:	b2db      	uxtb	r3, r3
 8003668:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 800366a:	2320      	movs	r3, #32
 800366c:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 800366e:	2320      	movs	r3, #32
 8003670:	737b      	strb	r3, [r7, #13]
 8003672:	e049      	b.n	8003708 <print_I+0x2dc>
    }
    else if((value > 9) && (value <= 99))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b09      	cmp	r3, #9
 8003678:	dd2e      	ble.n	80036d8 <print_I+0x2ac>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b63      	cmp	r3, #99	; 0x63
 800367e:	dc2b      	bgt.n	80036d8 <print_I+0x2ac>
    {
        ch[1] = (((value % 100) / 10) + 0x30);
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <print_I+0x308>)
 8003684:	fb83 1302 	smull	r1, r3, r3, r2
 8003688:	1159      	asrs	r1, r3, #5
 800368a:	17d3      	asrs	r3, r2, #31
 800368c:	1acb      	subs	r3, r1, r3
 800368e:	2164      	movs	r1, #100	; 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <print_I+0x30c>)
 8003698:	fb82 1203 	smull	r1, r2, r2, r3
 800369c:	1092      	asrs	r2, r2, #2
 800369e:	17db      	asrs	r3, r3, #31
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3330      	adds	r3, #48	; 0x30
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	727b      	strb	r3, [r7, #9]
        ch[2] = ((value % 10) + 0x30);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4b22      	ldr	r3, [pc, #136]	; (8003738 <print_I+0x30c>)
 80036ae:	fb83 1302 	smull	r1, r3, r3, r2
 80036b2:	1099      	asrs	r1, r3, #2
 80036b4:	17d3      	asrs	r3, r2, #31
 80036b6:	1ac9      	subs	r1, r1, r3
 80036b8:	460b      	mov	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	1ad1      	subs	r1, r2, r3
 80036c2:	b2cb      	uxtb	r3, r1
 80036c4:	3330      	adds	r3, #48	; 0x30
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	72bb      	strb	r3, [r7, #10]
        ch[3] = 0x20;
 80036ca:	2320      	movs	r3, #32
 80036cc:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 80036ce:	2320      	movs	r3, #32
 80036d0:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 80036d2:	2320      	movs	r3, #32
 80036d4:	737b      	strb	r3, [r7, #13]
 80036d6:	e017      	b.n	8003708 <print_I+0x2dc>
    }
    else
    {
        ch[1] = ((value % 10) + 0x30);
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <print_I+0x30c>)
 80036dc:	fb83 1302 	smull	r1, r3, r3, r2
 80036e0:	1099      	asrs	r1, r3, #2
 80036e2:	17d3      	asrs	r3, r2, #31
 80036e4:	1ac9      	subs	r1, r1, r3
 80036e6:	460b      	mov	r3, r1
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	1ad1      	subs	r1, r2, r3
 80036f0:	b2cb      	uxtb	r3, r1
 80036f2:	3330      	adds	r3, #48	; 0x30
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	727b      	strb	r3, [r7, #9]
        ch[2] = 0x20;
 80036f8:	2320      	movs	r3, #32
 80036fa:	72bb      	strb	r3, [r7, #10]
        ch[3] = 0x20;
 80036fc:	2320      	movs	r3, #32
 80036fe:	72fb      	strb	r3, [r7, #11]
        ch[4] = 0x20;
 8003700:	2320      	movs	r3, #32
 8003702:	733b      	strb	r3, [r7, #12]
        ch[5] = 0x20;
 8003704:	2320      	movs	r3, #32
 8003706:	737b      	strb	r3, [r7, #13]
    }

    LCD_goto(x_pos, y_pos);
 8003708:	79ba      	ldrb	r2, [r7, #6]
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fcdf 	bl	80030d2 <LCD_goto>
    LCD_putstr(ch);
 8003714:	f107 0308 	add.w	r3, r7, #8
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fcb9 	bl	8003090 <LCD_putstr>
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	08003818 	.word	0x08003818
 800372c:	68db8bad 	.word	0x68db8bad
 8003730:	10624dd3 	.word	0x10624dd3
 8003734:	51eb851f 	.word	0x51eb851f
 8003738:	66666667 	.word	0x66666667

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	2600      	movs	r6, #0
 8003740:	4d0c      	ldr	r5, [pc, #48]	; (8003774 <__libc_init_array+0x38>)
 8003742:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	42a6      	cmp	r6, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	f000 f822 	bl	8003794 <_init>
 8003750:	2600      	movs	r6, #0
 8003752:	4d0a      	ldr	r5, [pc, #40]	; (800377c <__libc_init_array+0x40>)
 8003754:	4c0a      	ldr	r4, [pc, #40]	; (8003780 <__libc_init_array+0x44>)
 8003756:	1b64      	subs	r4, r4, r5
 8003758:	10a4      	asrs	r4, r4, #2
 800375a:	42a6      	cmp	r6, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f855 3b04 	ldr.w	r3, [r5], #4
 8003764:	4798      	blx	r3
 8003766:	3601      	adds	r6, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f855 3b04 	ldr.w	r3, [r5], #4
 800376e:	4798      	blx	r3
 8003770:	3601      	adds	r6, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	08003840 	.word	0x08003840
 8003778:	08003840 	.word	0x08003840
 800377c:	08003840 	.word	0x08003840
 8003780:	08003844 	.word	0x08003844

08003784 <memset>:
 8003784:	4603      	mov	r3, r0
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <_init>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr

080037a0 <_fini>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr
